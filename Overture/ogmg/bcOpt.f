! This file automatically generated from bcOpt.bf with bpp.
! These next include files will define the macros that will define the difference approximations
! The actual macro is called below
! Use this next macro to declare the statement functions that are defined below
! To include derivatives of rx use OPTION=RX


! Define statement functions for difference approximations of order 2 
! To include derivatives of rx use OPTION=RX
! To include derivatives of rx use OPTION=RX



! Use this next macro to declare the statement functions that are defined below
! To include derivatives of rx use OPTION=RX


! Define statement functions for difference approximations of order 4 
! To include derivatives of rx use OPTION=RX
! To include derivatives of rx use OPTION=RX




! Extrapolation of u(i1,i2,i3) in direction (is1,is2,is3)
! WARNING : a macro named extrap3 is defined in neumannEquationForcing.h




! use the mask 




! Optionally using the forcing


! Optionally using the forcing, extrapolate 2nd ghost line





! ============================================================================
! Assign values of an expression where the mask is greater than zero
! 
! NOTE:
!   n1a,n1b,n2a,n2b,n3a,n3c : indicies of the GHOST points
! ============================================================================



! =================================================================================================
! Macro: define the fourth-order accurate neumann BC which uses extrapolation of the 2nd ghost line
! =================================================================================================



! This next file defines the macro call appearing in the next function
c File generated by ogmg/neumann.maple
c Fourth-order BC for mixed boundary condition using the normal derivative of the PDE 
c BC:    an1*ur+an2*us+an0*u = g 
c PDE:   c11*urr + c12*urs + c22*uss + c1*ur + c2*us + c0 *u = f 
c PDE.r: urrr = b0*u + b1*us + b2*uss + b3*usss + bf  

c real alpha1,alpha2,a1,a2,a0
c real rxi,ryi,sxi,syi,rxr,rxs,sxr,sxs,ryr,rys,syr,sys
c real rxx,ryy,sxx,syy
c real rxrr,rxrs,rxss,ryrr,ryrs,ryss
c real sxrr,sxrs,sxss,syrr,syrs,syss
c real rxx,ryy,sxx,syy
c real rxxr,ryyr,rxxs,ryys, sxxr,syyr,sxxs,syys
c real rxNormI,rxNormIs,rxNormIss,rxNormIr,rxNormIrr
c real n1,n1s,n1ss,n2,n2s,n2ss
c real an1,an1s,an1ss,an2,an2s,an2ss 
c real an1r,an1rr,an2r,an2rs 
c real ff,ffs,ffr,g,gs,gss 
c real c11,c11r,c11s,c12,c12r,c12s,c22,c22r,c22s,c1,c1r,c1s,c2,c2r,c2s,c0,c0r,c0s
c real b0,b1,b2,b3,bf

! This Ogmg macro defines the forcing for fourth-order Neumann boundary conditions

! define derivatives in the r, s, and t directions:

! 2nd-order centered: 



! one-sided approximations on the left:


! one-sided approximations on the right:


! 2nd-order centered: 






! Extrapolation of f(i1,i2,i3) in direction (is1,is2,is3)





! ================================================================================================
!  Extrapolate a point. Choose the order of extrapolation based on how many 
! valid points exist (mask>0)
!
! fe : put result here 
! (k1,k2,k3) : check mask at points (i1+m*is1,i1+m*is2,i3+m*is3) m=1,2,..
! (l1,l2,l3) : Extrapolate point (l1,l2,l3) using points (l1+m*is1,l1+m*is2,l3+m*is3)
! (is1,is2,is3) : direction (shift) of extrapolation 
! 
! ================================================================================================

! ===================================================================================================
! Macro: Evaluate the boundary forcing g at the ghost point (k1,k2,k3) next to the target 
!     ghost point (l1,l2,l3) (where we are evaluating derivatives of g) and the boundary point (b1,b2,b3)
!
!                  |   |   |
!               ---B---L---X----  <- boundary 
!                  |   |   |
!               ---K---+---+----  <- ghost 
! 
!  This macro expects the following to be already set:
!  ax1, ax2 :  tangential directions: 
!            ax1= mod(axis+1,nd)
!            ax2= mod(axis+2,nd)
!  mdim(0:1,0:2) : index bounds on valid points where g is defined. 
! ===================================================================================================


! ========================================================================================================================
! This Ogmg macro defines the forcing for fourth-order Neumann boundary conditions
!    Lu = ff , Bu=g 
! Input: 
!  [mm1a,mm1b][mm2a,mm2b][mm3a,mm3b] : indexes for the boundary 
!  (i1,i2,i3) : point on the boundary 
!  (j1,j2,j3) : ghost point
!  (is1,is2,is3) : usual
! FORCING: forcing or no forcing  (if noForcing then return values are all zero)
! GRIDTYPE = rectangular or curvilinear
! DIR = R or S or T 
! DIM = 2 or 3 
! Return: DIM=2, DIR=R : ff, ffr, g, gss
!         DIM=2, DIR=S : ff, ffs, g, grr
!         DIM=3, DIR=R : ff, ffr, g, gss, gtt  + curvilinear: ffs, fft, gst 
!         DIM=3, DIR=S : ff, ffs, g, grr, gtt  + curvilinear: ffr, fft, grt
!         DIM=3, DIR=T : ff, fft, g, grr, gss  + curvilinear: ffr, ffs, grs
! ========================================================================================================================

!***************************NEW VERSION consistent with lineSmoothOpt.bf *******************
! Define the fourth-order accurate neumann BC which uses the normal derivative of the equation on the
! boundary. 



c File generated by ogmg/neumann.maple
c Fourth-order BC for mixed boundary condition using the normal derivative of the PDE 
c BC:    an1*ur+an2*us+an0*u = g 
c PDE:   c11*urr + c12*urs + c22*uss + c1*ur + c2*us + c0 *u = f 
c PDE.r: urrr + br2*urr = b0*u + b1*us + b3*usss + bf  

c real alpha1,alpha2,a1,a2,a0
c real rxi,ryi,sxi,syi,rxr,rxs,sxr,sxs,ryr,rys,syr,sys
c real rxx,ryy,sxx,syy
c real rxrr,rxrs,rxss,ryrr,ryrs,ryss
c real sxrr,sxrs,sxss,syrr,syrs,syss
c real rxx,ryy,sxx,syy
c real rxxr,ryyr,rxxs,ryys, sxxr,syyr,sxxs,syys
c real rxNormI,rxNormIs,rxNormIss,rxNormIr,rxNormIrr
c real n1,n1s,n1ss,n2,n2s,n2ss
c real an1,an1s,an1ss,an2,an2s,an2ss 
c real an1r,an1rr,an2r,an2rs 
c real ff,ffs,ffr,g,gs,gss 
c real c11,c11r,c11s,c12,c12r,c12s,c22,c22r,c22s,c1,c1r,c1s,c2,c2r,c2s,c0,c0r,c0s
c real b0,b1,b2,b3,bf,br2

c Solution for ur4=ga, urrr2+br2*urr2 = gb is 
c u(i1-1,i2,i3) = 2*br2*drn/(-3+br2*drn)*u(i1,i2,i3)+(-3-br2*drn)/(-3+br2*drn)*u(i1+1,i2,i3)+(6*ga*drn+gb*drn**3)/(-3+br2*drn)
c u(i1-2,i2,i3) = u(i1+2,i2,i3)+16*br2*drn/(-3+br2*drn)*u(i1,i2,i3)-16*br2*drn/(-3+br2*drn)*u(i1+1,i2,i3)+(12*ga*drn+8*gb*drn**3+12*ga*drn**2*br2)/(-3+br2*drn)

c Solution for ur4=ga, urrr2+br2*urr2 = gb is 
c u(i1+1,i2,i3) = 2*br2*drn/(3+br2*drn)*u(i1,i2,i3)+(3-br2*drn)/(3+br2*drn)*u(i1-1,i2,i3)+(6*ga*drn+gb*drn**3)/(3+br2*drn)
c u(i1+2,i2,i3) = u(i1-2,i2,i3)+16*br2*drn/(3+br2*drn)*u(i1,i2,i3)-16*br2*drn/(3+br2*drn)*u(i1-1,i2,i3)+(12*ga*drn+8*gb*drn**3-12*ga*drn**2*br2)/(3+br2*drn)

c Solution for ur4=ga, urrr2+br2*urr2 = gb, ca*u(i1-2)+cb*u(i1-1)+cc*u = gc is 
c u(i1-2,i2,i3) = (-3*cc+cc*br2*drn+2*br2*drn*cb)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1+2,i2,i3)+(-16*cc*br2*drn-16*br2*drn*cb)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1+1,i2,i3)+(16*br2*drn*gc+12*ga*drn**2*cc*br2+8*cc*gb*drn**3+12*cc*ga*drn+24*ga*drn**2*br2*cb)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)
c u(i1,i2,i3) = -(br2*drn*ca-3*ca)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1+2,i2,i3)-(-16*br2*drn*ca-br2*drn*cb-3*cb)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1+1,i2,i3)-(3*gc+6*cb*ga*drn+12*br2*drn**2*ca*ga-br2*drn*gc+cb*gb*drn**3+8*ca*gb*drn**3+12*ca*ga*drn)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)
c u(i1-1,i2,i3) = -2/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*br2*drn*ca*u(i1+2,i2,i3)-1/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*(3*cc+cc*br2*drn-16*br2*drn*ca)*u(i1+1,i2,i3)-1/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*(-cc*gb*drn**3-6*cc*ga*drn+24*br2*drn**2*ca*ga-2*br2*drn*gc)

c Solution for ur4=ga, urrr2+br2*urr2 = gb, ca*u(i1-2)+cb*u(i1-1)+cc*u = gc is 
c u(i1+2,i2,i3) = -(16*br2*drn*ca-3*cc-cc*br2*drn)/cc/(3+br2*drn)*u(i1-2,i2,i3)-(16*cc*br2*drn+16*br2*drn*cb)/cc/(3+br2*drn)*u(i1-1,i2,i3)-(-12*cc*ga*drn+12*ga*drn**2*cc*br2-16*br2*drn*gc-8*cc*gb*drn**3)/cc/(3+br2*drn)
c u(i1,i2,i3) = -ca/cc*u(i1-2,i2,i3)-cb/cc*u(i1-1,i2,i3)+gc/cc
c u(i1+1,i2,i3) = -2*br2*drn*ca/cc/(3+br2*drn)*u(i1-2,i2,i3)-(-3*cc+cc*br2*drn+2*br2*drn*cb)/cc/(3+br2*drn)*u(i1-1,i2,i3)-(-2*br2*drn*gc-6*cc*ga*drn-cc*gb*drn**3)/cc/(3+br2*drn)

!***************************EVEN NEWER VERSION consistent with lineSmoothOpt.bf *******************
! Define the fourth-order accurate neumann BC which uses the normal derivative of the equation on the
! boundary. 








!***************************EVEN NEWER VERSION consistent with lineSmoothOpt.bf *******************
! Define the fourth-order accurate neumann BC which uses the normal derivative of the equation on the
! boundary PLUS solve for the PDE on the boundary












! =====================================================================================================
! Apply the Mixed BC to second order on the two ghost lines -- this will reduce to an even symmetry
!  condition on a Cartesian grid if a0==0 and there is no forcing
!
! We discretize the following BC to second order: 
! 
! a1*( n1*ux + n2*ux + n3*uz ) + a0*u = f 
! a1*( (n1*rx+n2*ry+n3*rz)*ur + (n1*sx+n2*sy+n3*sz)*us + (n1*tx+n2*ty+n3*st)*ut ) + a0*u = f 
!
! On the second ghost line we use a wide formula in the normal direction: e.g.
!           ur = (u(i1+2,i2,i3)-u(i1-2,i2,i3))/(4*dr(0)) 
!
! GRIDTYPE = rectangular or curvilinear
! DIM = 2 or 3
! DIR = r or s or t
! FORCING: forcing or noForcing  
! 
! =====================================================================================================

! =====================================================================================================
!  Apply an odd symmetry BC
! =====================================================================================================


! =====================================================================================================
!  Apply a Neumann or mixed BC to second order on a rectangular grid
!           (a0 + a1 n.grad) u = f
! =====================================================================================================


      subroutine bcOpt( nd, nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,
     &    n1a,n1b,n2a,n2b,n3a,n3b, ndc, c, u,f,mask,rsxy, xy,
     &    bc, boundaryCondition, ipar, rpar )
! ===================================================================================
!  Optimised Boundary conditions.
!
!  n1a,n1b,n2a,n2b,n3a,n3b :  
!     "extrapolate" : indicies of points on the boundary.
!     Neumann/mixed : indicies of points on the first GHOST line (why did I do this?)
!
!  useCoefficients: 1=use the c array.
!  gridType : 0=rectangular, 1=curvilinear
!  useForcing : 1=use f for RHS to BC
!  side,axis : 0:1 and 0:2
! ===================================================================================

      implicit none

      integer nd, nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,
     &        n1a,n1b,n2a,n2b,n3a,n3b, ndc, bc

      real u(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real f(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real c(1:ndc,nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      integer mask(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real rsxy(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b,0:nd-1,0:nd-1)
      real xy(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b,0:nd-1)

      integer ipar(0:*),boundaryCondition(0:1,0:2)
      real rpar(0:*)


!     --- local variables ----

      real ue1,ue2,ue3,ue4,ure,urrre
      real ue0,use,usse,ussse,urrree
      real urre,urrf,urse,usssee,ussf


      integer is,is1,is2,is3,orderOfAccuracy,gridType,level,debug,myid,
     & side,axis,useForcing,bcOption4,solveEquationWithBC,grid,
     & isNeumannBC
      integer m1a,m1b,m2a,m2b,m3a,m3b,nn
      integer i1m1,i1p1,i2m1,i2p1,i3m1,i3p1
      real dr(0:2), dx(0:2)

      real dxn,t1
      real nsign,cd,cg,cf,ga,gb,gc

      integer useCoefficients,orderOfExtrapolation,
     & orderOfExtrapolationForNeumann
      integer dirichlet,neumann,mixed,equation,extrapolation,
     &        combination,equationToSecondOrder,mixedToSecondOrder,
     &        evenSymmetry,oddSymmetry,extrapolateTwoGhostLines
      parameter(
     &     dirichlet=1,
     &     neumann=2,
     &     mixed=3,
     &     equation=4,
     &     extrapolation=5,
     &     combination=6,
     &     equationToSecondOrder=7,
     &     mixedToSecondOrder=8,
     &     evenSymmetry=9,
     &     oddSymmetry=10,
     &     extrapolateTwoGhostLines=11 )

      integer rectangular,curvilinear
      parameter(
     &     rectangular=0,
     &     curvilinear=1)

       integer equationToSolve
       integer userDefined,laplaceEquation,divScalarGradOperator,
     &  heatEquationOperator,variableHeatEquationOperator,
     &   divScalarGradHeatOperator,secondOrderConstantCoefficients,
     & axisymmetricLaplaceEquation
      parameter(
     & userDefined=0,
     & laplaceEquation=1,
     & divScalarGradOperator=2,              ! div[ s[x] grad ]
     & heatEquationOperator=3,               ! I + c0*Delta
     & variableHeatEquationOperator=4,       ! I + s[x]*Delta
     & divScalarGradHeatOperator=5,  ! I + div[ s[x] grad ]
     & secondOrderConstantCoefficients=6,
     & axisymmetricLaplaceEquation=7 )

      integer dirichletFirstGhostLineBC,neumannFirstGhostLineBC
      integer dirichletSecondGhostLineBC,neumannSecondGhostLineBC
      integer useSymmetry,useEquationToFourthOrder,
     & useEquationToSecondOrder,useExtrapolation
      parameter(
     &  useSymmetry=0,
     &  useEquationToFourthOrder=1,
     &  useEquationToSecondOrder=2,
     &  useExtrapolation=3 )

      integer i1,i2,i3,j1,j2,j3,mGhost,mg1,mg2
      integer m11,m12,m13,m14,m15,
     &        m21,m22,m23,m24,m25,
     &        m31,m32,m33,m34,m35,
     &        m41,m42,m43,m44,m45,
     &        m51,m52,m53,m54,m55
      integer    m111,m211,m311,m411,m511,
     &           m121,m221,m321,m421,m521,
     &           m131,m231,m331,m431,m531,
     &           m141,m241,m341,m441,m541,
     &           m151,m251,m351,m451,m551,
     &           m112,m212,m312,m412,m512,
     &           m122,m222,m322,m422,m522,
     &           m132,m232,m332,m432,m532,
     &           m142,m242,m342,m442,m542,
     &           m152,m252,m352,m452,m552,
     &           m113,m213,m313,m413,m513,
     &           m123,m223,m323,m423,m523,
     &           m133,m233,m333,m433,m533,
     &           m143,m243,m343,m443,m543,
     &           m153,m253,m353,m453,m553,
     &           m114,m214,m314,m414,m514,
     &           m124,m224,m324,m424,m524,
     &           m134,m234,m334,m434,m534,
     &           m144,m244,m344,m444,m544,
     &           m154,m254,m354,m454,m554,
     &           m115,m215,m315,m415,m515,
     &           m125,m225,m325,m425,m525,
     &           m135,m235,m335,m435,m535,
     &           m145,m245,m345,m445,m545,
     &           m155,m255,m355,m455,m555
      real op2d, op3d,op2dSparse4,op3dSparse4, op2d4

!     ...variables for 4th-order Neumann BC    
      real drn
      real cf1,cf2,cg1,cg2
      real uu,us,uss,usss,ur,urr,urrr,urs,urss,urrs

      real rxSq,rxNorm,rxNorms,rxNormss,rxNormr,rxNormrr
      real a1s,a1ss,a2s,a2ss,a0s,a0ss, a1r,a1rr,a2r,a2rr,a0r,a0rr

      real a0,a1,a2,alpha1,alpha2
      real rxi,ryi,sxi,syi,rxr,rxs,sxr,sxs,ryr,rys,syr,sys
      real rxxi,ryyi,sxxi,syyi
      real rxrr,rxrs,rxss,ryrr,ryrs,ryss
      real sxrr,sxrs,sxss,syrr,syrs,syss
      real rxx,ryy,sxx,syy
      real rxxr,ryyr,rxxs,ryys, sxxr,syyr,sxxs,syys
      real rxNormI,rxNormIs,rxNormIss,rxNormIr,rxNormIrr
      real sxNormI,sxNormIs,sxNormIss,sxNormIr,sxNormIrr
      real n1,n1s,n1ss,n2,n2s,n2ss,n1r,n2r,n1rr,n2rr
      real an1,an1s,an1ss,an2,an2s,an2ss,an1r,an1rr,an2r,an2rs,an2rr,
     & an3,aNormi
      real ff,ffs,ffr,fft, g,gs,gss,gr,grr, gt,gtt, grt,gst
      real c11,c11r,c11s,c12,c12r,c12s,c22,c22r,c22s,c1,c1r,c1s,c2,c2r,
     & c2s,c0,c0r,c0s
      real b0,b1,b2,b3,bf,br2

      real fv(-1:1,-1:1,-1:1), gv(-1:1,-1:1,-1:1)

      integer ma,mb,mc
      real ca,cb,cc

!     --- start statement function ----
      integer kd
      real rx,ry,rz,sx,sy,sz,tx,ty,tz

       real d12
       real d22
       real h12
       real h22
       real rxr2
       real rxs2
       real rxt2
       real rxrr2
       real rxss2
       real rxrs2
       real ryr2
       real rys2
       real ryt2
       real ryrr2
       real ryss2
       real ryrs2
       real rzr2
       real rzs2
       real rzt2
       real rzrr2
       real rzss2
       real rzrs2
       real sxr2
       real sxs2
       real sxt2
       real sxrr2
       real sxss2
       real sxrs2
       real syr2
       real sys2
       real syt2
       real syrr2
       real syss2
       real syrs2
       real szr2
       real szs2
       real szt2
       real szrr2
       real szss2
       real szrs2
       real txr2
       real txs2
       real txt2
       real txrr2
       real txss2
       real txrs2
       real tyr2
       real tys2
       real tyt2
       real tyrr2
       real tyss2
       real tyrs2
       real tzr2
       real tzs2
       real tzt2
       real tzrr2
       real tzss2
       real tzrs2
       real rxx21
       real rxx22
       real rxy22
       real rxx23
       real rxy23
       real rxz23
       real ryx22
       real ryy22
       real ryx23
       real ryy23
       real ryz23
       real rzx22
       real rzy22
       real rzx23
       real rzy23
       real rzz23
       real sxx22
       real sxy22
       real sxx23
       real sxy23
       real sxz23
       real syx22
       real syy22
       real syx23
       real syy23
       real syz23
       real szx22
       real szy22
       real szx23
       real szy23
       real szz23
       real txx22
       real txy22
       real txx23
       real txy23
       real txz23
       real tyx22
       real tyy22
       real tyx23
       real tyy23
       real tyz23
       real tzx22
       real tzy22
       real tzx23
       real tzy23
       real tzz23
       real ur2
       real us2
       real ut2
       real urr2
       real uss2
       real urs2
       real utt2
       real urt2
       real ust2
       real urrr2
       real usss2
       real uttt2
       real ux21
       real uy21
       real uz21
       real ux22
       real uy22
       real uz22
       real ux23
       real uy23
       real uz23
       real uxx21
       real uyy21
       real uxy21
       real uxz21
       real uyz21
       real uzz21
       real ulaplacian21
       real uxx22
       real uyy22
       real uxy22
       real uxz22
       real uyz22
       real uzz22
       real ulaplacian22
       real uxx23
       real uyy23
       real uzz23
       real uxy23
       real uxz23
       real uyz23
       real ulaplacian23
       real ux23r
       real uy23r
       real uz23r
       real uxx23r
       real uyy23r
       real uxy23r
       real uzz23r
       real uxz23r
       real uyz23r
       real ux21r
       real uy21r
       real uz21r
       real uxx21r
       real uyy21r
       real uzz21r
       real uxy21r
       real uxz21r
       real uyz21r
       real ulaplacian21r
       real ux22r
       real uy22r
       real uz22r
       real uxx22r
       real uyy22r
       real uzz22r
       real uxy22r
       real uxz22r
       real uyz22r
       real ulaplacian22r
       real ulaplacian23r
       real uxxx22r
       real uyyy22r
       real uxxy22r
       real uxyy22r
       real uxxxx22r
       real uyyyy22r
       real uxxyy22r
       real uxxx23r
       real uyyy23r
       real uzzz23r
       real uxxy23r
       real uxxz23r
       real uxyy23r
       real uyyz23r
       real uxzz23r
       real uyzz23r
       real uxxxx23r
       real uyyyy23r
       real uzzzz23r
       real uxxyy23r
       real uxxzz23r
       real uyyzz23r
       real uLapSq22r
       real uLapSq23r
       real d14
       real d24
       real h41
       real h42
       real rxr4
       real rxs4
       real rxt4
       real ryr4
       real rys4
       real ryt4
       real rzr4
       real rzs4
       real rzt4
       real sxr4
       real sxs4
       real sxt4
       real syr4
       real sys4
       real syt4
       real szr4
       real szs4
       real szt4
       real txr4
       real txs4
       real txt4
       real tyr4
       real tys4
       real tyt4
       real tzr4
       real tzs4
       real tzt4
       real rxx41
       real rxx42
       real rxy42
       real rxx43
       real rxy43
       real rxz43
       real ryx42
       real ryy42
       real ryx43
       real ryy43
       real ryz43
       real rzx42
       real rzy42
       real rzx43
       real rzy43
       real rzz43
       real sxx42
       real sxy42
       real sxx43
       real sxy43
       real sxz43
       real syx42
       real syy42
       real syx43
       real syy43
       real syz43
       real szx42
       real szy42
       real szx43
       real szy43
       real szz43
       real txx42
       real txy42
       real txx43
       real txy43
       real txz43
       real tyx42
       real tyy42
       real tyx43
       real tyy43
       real tyz43
       real tzx42
       real tzy42
       real tzx43
       real tzy43
       real tzz43
       real ur4
       real us4
       real ut4
       real urr4
       real uss4
       real utt4
       real urs4
       real urt4
       real ust4
       real ux41
       real uy41
       real uz41
       real ux42
       real uy42
       real uz42
       real ux43
       real uy43
       real uz43
       real uxx41
       real uyy41
       real uxy41
       real uxz41
       real uyz41
       real uzz41
       real ulaplacian41
       real uxx42
       real uyy42
       real uxy42
       real uxz42
       real uyz42
       real uzz42
       real ulaplacian42
       real uxx43
       real uyy43
       real uzz43
       real uxy43
       real uxz43
       real uyz43
       real ulaplacian43
       real ux43r
       real uy43r
       real uz43r
       real uxx43r
       real uyy43r
       real uzz43r
       real uxy43r
       real uxz43r
       real uyz43r
       real ux41r
       real uy41r
       real uz41r
       real uxx41r
       real uyy41r
       real uzz41r
       real uxy41r
       real uxz41r
       real uyz41r
       real ulaplacian41r
       real ux42r
       real uy42r
       real uz42r
       real uxx42r
       real uyy42r
       real uzz42r
       real uxy42r
       real uxz42r
       real uyz42r
       real ulaplacian42r
       real ulaplacian43r

!     include 'declareDiffOrder2f.h'
!     include 'declareDiffOrder4f.h'

      op2d(i1,i2,i3,j1,j2,j3)=
     &     c(m11,i1,i2,i3)*u(j1-1,j2-1,j3)+
     &     c(m21,i1,i2,i3)*u(j1  ,j2-1,j3)+
     &     c(m31,i1,i2,i3)*u(j1+1,j2-1,j3)+
     &     c(m12,i1,i2,i3)*u(j1-1,j2  ,j3)+
     &     c(m22,i1,i2,i3)*u(j1  ,j2  ,j3)+
     &     c(m32,i1,i2,i3)*u(j1+1,j2  ,j3)+
     &     c(m13,i1,i2,i3)*u(j1-1,j2+1,j3)+
     &     c(m23,i1,i2,i3)*u(j1  ,j2+1,j3)+
     &     c(m33,i1,i2,i3)*u(j1+1,j2+1,j3)
      op3d(i1,i2,i3,j1,j2,j3)=
     &     c(m111,i1,i2,i3)*u(j1-1,j2-1,j3-1)+
     &     c(m211,i1,i2,i3)*u(j1  ,j2-1,j3-1)+
     &     c(m311,i1,i2,i3)*u(j1+1,j2-1,j3-1)+
     &     c(m121,i1,i2,i3)*u(j1-1,j2  ,j3-1)+
     &     c(m221,i1,i2,i3)*u(j1  ,j2  ,j3-1)+
     &     c(m321,i1,i2,i3)*u(j1+1,j2  ,j3-1)+
     &     c(m131,i1,i2,i3)*u(j1-1,j2+1,j3-1)+
     &     c(m231,i1,i2,i3)*u(j1  ,j2+1,j3-1)+
     &     c(m331,i1,i2,i3)*u(j1+1,j2+1,j3-1)+
     &     c(m112,i1,i2,i3)*u(j1-1,j2-1,j3  )+
     &     c(m212,i1,i2,i3)*u(j1  ,j2-1,j3  )+
     &     c(m312,i1,i2,i3)*u(j1+1,j2-1,j3  )+
     &     c(m122,i1,i2,i3)*u(j1-1,j2  ,j3  )+
     &     c(m222,i1,i2,i3)*u(j1  ,j2  ,j3  )+
     &     c(m322,i1,i2,i3)*u(j1+1,j2  ,j3  )+
     &     c(m132,i1,i2,i3)*u(j1-1,j2+1,j3  )+
     &     c(m232,i1,i2,i3)*u(j1  ,j2+1,j3  )+
     &     c(m332,i1,i2,i3)*u(j1+1,j2+1,j3  )+
     &     c(m113,i1,i2,i3)*u(j1-1,j2-1,j3+1)+
     &     c(m213,i1,i2,i3)*u(j1  ,j2-1,j3+1)+
     &     c(m313,i1,i2,i3)*u(j1+1,j2-1,j3+1)+
     &     c(m123,i1,i2,i3)*u(j1-1,j2  ,j3+1)+
     &     c(m223,i1,i2,i3)*u(j1  ,j2  ,j3+1)+
     &     c(m323,i1,i2,i3)*u(j1+1,j2  ,j3+1)+
     &     c(m133,i1,i2,i3)*u(j1-1,j2+1,j3+1)+
     &     c(m233,i1,i2,i3)*u(j1  ,j2+1,j3+1)+
     &     c(m333,i1,i2,i3)*u(j1+1,j2+1,j3+1)

! ********** 4th order ****************
      op2dSparse4(i1,i2,i3,j1,j2,j3)=
     &     c(m31,i1,i2,i3)*u(j1  ,j2-2,j3)+
     &     c(m32,i1,i2,i3)*u(j1  ,j2-1,j3)+
     &     c(m13,i1,i2,i3)*u(j1-2,j2  ,j3)+
     &     c(m23,i1,i2,i3)*u(j1-1,j2  ,j3)+
     &     c(m33,i1,i2,i3)*u(j1  ,j2  ,j3)+
     &     c(m43,i1,i2,i3)*u(j1+1,j2  ,j3)+
     &     c(m53,i1,i2,i3)*u(j1+2,j2  ,j3)+
     &     c(m34,i1,i2,i3)*u(j1  ,j2+1,j3)+
     &     c(m35,i1,i2,i3)*u(j1  ,j2+2,j3)

      op3dSparse4(i1,i2,i3,j1,j2,j3) =
     &     c(m331,i1,i2,i3)*u(j1  ,j2  ,j3-2)+
     &     c(m332,i1,i2,i3)*u(j1  ,j2  ,j3-1)+
     &     c(m313,i1,i2,i3)*u(j1  ,j2-2,j3  )+
     &     c(m323,i1,i2,i3)*u(j1  ,j2-1,j3  )+
     &     c(m133,i1,i2,i3)*u(j1-2,j2  ,j3  )+
     &     c(m233,i1,i2,i3)*u(j1-1,j2  ,j3  )+
     &     c(m333,i1,i2,i3)*u(j1  ,j2  ,j3  )+
     &     c(m433,i1,i2,i3)*u(j1+1,j2  ,j3  )+
     &     c(m533,i1,i2,i3)*u(j1+2,j2  ,j3  )+
     &     c(m343,i1,i2,i3)*u(j1  ,j2+1,j3  )+
     &     c(m353,i1,i2,i3)*u(j1  ,j2+2,j3  )+
     &     c(m334,i1,i2,i3)*u(j1  ,j2  ,j3+1)+
     &     c(m335,i1,i2,i3)*u(j1  ,j2  ,j3+2)

! ============= fourth order =================
      op2d4(i1,i2,i3)=
     &     c(m11,i1,i2,i3)*u(i1-2,i2-2,i3)+
     &     c(m21,i1,i2,i3)*u(i1-1,i2-2,i3)+
     &     c(m31,i1,i2,i3)*u(i1  ,i2-2,i3)+
     &     c(m41,i1,i2,i3)*u(i1+1,i2-2,i3)+
     &     c(m51,i1,i2,i3)*u(i1+2,i2-2,i3)+
     &     c(m12,i1,i2,i3)*u(i1-2,i2-1,i3)+
     &     c(m22,i1,i2,i3)*u(i1-1,i2-1,i3)+
     &     c(m32,i1,i2,i3)*u(i1  ,i2-1,i3)+
     &     c(m42,i1,i2,i3)*u(i1+1,i2-1,i3)+
     &     c(m52,i1,i2,i3)*u(i1+2,i2-1,i3)+
     &     c(m13,i1,i2,i3)*u(i1-2,i2  ,i3)+
     &     c(m23,i1,i2,i3)*u(i1-1,i2  ,i3)+
     &     c(m33,i1,i2,i3)*u(i1  ,i2  ,i3)+
     &     c(m43,i1,i2,i3)*u(i1+1,i2  ,i3)+
     &     c(m53,i1,i2,i3)*u(i1+2,i2  ,i3)+
     &     c(m14,i1,i2,i3)*u(i1-2,i2+1,i3)+
     &     c(m24,i1,i2,i3)*u(i1-1,i2+1,i3)+
     &     c(m34,i1,i2,i3)*u(i1  ,i2+1,i3)+
     &     c(m44,i1,i2,i3)*u(i1+1,i2+1,i3)+
     &     c(m54,i1,i2,i3)*u(i1+2,i2+1,i3)+
     &     c(m15,i1,i2,i3)*u(i1-2,i2+2,i3)+
     &     c(m25,i1,i2,i3)*u(i1-1,i2+2,i3)+
     &     c(m35,i1,i2,i3)*u(i1  ,i2+2,i3)+
     &     c(m45,i1,i2,i3)*u(i1+1,i2+2,i3)+
     &     c(m55,i1,i2,i3)*u(i1+2,i2+2,i3)

!.......statement functions for jacobian
      rx(i1,i2,i3)=rsxy(i1,i2,i3,0,0)
      ry(i1,i2,i3)=rsxy(i1,i2,i3,0,1)
      rz(i1,i2,i3)=rsxy(i1,i2,i3,0,2)
      sx(i1,i2,i3)=rsxy(i1,i2,i3,1,0)
      sy(i1,i2,i3)=rsxy(i1,i2,i3,1,1)
      sz(i1,i2,i3)=rsxy(i1,i2,i3,1,2)
      tx(i1,i2,i3)=rsxy(i1,i2,i3,2,0)
      ty(i1,i2,i3)=rsxy(i1,i2,i3,2,1)
      tz(i1,i2,i3)=rsxy(i1,i2,i3,2,2)


!     The next macro call will define the difference approximation statement functions
      d12(kd) = 1./(2.*dr(kd))
      d22(kd) = 1./(dr(kd)**2)
      ur2(i1,i2,i3)=(u(i1+1,i2,i3)-u(i1-1,i2,i3))*d12(0)
      us2(i1,i2,i3)=(u(i1,i2+1,i3)-u(i1,i2-1,i3))*d12(1)
      ut2(i1,i2,i3)=(u(i1,i2,i3+1)-u(i1,i2,i3-1))*d12(2)
      urr2(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1+1,i2,i3)+u(i1-1,i2,i3)) )*
     & d22(0)
      uss2(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1,i2+1,i3)+u(i1,i2-1,i3)) )*
     & d22(1)
      urs2(i1,i2,i3)=(ur2(i1,i2+1,i3)-ur2(i1,i2-1,i3))*d12(1)
      utt2(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1,i2,i3+1)+u(i1,i2,i3-1)) )*
     & d22(2)
      urt2(i1,i2,i3)=(ur2(i1,i2,i3+1)-ur2(i1,i2,i3-1))*d12(2)
      ust2(i1,i2,i3)=(us2(i1,i2,i3+1)-us2(i1,i2,i3-1))*d12(2)
      urrr2(i1,i2,i3)=(-2.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))+(u(i1+2,i2,i3)
     & -u(i1-2,i2,i3)) )*d22(0)*d12(0)
      usss2(i1,i2,i3)=(-2.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))+(u(i1,i2+2,i3)
     & -u(i1,i2-2,i3)) )*d22(1)*d12(1)
      uttt2(i1,i2,i3)=(-2.*(u(i1,i2,i3+1)-u(i1,i2,i3-1))+(u(i1,i2,i3+2)
     & -u(i1,i2,i3-2)) )*d22(2)*d12(2)
      rxr2(i1,i2,i3)=(rx(i1+1,i2,i3)-rx(i1-1,i2,i3))*d12(0)
      rxs2(i1,i2,i3)=(rx(i1,i2+1,i3)-rx(i1,i2-1,i3))*d12(1)
      rxt2(i1,i2,i3)=(rx(i1,i2,i3+1)-rx(i1,i2,i3-1))*d12(2)
      rxrr2(i1,i2,i3)=(-2.*rx(i1,i2,i3)+(rx(i1+1,i2,i3)+rx(i1-1,i2,i3))
     &  )*d22(0)
      rxss2(i1,i2,i3)=(-2.*rx(i1,i2,i3)+(rx(i1,i2+1,i3)+rx(i1,i2-1,i3))
     &  )*d22(1)
      rxrs2(i1,i2,i3)=(rxr2(i1,i2+1,i3)-rxr2(i1,i2-1,i3))*d12(1)
      ryr2(i1,i2,i3)=(ry(i1+1,i2,i3)-ry(i1-1,i2,i3))*d12(0)
      rys2(i1,i2,i3)=(ry(i1,i2+1,i3)-ry(i1,i2-1,i3))*d12(1)
      ryt2(i1,i2,i3)=(ry(i1,i2,i3+1)-ry(i1,i2,i3-1))*d12(2)
      ryrr2(i1,i2,i3)=(-2.*ry(i1,i2,i3)+(ry(i1+1,i2,i3)+ry(i1-1,i2,i3))
     &  )*d22(0)
      ryss2(i1,i2,i3)=(-2.*ry(i1,i2,i3)+(ry(i1,i2+1,i3)+ry(i1,i2-1,i3))
     &  )*d22(1)
      ryrs2(i1,i2,i3)=(ryr2(i1,i2+1,i3)-ryr2(i1,i2-1,i3))*d12(1)
      rzr2(i1,i2,i3)=(rz(i1+1,i2,i3)-rz(i1-1,i2,i3))*d12(0)
      rzs2(i1,i2,i3)=(rz(i1,i2+1,i3)-rz(i1,i2-1,i3))*d12(1)
      rzt2(i1,i2,i3)=(rz(i1,i2,i3+1)-rz(i1,i2,i3-1))*d12(2)
      rzrr2(i1,i2,i3)=(-2.*rz(i1,i2,i3)+(rz(i1+1,i2,i3)+rz(i1-1,i2,i3))
     &  )*d22(0)
      rzss2(i1,i2,i3)=(-2.*rz(i1,i2,i3)+(rz(i1,i2+1,i3)+rz(i1,i2-1,i3))
     &  )*d22(1)
      rzrs2(i1,i2,i3)=(rzr2(i1,i2+1,i3)-rzr2(i1,i2-1,i3))*d12(1)
      sxr2(i1,i2,i3)=(sx(i1+1,i2,i3)-sx(i1-1,i2,i3))*d12(0)
      sxs2(i1,i2,i3)=(sx(i1,i2+1,i3)-sx(i1,i2-1,i3))*d12(1)
      sxt2(i1,i2,i3)=(sx(i1,i2,i3+1)-sx(i1,i2,i3-1))*d12(2)
      sxrr2(i1,i2,i3)=(-2.*sx(i1,i2,i3)+(sx(i1+1,i2,i3)+sx(i1-1,i2,i3))
     &  )*d22(0)
      sxss2(i1,i2,i3)=(-2.*sx(i1,i2,i3)+(sx(i1,i2+1,i3)+sx(i1,i2-1,i3))
     &  )*d22(1)
      sxrs2(i1,i2,i3)=(sxr2(i1,i2+1,i3)-sxr2(i1,i2-1,i3))*d12(1)
      syr2(i1,i2,i3)=(sy(i1+1,i2,i3)-sy(i1-1,i2,i3))*d12(0)
      sys2(i1,i2,i3)=(sy(i1,i2+1,i3)-sy(i1,i2-1,i3))*d12(1)
      syt2(i1,i2,i3)=(sy(i1,i2,i3+1)-sy(i1,i2,i3-1))*d12(2)
      syrr2(i1,i2,i3)=(-2.*sy(i1,i2,i3)+(sy(i1+1,i2,i3)+sy(i1-1,i2,i3))
     &  )*d22(0)
      syss2(i1,i2,i3)=(-2.*sy(i1,i2,i3)+(sy(i1,i2+1,i3)+sy(i1,i2-1,i3))
     &  )*d22(1)
      syrs2(i1,i2,i3)=(syr2(i1,i2+1,i3)-syr2(i1,i2-1,i3))*d12(1)
      szr2(i1,i2,i3)=(sz(i1+1,i2,i3)-sz(i1-1,i2,i3))*d12(0)
      szs2(i1,i2,i3)=(sz(i1,i2+1,i3)-sz(i1,i2-1,i3))*d12(1)
      szt2(i1,i2,i3)=(sz(i1,i2,i3+1)-sz(i1,i2,i3-1))*d12(2)
      szrr2(i1,i2,i3)=(-2.*sz(i1,i2,i3)+(sz(i1+1,i2,i3)+sz(i1-1,i2,i3))
     &  )*d22(0)
      szss2(i1,i2,i3)=(-2.*sz(i1,i2,i3)+(sz(i1,i2+1,i3)+sz(i1,i2-1,i3))
     &  )*d22(1)
      szrs2(i1,i2,i3)=(szr2(i1,i2+1,i3)-szr2(i1,i2-1,i3))*d12(1)
      txr2(i1,i2,i3)=(tx(i1+1,i2,i3)-tx(i1-1,i2,i3))*d12(0)
      txs2(i1,i2,i3)=(tx(i1,i2+1,i3)-tx(i1,i2-1,i3))*d12(1)
      txt2(i1,i2,i3)=(tx(i1,i2,i3+1)-tx(i1,i2,i3-1))*d12(2)
      txrr2(i1,i2,i3)=(-2.*tx(i1,i2,i3)+(tx(i1+1,i2,i3)+tx(i1-1,i2,i3))
     &  )*d22(0)
      txss2(i1,i2,i3)=(-2.*tx(i1,i2,i3)+(tx(i1,i2+1,i3)+tx(i1,i2-1,i3))
     &  )*d22(1)
      txrs2(i1,i2,i3)=(txr2(i1,i2+1,i3)-txr2(i1,i2-1,i3))*d12(1)
      tyr2(i1,i2,i3)=(ty(i1+1,i2,i3)-ty(i1-1,i2,i3))*d12(0)
      tys2(i1,i2,i3)=(ty(i1,i2+1,i3)-ty(i1,i2-1,i3))*d12(1)
      tyt2(i1,i2,i3)=(ty(i1,i2,i3+1)-ty(i1,i2,i3-1))*d12(2)
      tyrr2(i1,i2,i3)=(-2.*ty(i1,i2,i3)+(ty(i1+1,i2,i3)+ty(i1-1,i2,i3))
     &  )*d22(0)
      tyss2(i1,i2,i3)=(-2.*ty(i1,i2,i3)+(ty(i1,i2+1,i3)+ty(i1,i2-1,i3))
     &  )*d22(1)
      tyrs2(i1,i2,i3)=(tyr2(i1,i2+1,i3)-tyr2(i1,i2-1,i3))*d12(1)
      tzr2(i1,i2,i3)=(tz(i1+1,i2,i3)-tz(i1-1,i2,i3))*d12(0)
      tzs2(i1,i2,i3)=(tz(i1,i2+1,i3)-tz(i1,i2-1,i3))*d12(1)
      tzt2(i1,i2,i3)=(tz(i1,i2,i3+1)-tz(i1,i2,i3-1))*d12(2)
      tzrr2(i1,i2,i3)=(-2.*tz(i1,i2,i3)+(tz(i1+1,i2,i3)+tz(i1-1,i2,i3))
     &  )*d22(0)
      tzss2(i1,i2,i3)=(-2.*tz(i1,i2,i3)+(tz(i1,i2+1,i3)+tz(i1,i2-1,i3))
     &  )*d22(1)
      tzrs2(i1,i2,i3)=(tzr2(i1,i2+1,i3)-tzr2(i1,i2-1,i3))*d12(1)
      ux21(i1,i2,i3)= rx(i1,i2,i3)*ur2(i1,i2,i3)
      uy21(i1,i2,i3)=0
      uz21(i1,i2,i3)=0
      ux22(i1,i2,i3)= rx(i1,i2,i3)*ur2(i1,i2,i3)+sx(i1,i2,i3)*us2(i1,
     & i2,i3)
      uy22(i1,i2,i3)= ry(i1,i2,i3)*ur2(i1,i2,i3)+sy(i1,i2,i3)*us2(i1,
     & i2,i3)
      uz22(i1,i2,i3)=0
      ux23(i1,i2,i3)=rx(i1,i2,i3)*ur2(i1,i2,i3)+sx(i1,i2,i3)*us2(i1,i2,
     & i3)+tx(i1,i2,i3)*ut2(i1,i2,i3)
      uy23(i1,i2,i3)=ry(i1,i2,i3)*ur2(i1,i2,i3)+sy(i1,i2,i3)*us2(i1,i2,
     & i3)+ty(i1,i2,i3)*ut2(i1,i2,i3)
      uz23(i1,i2,i3)=rz(i1,i2,i3)*ur2(i1,i2,i3)+sz(i1,i2,i3)*us2(i1,i2,
     & i3)+tz(i1,i2,i3)*ut2(i1,i2,i3)
      rxx21(i1,i2,i3)= rx(i1,i2,i3)*rxr2(i1,i2,i3)
      rxx22(i1,i2,i3)= rx(i1,i2,i3)*rxr2(i1,i2,i3)+sx(i1,i2,i3)*rxs2(
     & i1,i2,i3)
      rxy22(i1,i2,i3)= ry(i1,i2,i3)*rxr2(i1,i2,i3)+sy(i1,i2,i3)*rxs2(
     & i1,i2,i3)
      rxx23(i1,i2,i3)=rx(i1,i2,i3)*rxr2(i1,i2,i3)+sx(i1,i2,i3)*rxs2(i1,
     & i2,i3)+tx(i1,i2,i3)*rxt2(i1,i2,i3)
      rxy23(i1,i2,i3)=ry(i1,i2,i3)*rxr2(i1,i2,i3)+sy(i1,i2,i3)*rxs2(i1,
     & i2,i3)+ty(i1,i2,i3)*rxt2(i1,i2,i3)
      rxz23(i1,i2,i3)=rz(i1,i2,i3)*rxr2(i1,i2,i3)+sz(i1,i2,i3)*rxs2(i1,
     & i2,i3)+tz(i1,i2,i3)*rxt2(i1,i2,i3)
      ryx22(i1,i2,i3)= rx(i1,i2,i3)*ryr2(i1,i2,i3)+sx(i1,i2,i3)*rys2(
     & i1,i2,i3)
      ryy22(i1,i2,i3)= ry(i1,i2,i3)*ryr2(i1,i2,i3)+sy(i1,i2,i3)*rys2(
     & i1,i2,i3)
      ryx23(i1,i2,i3)=rx(i1,i2,i3)*ryr2(i1,i2,i3)+sx(i1,i2,i3)*rys2(i1,
     & i2,i3)+tx(i1,i2,i3)*ryt2(i1,i2,i3)
      ryy23(i1,i2,i3)=ry(i1,i2,i3)*ryr2(i1,i2,i3)+sy(i1,i2,i3)*rys2(i1,
     & i2,i3)+ty(i1,i2,i3)*ryt2(i1,i2,i3)
      ryz23(i1,i2,i3)=rz(i1,i2,i3)*ryr2(i1,i2,i3)+sz(i1,i2,i3)*rys2(i1,
     & i2,i3)+tz(i1,i2,i3)*ryt2(i1,i2,i3)
      rzx22(i1,i2,i3)= rx(i1,i2,i3)*rzr2(i1,i2,i3)+sx(i1,i2,i3)*rzs2(
     & i1,i2,i3)
      rzy22(i1,i2,i3)= ry(i1,i2,i3)*rzr2(i1,i2,i3)+sy(i1,i2,i3)*rzs2(
     & i1,i2,i3)
      rzx23(i1,i2,i3)=rx(i1,i2,i3)*rzr2(i1,i2,i3)+sx(i1,i2,i3)*rzs2(i1,
     & i2,i3)+tx(i1,i2,i3)*rzt2(i1,i2,i3)
      rzy23(i1,i2,i3)=ry(i1,i2,i3)*rzr2(i1,i2,i3)+sy(i1,i2,i3)*rzs2(i1,
     & i2,i3)+ty(i1,i2,i3)*rzt2(i1,i2,i3)
      rzz23(i1,i2,i3)=rz(i1,i2,i3)*rzr2(i1,i2,i3)+sz(i1,i2,i3)*rzs2(i1,
     & i2,i3)+tz(i1,i2,i3)*rzt2(i1,i2,i3)
      sxx22(i1,i2,i3)= rx(i1,i2,i3)*sxr2(i1,i2,i3)+sx(i1,i2,i3)*sxs2(
     & i1,i2,i3)
      sxy22(i1,i2,i3)= ry(i1,i2,i3)*sxr2(i1,i2,i3)+sy(i1,i2,i3)*sxs2(
     & i1,i2,i3)
      sxx23(i1,i2,i3)=rx(i1,i2,i3)*sxr2(i1,i2,i3)+sx(i1,i2,i3)*sxs2(i1,
     & i2,i3)+tx(i1,i2,i3)*sxt2(i1,i2,i3)
      sxy23(i1,i2,i3)=ry(i1,i2,i3)*sxr2(i1,i2,i3)+sy(i1,i2,i3)*sxs2(i1,
     & i2,i3)+ty(i1,i2,i3)*sxt2(i1,i2,i3)
      sxz23(i1,i2,i3)=rz(i1,i2,i3)*sxr2(i1,i2,i3)+sz(i1,i2,i3)*sxs2(i1,
     & i2,i3)+tz(i1,i2,i3)*sxt2(i1,i2,i3)
      syx22(i1,i2,i3)= rx(i1,i2,i3)*syr2(i1,i2,i3)+sx(i1,i2,i3)*sys2(
     & i1,i2,i3)
      syy22(i1,i2,i3)= ry(i1,i2,i3)*syr2(i1,i2,i3)+sy(i1,i2,i3)*sys2(
     & i1,i2,i3)
      syx23(i1,i2,i3)=rx(i1,i2,i3)*syr2(i1,i2,i3)+sx(i1,i2,i3)*sys2(i1,
     & i2,i3)+tx(i1,i2,i3)*syt2(i1,i2,i3)
      syy23(i1,i2,i3)=ry(i1,i2,i3)*syr2(i1,i2,i3)+sy(i1,i2,i3)*sys2(i1,
     & i2,i3)+ty(i1,i2,i3)*syt2(i1,i2,i3)
      syz23(i1,i2,i3)=rz(i1,i2,i3)*syr2(i1,i2,i3)+sz(i1,i2,i3)*sys2(i1,
     & i2,i3)+tz(i1,i2,i3)*syt2(i1,i2,i3)
      szx22(i1,i2,i3)= rx(i1,i2,i3)*szr2(i1,i2,i3)+sx(i1,i2,i3)*szs2(
     & i1,i2,i3)
      szy22(i1,i2,i3)= ry(i1,i2,i3)*szr2(i1,i2,i3)+sy(i1,i2,i3)*szs2(
     & i1,i2,i3)
      szx23(i1,i2,i3)=rx(i1,i2,i3)*szr2(i1,i2,i3)+sx(i1,i2,i3)*szs2(i1,
     & i2,i3)+tx(i1,i2,i3)*szt2(i1,i2,i3)
      szy23(i1,i2,i3)=ry(i1,i2,i3)*szr2(i1,i2,i3)+sy(i1,i2,i3)*szs2(i1,
     & i2,i3)+ty(i1,i2,i3)*szt2(i1,i2,i3)
      szz23(i1,i2,i3)=rz(i1,i2,i3)*szr2(i1,i2,i3)+sz(i1,i2,i3)*szs2(i1,
     & i2,i3)+tz(i1,i2,i3)*szt2(i1,i2,i3)
      txx22(i1,i2,i3)= rx(i1,i2,i3)*txr2(i1,i2,i3)+sx(i1,i2,i3)*txs2(
     & i1,i2,i3)
      txy22(i1,i2,i3)= ry(i1,i2,i3)*txr2(i1,i2,i3)+sy(i1,i2,i3)*txs2(
     & i1,i2,i3)
      txx23(i1,i2,i3)=rx(i1,i2,i3)*txr2(i1,i2,i3)+sx(i1,i2,i3)*txs2(i1,
     & i2,i3)+tx(i1,i2,i3)*txt2(i1,i2,i3)
      txy23(i1,i2,i3)=ry(i1,i2,i3)*txr2(i1,i2,i3)+sy(i1,i2,i3)*txs2(i1,
     & i2,i3)+ty(i1,i2,i3)*txt2(i1,i2,i3)
      txz23(i1,i2,i3)=rz(i1,i2,i3)*txr2(i1,i2,i3)+sz(i1,i2,i3)*txs2(i1,
     & i2,i3)+tz(i1,i2,i3)*txt2(i1,i2,i3)
      tyx22(i1,i2,i3)= rx(i1,i2,i3)*tyr2(i1,i2,i3)+sx(i1,i2,i3)*tys2(
     & i1,i2,i3)
      tyy22(i1,i2,i3)= ry(i1,i2,i3)*tyr2(i1,i2,i3)+sy(i1,i2,i3)*tys2(
     & i1,i2,i3)
      tyx23(i1,i2,i3)=rx(i1,i2,i3)*tyr2(i1,i2,i3)+sx(i1,i2,i3)*tys2(i1,
     & i2,i3)+tx(i1,i2,i3)*tyt2(i1,i2,i3)
      tyy23(i1,i2,i3)=ry(i1,i2,i3)*tyr2(i1,i2,i3)+sy(i1,i2,i3)*tys2(i1,
     & i2,i3)+ty(i1,i2,i3)*tyt2(i1,i2,i3)
      tyz23(i1,i2,i3)=rz(i1,i2,i3)*tyr2(i1,i2,i3)+sz(i1,i2,i3)*tys2(i1,
     & i2,i3)+tz(i1,i2,i3)*tyt2(i1,i2,i3)
      tzx22(i1,i2,i3)= rx(i1,i2,i3)*tzr2(i1,i2,i3)+sx(i1,i2,i3)*tzs2(
     & i1,i2,i3)
      tzy22(i1,i2,i3)= ry(i1,i2,i3)*tzr2(i1,i2,i3)+sy(i1,i2,i3)*tzs2(
     & i1,i2,i3)
      tzx23(i1,i2,i3)=rx(i1,i2,i3)*tzr2(i1,i2,i3)+sx(i1,i2,i3)*tzs2(i1,
     & i2,i3)+tx(i1,i2,i3)*tzt2(i1,i2,i3)
      tzy23(i1,i2,i3)=ry(i1,i2,i3)*tzr2(i1,i2,i3)+sy(i1,i2,i3)*tzs2(i1,
     & i2,i3)+ty(i1,i2,i3)*tzt2(i1,i2,i3)
      tzz23(i1,i2,i3)=rz(i1,i2,i3)*tzr2(i1,i2,i3)+sz(i1,i2,i3)*tzs2(i1,
     & i2,i3)+tz(i1,i2,i3)*tzt2(i1,i2,i3)
      uxx21(i1,i2,i3)=(rx(i1,i2,i3)**2)*urr2(i1,i2,i3)+(rxx22(i1,i2,i3)
     & )*ur2(i1,i2,i3)
      uyy21(i1,i2,i3)=0
      uxy21(i1,i2,i3)=0
      uxz21(i1,i2,i3)=0
      uyz21(i1,i2,i3)=0
      uzz21(i1,i2,i3)=0
      ulaplacian21(i1,i2,i3)=uxx21(i1,i2,i3)
      uxx22(i1,i2,i3)=(rx(i1,i2,i3)**2)*urr2(i1,i2,i3)+2.*(rx(i1,i2,i3)
     & *sx(i1,i2,i3))*urs2(i1,i2,i3)+(sx(i1,i2,i3)**2)*uss2(i1,i2,i3)+
     & (rxx22(i1,i2,i3))*ur2(i1,i2,i3)+(sxx22(i1,i2,i3))*us2(i1,i2,i3)
      uyy22(i1,i2,i3)=(ry(i1,i2,i3)**2)*urr2(i1,i2,i3)+2.*(ry(i1,i2,i3)
     & *sy(i1,i2,i3))*urs2(i1,i2,i3)+(sy(i1,i2,i3)**2)*uss2(i1,i2,i3)+
     & (ryy22(i1,i2,i3))*ur2(i1,i2,i3)+(syy22(i1,i2,i3))*us2(i1,i2,i3)
      uxy22(i1,i2,i3)=rx(i1,i2,i3)*ry(i1,i2,i3)*urr2(i1,i2,i3)+(rx(i1,
     & i2,i3)*sy(i1,i2,i3)+ry(i1,i2,i3)*sx(i1,i2,i3))*urs2(i1,i2,i3)+
     & sx(i1,i2,i3)*sy(i1,i2,i3)*uss2(i1,i2,i3)+rxy22(i1,i2,i3)*ur2(
     & i1,i2,i3)+sxy22(i1,i2,i3)*us2(i1,i2,i3)
      uxz22(i1,i2,i3)=0
      uyz22(i1,i2,i3)=0
      uzz22(i1,i2,i3)=0
      ulaplacian22(i1,i2,i3)=(rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)*urr2(i1,
     & i2,i3)+2.*(rx(i1,i2,i3)*sx(i1,i2,i3)+ ry(i1,i2,i3)*sy(i1,i2,i3)
     & )*urs2(i1,i2,i3)+(sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)*uss2(i1,i2,
     & i3)+(rxx22(i1,i2,i3)+ryy22(i1,i2,i3))*ur2(i1,i2,i3)+(sxx22(i1,
     & i2,i3)+syy22(i1,i2,i3))*us2(i1,i2,i3)
      uxx23(i1,i2,i3)=rx(i1,i2,i3)**2*urr2(i1,i2,i3)+sx(i1,i2,i3)**2*
     & uss2(i1,i2,i3)+tx(i1,i2,i3)**2*utt2(i1,i2,i3)+2.*rx(i1,i2,i3)*
     & sx(i1,i2,i3)*urs2(i1,i2,i3)+2.*rx(i1,i2,i3)*tx(i1,i2,i3)*urt2(
     & i1,i2,i3)+2.*sx(i1,i2,i3)*tx(i1,i2,i3)*ust2(i1,i2,i3)+rxx23(i1,
     & i2,i3)*ur2(i1,i2,i3)+sxx23(i1,i2,i3)*us2(i1,i2,i3)+txx23(i1,i2,
     & i3)*ut2(i1,i2,i3)
      uyy23(i1,i2,i3)=ry(i1,i2,i3)**2*urr2(i1,i2,i3)+sy(i1,i2,i3)**2*
     & uss2(i1,i2,i3)+ty(i1,i2,i3)**2*utt2(i1,i2,i3)+2.*ry(i1,i2,i3)*
     & sy(i1,i2,i3)*urs2(i1,i2,i3)+2.*ry(i1,i2,i3)*ty(i1,i2,i3)*urt2(
     & i1,i2,i3)+2.*sy(i1,i2,i3)*ty(i1,i2,i3)*ust2(i1,i2,i3)+ryy23(i1,
     & i2,i3)*ur2(i1,i2,i3)+syy23(i1,i2,i3)*us2(i1,i2,i3)+tyy23(i1,i2,
     & i3)*ut2(i1,i2,i3)
      uzz23(i1,i2,i3)=rz(i1,i2,i3)**2*urr2(i1,i2,i3)+sz(i1,i2,i3)**2*
     & uss2(i1,i2,i3)+tz(i1,i2,i3)**2*utt2(i1,i2,i3)+2.*rz(i1,i2,i3)*
     & sz(i1,i2,i3)*urs2(i1,i2,i3)+2.*rz(i1,i2,i3)*tz(i1,i2,i3)*urt2(
     & i1,i2,i3)+2.*sz(i1,i2,i3)*tz(i1,i2,i3)*ust2(i1,i2,i3)+rzz23(i1,
     & i2,i3)*ur2(i1,i2,i3)+szz23(i1,i2,i3)*us2(i1,i2,i3)+tzz23(i1,i2,
     & i3)*ut2(i1,i2,i3)
      uxy23(i1,i2,i3)=rx(i1,i2,i3)*ry(i1,i2,i3)*urr2(i1,i2,i3)+sx(i1,
     & i2,i3)*sy(i1,i2,i3)*uss2(i1,i2,i3)+tx(i1,i2,i3)*ty(i1,i2,i3)*
     & utt2(i1,i2,i3)+(rx(i1,i2,i3)*sy(i1,i2,i3)+ry(i1,i2,i3)*sx(i1,
     & i2,i3))*urs2(i1,i2,i3)+(rx(i1,i2,i3)*ty(i1,i2,i3)+ry(i1,i2,i3)*
     & tx(i1,i2,i3))*urt2(i1,i2,i3)+(sx(i1,i2,i3)*ty(i1,i2,i3)+sy(i1,
     & i2,i3)*tx(i1,i2,i3))*ust2(i1,i2,i3)+rxy23(i1,i2,i3)*ur2(i1,i2,
     & i3)+sxy23(i1,i2,i3)*us2(i1,i2,i3)+txy23(i1,i2,i3)*ut2(i1,i2,i3)
      uxz23(i1,i2,i3)=rx(i1,i2,i3)*rz(i1,i2,i3)*urr2(i1,i2,i3)+sx(i1,
     & i2,i3)*sz(i1,i2,i3)*uss2(i1,i2,i3)+tx(i1,i2,i3)*tz(i1,i2,i3)*
     & utt2(i1,i2,i3)+(rx(i1,i2,i3)*sz(i1,i2,i3)+rz(i1,i2,i3)*sx(i1,
     & i2,i3))*urs2(i1,i2,i3)+(rx(i1,i2,i3)*tz(i1,i2,i3)+rz(i1,i2,i3)*
     & tx(i1,i2,i3))*urt2(i1,i2,i3)+(sx(i1,i2,i3)*tz(i1,i2,i3)+sz(i1,
     & i2,i3)*tx(i1,i2,i3))*ust2(i1,i2,i3)+rxz23(i1,i2,i3)*ur2(i1,i2,
     & i3)+sxz23(i1,i2,i3)*us2(i1,i2,i3)+txz23(i1,i2,i3)*ut2(i1,i2,i3)
      uyz23(i1,i2,i3)=ry(i1,i2,i3)*rz(i1,i2,i3)*urr2(i1,i2,i3)+sy(i1,
     & i2,i3)*sz(i1,i2,i3)*uss2(i1,i2,i3)+ty(i1,i2,i3)*tz(i1,i2,i3)*
     & utt2(i1,i2,i3)+(ry(i1,i2,i3)*sz(i1,i2,i3)+rz(i1,i2,i3)*sy(i1,
     & i2,i3))*urs2(i1,i2,i3)+(ry(i1,i2,i3)*tz(i1,i2,i3)+rz(i1,i2,i3)*
     & ty(i1,i2,i3))*urt2(i1,i2,i3)+(sy(i1,i2,i3)*tz(i1,i2,i3)+sz(i1,
     & i2,i3)*ty(i1,i2,i3))*ust2(i1,i2,i3)+ryz23(i1,i2,i3)*ur2(i1,i2,
     & i3)+syz23(i1,i2,i3)*us2(i1,i2,i3)+tyz23(i1,i2,i3)*ut2(i1,i2,i3)
      ulaplacian23(i1,i2,i3)=(rx(i1,i2,i3)**2+ry(i1,i2,i3)**2+rz(i1,i2,
     & i3)**2)*urr2(i1,i2,i3)+(sx(i1,i2,i3)**2+sy(i1,i2,i3)**2+sz(i1,
     & i2,i3)**2)*uss2(i1,i2,i3)+(tx(i1,i2,i3)**2+ty(i1,i2,i3)**2+tz(
     & i1,i2,i3)**2)*utt2(i1,i2,i3)+2.*(rx(i1,i2,i3)*sx(i1,i2,i3)+ ry(
     & i1,i2,i3)*sy(i1,i2,i3)+rz(i1,i2,i3)*sz(i1,i2,i3))*urs2(i1,i2,
     & i3)+2.*(rx(i1,i2,i3)*tx(i1,i2,i3)+ ry(i1,i2,i3)*ty(i1,i2,i3)+
     & rz(i1,i2,i3)*tz(i1,i2,i3))*urt2(i1,i2,i3)+2.*(sx(i1,i2,i3)*tx(
     & i1,i2,i3)+ sy(i1,i2,i3)*ty(i1,i2,i3)+sz(i1,i2,i3)*tz(i1,i2,i3))
     & *ust2(i1,i2,i3)+(rxx23(i1,i2,i3)+ryy23(i1,i2,i3)+rzz23(i1,i2,
     & i3))*ur2(i1,i2,i3)+(sxx23(i1,i2,i3)+syy23(i1,i2,i3)+szz23(i1,
     & i2,i3))*us2(i1,i2,i3)+(txx23(i1,i2,i3)+tyy23(i1,i2,i3)+tzz23(
     & i1,i2,i3))*ut2(i1,i2,i3)
      !============================================================================================
      ! Define derivatives for a rectangular grid
      !
      !============================================================================================
      h12(kd) = 1./(2.*dx(kd))
      h22(kd) = 1./(dx(kd)**2)
      ux23r(i1,i2,i3)=(u(i1+1,i2,i3)-u(i1-1,i2,i3))*h12(0)
      uy23r(i1,i2,i3)=(u(i1,i2+1,i3)-u(i1,i2-1,i3))*h12(1)
      uz23r(i1,i2,i3)=(u(i1,i2,i3+1)-u(i1,i2,i3-1))*h12(2)
      uxx23r(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1+1,i2,i3)+u(i1-1,i2,i3)) )
     & *h22(0)
      uyy23r(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1,i2+1,i3)+u(i1,i2-1,i3)) )
     & *h22(1)
      uxy23r(i1,i2,i3)=(ux23r(i1,i2+1,i3)-ux23r(i1,i2-1,i3))*h12(1)
      uzz23r(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1,i2,i3+1)+u(i1,i2,i3-1)) )
     & *h22(2)
      uxz23r(i1,i2,i3)=(ux23r(i1,i2,i3+1)-ux23r(i1,i2,i3-1))*h12(2)
      uyz23r(i1,i2,i3)=(uy23r(i1,i2,i3+1)-uy23r(i1,i2,i3-1))*h12(2)
      ux21r(i1,i2,i3)= ux23r(i1,i2,i3)
      uy21r(i1,i2,i3)= uy23r(i1,i2,i3)
      uz21r(i1,i2,i3)= uz23r(i1,i2,i3)
      uxx21r(i1,i2,i3)= uxx23r(i1,i2,i3)
      uyy21r(i1,i2,i3)= uyy23r(i1,i2,i3)
      uzz21r(i1,i2,i3)= uzz23r(i1,i2,i3)
      uxy21r(i1,i2,i3)= uxy23r(i1,i2,i3)
      uxz21r(i1,i2,i3)= uxz23r(i1,i2,i3)
      uyz21r(i1,i2,i3)= uyz23r(i1,i2,i3)
      ulaplacian21r(i1,i2,i3)=uxx23r(i1,i2,i3)
      ux22r(i1,i2,i3)= ux23r(i1,i2,i3)
      uy22r(i1,i2,i3)= uy23r(i1,i2,i3)
      uz22r(i1,i2,i3)= uz23r(i1,i2,i3)
      uxx22r(i1,i2,i3)= uxx23r(i1,i2,i3)
      uyy22r(i1,i2,i3)= uyy23r(i1,i2,i3)
      uzz22r(i1,i2,i3)= uzz23r(i1,i2,i3)
      uxy22r(i1,i2,i3)= uxy23r(i1,i2,i3)
      uxz22r(i1,i2,i3)= uxz23r(i1,i2,i3)
      uyz22r(i1,i2,i3)= uyz23r(i1,i2,i3)
      ulaplacian22r(i1,i2,i3)=uxx23r(i1,i2,i3)+uyy23r(i1,i2,i3)
      ulaplacian23r(i1,i2,i3)=uxx23r(i1,i2,i3)+uyy23r(i1,i2,i3)+uzz23r(
     & i1,i2,i3)
      uxxx22r(i1,i2,i3)=(-2.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))+(u(i1+2,i2,
     & i3)-u(i1-2,i2,i3)) )*h22(0)*h12(0)
      uyyy22r(i1,i2,i3)=(-2.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))+(u(i1,i2+2,
     & i3)-u(i1,i2-2,i3)) )*h22(1)*h12(1)
      uxxy22r(i1,i2,i3,kd)=( uxx22r(i1,i2+1,i3)-uxx22r(i1,i2-1,i3))/(
     & 2.*dx(1))
      uxyy22r(i1,i2,i3,kd)=( uyy22r(i1+1,i2,i3)-uyy22r(i1-1,i2,i3))/(
     & 2.*dx(0))
      uxxxx22r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1+1,i2,i3)+u(i1-1,i2,
     & i3))+(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )/(dx(0)**4)
      uyyyy22r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1,i2+1,i3)+u(i1,i2-1,
     & i3))+(u(i1,i2+2,i3)+u(i1,i2-2,i3)) )/(dx(1)**4)
      uxxyy22r(i1,i2,i3)=( 4.*u(i1,i2,i3)     -2.*(u(i1+1,i2,i3)+u(i1-
     & 1,i2,i3)+u(i1,i2+1,i3)+u(i1,i2-1,i3))   +   (u(i1+1,i2+1,i3)+u(
     & i1-1,i2+1,i3)+u(i1+1,i2-1,i3)+u(i1-1,i2-1,i3)) )/(dx(0)**2*dx(
     & 1)**2)
      ! 2D laplacian squared = u.xxxx + 2 u.xxyy + u.yyyy
      uLapSq22r(i1,i2,i3)= ( 6.*u(i1,i2,i3)   - 4.*(u(i1+1,i2,i3)+u(i1-
     & 1,i2,i3))    +(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )/(dx(0)**4) +( 6.*
     & u(i1,i2,i3)    -4.*(u(i1,i2+1,i3)+u(i1,i2-1,i3))    +(u(i1,i2+
     & 2,i3)+u(i1,i2-2,i3)) )/(dx(1)**4)  +( 8.*u(i1,i2,i3)     -4.*(
     & u(i1+1,i2,i3)+u(i1-1,i2,i3)+u(i1,i2+1,i3)+u(i1,i2-1,i3))   +2.*
     & (u(i1+1,i2+1,i3)+u(i1-1,i2+1,i3)+u(i1+1,i2-1,i3)+u(i1-1,i2-1,
     & i3)) )/(dx(0)**2*dx(1)**2)
      uxxx23r(i1,i2,i3)=(-2.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))+(u(i1+2,i2,
     & i3)-u(i1-2,i2,i3)) )*h22(0)*h12(0)
      uyyy23r(i1,i2,i3)=(-2.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))+(u(i1,i2+2,
     & i3)-u(i1,i2-2,i3)) )*h22(1)*h12(1)
      uzzz23r(i1,i2,i3)=(-2.*(u(i1,i2,i3+1)-u(i1,i2,i3-1))+(u(i1,i2,i3+
     & 2)-u(i1,i2,i3-2)) )*h22(1)*h12(2)
      uxxy23r(i1,i2,i3)=( uxx22r(i1,i2+1,i3)-uxx22r(i1,i2-1,i3))/(2.*
     & dx(1))
      uxyy23r(i1,i2,i3)=( uyy22r(i1+1,i2,i3)-uyy22r(i1-1,i2,i3))/(2.*
     & dx(0))
      uxxz23r(i1,i2,i3)=( uxx22r(i1,i2,i3+1)-uxx22r(i1,i2,i3-1))/(2.*
     & dx(2))
      uyyz23r(i1,i2,i3)=( uyy22r(i1,i2,i3+1)-uyy22r(i1,i2,i3-1))/(2.*
     & dx(2))
      uxzz23r(i1,i2,i3)=( uzz22r(i1+1,i2,i3)-uzz22r(i1-1,i2,i3))/(2.*
     & dx(0))
      uyzz23r(i1,i2,i3)=( uzz22r(i1,i2+1,i3)-uzz22r(i1,i2-1,i3))/(2.*
     & dx(1))
      uxxxx23r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1+1,i2,i3)+u(i1-1,i2,
     & i3))+(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )/(dx(0)**4)
      uyyyy23r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1,i2+1,i3)+u(i1,i2-1,
     & i3))+(u(i1,i2+2,i3)+u(i1,i2-2,i3)) )/(dx(1)**4)
      uzzzz23r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1,i2,i3+1)+u(i1,i2,i3-
     & 1))+(u(i1,i2,i3+2)+u(i1,i2,i3-2)) )/(dx(2)**4)
      uxxyy23r(i1,i2,i3)=( 4.*u(i1,i2,i3)     -2.*(u(i1+1,i2,i3)+u(i1-
     & 1,i2,i3)+u(i1,i2+1,i3)+u(i1,i2-1,i3))   +   (u(i1+1,i2+1,i3)+u(
     & i1-1,i2+1,i3)+u(i1+1,i2-1,i3)+u(i1-1,i2-1,i3)) )/(dx(0)**2*dx(
     & 1)**2)
      uxxzz23r(i1,i2,i3)=( 4.*u(i1,i2,i3)     -2.*(u(i1+1,i2,i3)+u(i1-
     & 1,i2,i3)+u(i1,i2,i3+1)+u(i1,i2,i3-1))   +   (u(i1+1,i2,i3+1)+u(
     & i1-1,i2,i3+1)+u(i1+1,i2,i3-1)+u(i1-1,i2,i3-1)) )/(dx(0)**2*dx(
     & 2)**2)
      uyyzz23r(i1,i2,i3)=( 4.*u(i1,i2,i3)     -2.*(u(i1,i2+1,i3)  +u(
     & i1,i2-1,i3)+  u(i1,i2  ,i3+1)+u(i1,i2  ,i3-1))   +   (u(i1,i2+
     & 1,i3+1)+u(i1,i2-1,i3+1)+u(i1,i2+1,i3-1)+u(i1,i2-1,i3-1)) )/(dx(
     & 1)**2*dx(2)**2)
      d14(kd) = 1./(12.*dr(kd))
      d24(kd) = 1./(12.*dr(kd)**2)
      ur4(i1,i2,i3)=(8.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))-(u(i1+2,i2,i3)-u(
     & i1-2,i2,i3)))*d14(0)
      us4(i1,i2,i3)=(8.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))-(u(i1,i2+2,i3)-u(
     & i1,i2-2,i3)))*d14(1)
      ut4(i1,i2,i3)=(8.*(u(i1,i2,i3+1)-u(i1,i2,i3-1))-(u(i1,i2,i3+2)-u(
     & i1,i2,i3-2)))*d14(2)
      urr4(i1,i2,i3)=(-30.*u(i1,i2,i3)+16.*(u(i1+1,i2,i3)+u(i1-1,i2,i3)
     & )-(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )*d24(0)
      uss4(i1,i2,i3)=(-30.*u(i1,i2,i3)+16.*(u(i1,i2+1,i3)+u(i1,i2-1,i3)
     & )-(u(i1,i2+2,i3)+u(i1,i2-2,i3)) )*d24(1)
      utt4(i1,i2,i3)=(-30.*u(i1,i2,i3)+16.*(u(i1,i2,i3+1)+u(i1,i2,i3-1)
     & )-(u(i1,i2,i3+2)+u(i1,i2,i3-2)) )*d24(2)
      urs4(i1,i2,i3)=(8.*(ur4(i1,i2+1,i3)-ur4(i1,i2-1,i3))-(ur4(i1,i2+
     & 2,i3)-ur4(i1,i2-2,i3)))*d14(1)
      urt4(i1,i2,i3)=(8.*(ur4(i1,i2,i3+1)-ur4(i1,i2,i3-1))-(ur4(i1,i2,
     & i3+2)-ur4(i1,i2,i3-2)))*d14(2)
      ust4(i1,i2,i3)=(8.*(us4(i1,i2,i3+1)-us4(i1,i2,i3-1))-(us4(i1,i2,
     & i3+2)-us4(i1,i2,i3-2)))*d14(2)
      rxr4(i1,i2,i3)=(8.*(rx(i1+1,i2,i3)-rx(i1-1,i2,i3))-(rx(i1+2,i2,
     & i3)-rx(i1-2,i2,i3)))*d14(0)
      rxs4(i1,i2,i3)=(8.*(rx(i1,i2+1,i3)-rx(i1,i2-1,i3))-(rx(i1,i2+2,
     & i3)-rx(i1,i2-2,i3)))*d14(1)
      rxt4(i1,i2,i3)=(8.*(rx(i1,i2,i3+1)-rx(i1,i2,i3-1))-(rx(i1,i2,i3+
     & 2)-rx(i1,i2,i3-2)))*d14(2)
      ryr4(i1,i2,i3)=(8.*(ry(i1+1,i2,i3)-ry(i1-1,i2,i3))-(ry(i1+2,i2,
     & i3)-ry(i1-2,i2,i3)))*d14(0)
      rys4(i1,i2,i3)=(8.*(ry(i1,i2+1,i3)-ry(i1,i2-1,i3))-(ry(i1,i2+2,
     & i3)-ry(i1,i2-2,i3)))*d14(1)
      ryt4(i1,i2,i3)=(8.*(ry(i1,i2,i3+1)-ry(i1,i2,i3-1))-(ry(i1,i2,i3+
     & 2)-ry(i1,i2,i3-2)))*d14(2)
      rzr4(i1,i2,i3)=(8.*(rz(i1+1,i2,i3)-rz(i1-1,i2,i3))-(rz(i1+2,i2,
     & i3)-rz(i1-2,i2,i3)))*d14(0)
      rzs4(i1,i2,i3)=(8.*(rz(i1,i2+1,i3)-rz(i1,i2-1,i3))-(rz(i1,i2+2,
     & i3)-rz(i1,i2-2,i3)))*d14(1)
      rzt4(i1,i2,i3)=(8.*(rz(i1,i2,i3+1)-rz(i1,i2,i3-1))-(rz(i1,i2,i3+
     & 2)-rz(i1,i2,i3-2)))*d14(2)
      sxr4(i1,i2,i3)=(8.*(sx(i1+1,i2,i3)-sx(i1-1,i2,i3))-(sx(i1+2,i2,
     & i3)-sx(i1-2,i2,i3)))*d14(0)
      sxs4(i1,i2,i3)=(8.*(sx(i1,i2+1,i3)-sx(i1,i2-1,i3))-(sx(i1,i2+2,
     & i3)-sx(i1,i2-2,i3)))*d14(1)
      sxt4(i1,i2,i3)=(8.*(sx(i1,i2,i3+1)-sx(i1,i2,i3-1))-(sx(i1,i2,i3+
     & 2)-sx(i1,i2,i3-2)))*d14(2)
      syr4(i1,i2,i3)=(8.*(sy(i1+1,i2,i3)-sy(i1-1,i2,i3))-(sy(i1+2,i2,
     & i3)-sy(i1-2,i2,i3)))*d14(0)
      sys4(i1,i2,i3)=(8.*(sy(i1,i2+1,i3)-sy(i1,i2-1,i3))-(sy(i1,i2+2,
     & i3)-sy(i1,i2-2,i3)))*d14(1)
      syt4(i1,i2,i3)=(8.*(sy(i1,i2,i3+1)-sy(i1,i2,i3-1))-(sy(i1,i2,i3+
     & 2)-sy(i1,i2,i3-2)))*d14(2)
      szr4(i1,i2,i3)=(8.*(sz(i1+1,i2,i3)-sz(i1-1,i2,i3))-(sz(i1+2,i2,
     & i3)-sz(i1-2,i2,i3)))*d14(0)
      szs4(i1,i2,i3)=(8.*(sz(i1,i2+1,i3)-sz(i1,i2-1,i3))-(sz(i1,i2+2,
     & i3)-sz(i1,i2-2,i3)))*d14(1)
      szt4(i1,i2,i3)=(8.*(sz(i1,i2,i3+1)-sz(i1,i2,i3-1))-(sz(i1,i2,i3+
     & 2)-sz(i1,i2,i3-2)))*d14(2)
      txr4(i1,i2,i3)=(8.*(tx(i1+1,i2,i3)-tx(i1-1,i2,i3))-(tx(i1+2,i2,
     & i3)-tx(i1-2,i2,i3)))*d14(0)
      txs4(i1,i2,i3)=(8.*(tx(i1,i2+1,i3)-tx(i1,i2-1,i3))-(tx(i1,i2+2,
     & i3)-tx(i1,i2-2,i3)))*d14(1)
      txt4(i1,i2,i3)=(8.*(tx(i1,i2,i3+1)-tx(i1,i2,i3-1))-(tx(i1,i2,i3+
     & 2)-tx(i1,i2,i3-2)))*d14(2)
      tyr4(i1,i2,i3)=(8.*(ty(i1+1,i2,i3)-ty(i1-1,i2,i3))-(ty(i1+2,i2,
     & i3)-ty(i1-2,i2,i3)))*d14(0)
      tys4(i1,i2,i3)=(8.*(ty(i1,i2+1,i3)-ty(i1,i2-1,i3))-(ty(i1,i2+2,
     & i3)-ty(i1,i2-2,i3)))*d14(1)
      tyt4(i1,i2,i3)=(8.*(ty(i1,i2,i3+1)-ty(i1,i2,i3-1))-(ty(i1,i2,i3+
     & 2)-ty(i1,i2,i3-2)))*d14(2)
      tzr4(i1,i2,i3)=(8.*(tz(i1+1,i2,i3)-tz(i1-1,i2,i3))-(tz(i1+2,i2,
     & i3)-tz(i1-2,i2,i3)))*d14(0)
      tzs4(i1,i2,i3)=(8.*(tz(i1,i2+1,i3)-tz(i1,i2-1,i3))-(tz(i1,i2+2,
     & i3)-tz(i1,i2-2,i3)))*d14(1)
      tzt4(i1,i2,i3)=(8.*(tz(i1,i2,i3+1)-tz(i1,i2,i3-1))-(tz(i1,i2,i3+
     & 2)-tz(i1,i2,i3-2)))*d14(2)
      ux41(i1,i2,i3)= rx(i1,i2,i3)*ur4(i1,i2,i3)
      uy41(i1,i2,i3)=0
      uz41(i1,i2,i3)=0
      ux42(i1,i2,i3)= rx(i1,i2,i3)*ur4(i1,i2,i3)+sx(i1,i2,i3)*us4(i1,
     & i2,i3)
      uy42(i1,i2,i3)= ry(i1,i2,i3)*ur4(i1,i2,i3)+sy(i1,i2,i3)*us4(i1,
     & i2,i3)
      uz42(i1,i2,i3)=0
      ux43(i1,i2,i3)=rx(i1,i2,i3)*ur4(i1,i2,i3)+sx(i1,i2,i3)*us4(i1,i2,
     & i3)+tx(i1,i2,i3)*ut4(i1,i2,i3)
      uy43(i1,i2,i3)=ry(i1,i2,i3)*ur4(i1,i2,i3)+sy(i1,i2,i3)*us4(i1,i2,
     & i3)+ty(i1,i2,i3)*ut4(i1,i2,i3)
      uz43(i1,i2,i3)=rz(i1,i2,i3)*ur4(i1,i2,i3)+sz(i1,i2,i3)*us4(i1,i2,
     & i3)+tz(i1,i2,i3)*ut4(i1,i2,i3)
      rxx41(i1,i2,i3)= rx(i1,i2,i3)*rxr4(i1,i2,i3)
      rxx42(i1,i2,i3)= rx(i1,i2,i3)*rxr4(i1,i2,i3)+sx(i1,i2,i3)*rxs4(
     & i1,i2,i3)
      rxy42(i1,i2,i3)= ry(i1,i2,i3)*rxr4(i1,i2,i3)+sy(i1,i2,i3)*rxs4(
     & i1,i2,i3)
      rxx43(i1,i2,i3)=rx(i1,i2,i3)*rxr4(i1,i2,i3)+sx(i1,i2,i3)*rxs4(i1,
     & i2,i3)+tx(i1,i2,i3)*rxt4(i1,i2,i3)
      rxy43(i1,i2,i3)=ry(i1,i2,i3)*rxr4(i1,i2,i3)+sy(i1,i2,i3)*rxs4(i1,
     & i2,i3)+ty(i1,i2,i3)*rxt4(i1,i2,i3)
      rxz43(i1,i2,i3)=rz(i1,i2,i3)*rxr4(i1,i2,i3)+sz(i1,i2,i3)*rxs4(i1,
     & i2,i3)+tz(i1,i2,i3)*rxt4(i1,i2,i3)
      ryx42(i1,i2,i3)= rx(i1,i2,i3)*ryr4(i1,i2,i3)+sx(i1,i2,i3)*rys4(
     & i1,i2,i3)
      ryy42(i1,i2,i3)= ry(i1,i2,i3)*ryr4(i1,i2,i3)+sy(i1,i2,i3)*rys4(
     & i1,i2,i3)
      ryx43(i1,i2,i3)=rx(i1,i2,i3)*ryr4(i1,i2,i3)+sx(i1,i2,i3)*rys4(i1,
     & i2,i3)+tx(i1,i2,i3)*ryt4(i1,i2,i3)
      ryy43(i1,i2,i3)=ry(i1,i2,i3)*ryr4(i1,i2,i3)+sy(i1,i2,i3)*rys4(i1,
     & i2,i3)+ty(i1,i2,i3)*ryt4(i1,i2,i3)
      ryz43(i1,i2,i3)=rz(i1,i2,i3)*ryr4(i1,i2,i3)+sz(i1,i2,i3)*rys4(i1,
     & i2,i3)+tz(i1,i2,i3)*ryt4(i1,i2,i3)
      rzx42(i1,i2,i3)= rx(i1,i2,i3)*rzr4(i1,i2,i3)+sx(i1,i2,i3)*rzs4(
     & i1,i2,i3)
      rzy42(i1,i2,i3)= ry(i1,i2,i3)*rzr4(i1,i2,i3)+sy(i1,i2,i3)*rzs4(
     & i1,i2,i3)
      rzx43(i1,i2,i3)=rx(i1,i2,i3)*rzr4(i1,i2,i3)+sx(i1,i2,i3)*rzs4(i1,
     & i2,i3)+tx(i1,i2,i3)*rzt4(i1,i2,i3)
      rzy43(i1,i2,i3)=ry(i1,i2,i3)*rzr4(i1,i2,i3)+sy(i1,i2,i3)*rzs4(i1,
     & i2,i3)+ty(i1,i2,i3)*rzt4(i1,i2,i3)
      rzz43(i1,i2,i3)=rz(i1,i2,i3)*rzr4(i1,i2,i3)+sz(i1,i2,i3)*rzs4(i1,
     & i2,i3)+tz(i1,i2,i3)*rzt4(i1,i2,i3)
      sxx42(i1,i2,i3)= rx(i1,i2,i3)*sxr4(i1,i2,i3)+sx(i1,i2,i3)*sxs4(
     & i1,i2,i3)
      sxy42(i1,i2,i3)= ry(i1,i2,i3)*sxr4(i1,i2,i3)+sy(i1,i2,i3)*sxs4(
     & i1,i2,i3)
      sxx43(i1,i2,i3)=rx(i1,i2,i3)*sxr4(i1,i2,i3)+sx(i1,i2,i3)*sxs4(i1,
     & i2,i3)+tx(i1,i2,i3)*sxt4(i1,i2,i3)
      sxy43(i1,i2,i3)=ry(i1,i2,i3)*sxr4(i1,i2,i3)+sy(i1,i2,i3)*sxs4(i1,
     & i2,i3)+ty(i1,i2,i3)*sxt4(i1,i2,i3)
      sxz43(i1,i2,i3)=rz(i1,i2,i3)*sxr4(i1,i2,i3)+sz(i1,i2,i3)*sxs4(i1,
     & i2,i3)+tz(i1,i2,i3)*sxt4(i1,i2,i3)
      syx42(i1,i2,i3)= rx(i1,i2,i3)*syr4(i1,i2,i3)+sx(i1,i2,i3)*sys4(
     & i1,i2,i3)
      syy42(i1,i2,i3)= ry(i1,i2,i3)*syr4(i1,i2,i3)+sy(i1,i2,i3)*sys4(
     & i1,i2,i3)
      syx43(i1,i2,i3)=rx(i1,i2,i3)*syr4(i1,i2,i3)+sx(i1,i2,i3)*sys4(i1,
     & i2,i3)+tx(i1,i2,i3)*syt4(i1,i2,i3)
      syy43(i1,i2,i3)=ry(i1,i2,i3)*syr4(i1,i2,i3)+sy(i1,i2,i3)*sys4(i1,
     & i2,i3)+ty(i1,i2,i3)*syt4(i1,i2,i3)
      syz43(i1,i2,i3)=rz(i1,i2,i3)*syr4(i1,i2,i3)+sz(i1,i2,i3)*sys4(i1,
     & i2,i3)+tz(i1,i2,i3)*syt4(i1,i2,i3)
      szx42(i1,i2,i3)= rx(i1,i2,i3)*szr4(i1,i2,i3)+sx(i1,i2,i3)*szs4(
     & i1,i2,i3)
      szy42(i1,i2,i3)= ry(i1,i2,i3)*szr4(i1,i2,i3)+sy(i1,i2,i3)*szs4(
     & i1,i2,i3)
      szx43(i1,i2,i3)=rx(i1,i2,i3)*szr4(i1,i2,i3)+sx(i1,i2,i3)*szs4(i1,
     & i2,i3)+tx(i1,i2,i3)*szt4(i1,i2,i3)
      szy43(i1,i2,i3)=ry(i1,i2,i3)*szr4(i1,i2,i3)+sy(i1,i2,i3)*szs4(i1,
     & i2,i3)+ty(i1,i2,i3)*szt4(i1,i2,i3)
      szz43(i1,i2,i3)=rz(i1,i2,i3)*szr4(i1,i2,i3)+sz(i1,i2,i3)*szs4(i1,
     & i2,i3)+tz(i1,i2,i3)*szt4(i1,i2,i3)
      txx42(i1,i2,i3)= rx(i1,i2,i3)*txr4(i1,i2,i3)+sx(i1,i2,i3)*txs4(
     & i1,i2,i3)
      txy42(i1,i2,i3)= ry(i1,i2,i3)*txr4(i1,i2,i3)+sy(i1,i2,i3)*txs4(
     & i1,i2,i3)
      txx43(i1,i2,i3)=rx(i1,i2,i3)*txr4(i1,i2,i3)+sx(i1,i2,i3)*txs4(i1,
     & i2,i3)+tx(i1,i2,i3)*txt4(i1,i2,i3)
      txy43(i1,i2,i3)=ry(i1,i2,i3)*txr4(i1,i2,i3)+sy(i1,i2,i3)*txs4(i1,
     & i2,i3)+ty(i1,i2,i3)*txt4(i1,i2,i3)
      txz43(i1,i2,i3)=rz(i1,i2,i3)*txr4(i1,i2,i3)+sz(i1,i2,i3)*txs4(i1,
     & i2,i3)+tz(i1,i2,i3)*txt4(i1,i2,i3)
      tyx42(i1,i2,i3)= rx(i1,i2,i3)*tyr4(i1,i2,i3)+sx(i1,i2,i3)*tys4(
     & i1,i2,i3)
      tyy42(i1,i2,i3)= ry(i1,i2,i3)*tyr4(i1,i2,i3)+sy(i1,i2,i3)*tys4(
     & i1,i2,i3)
      tyx43(i1,i2,i3)=rx(i1,i2,i3)*tyr4(i1,i2,i3)+sx(i1,i2,i3)*tys4(i1,
     & i2,i3)+tx(i1,i2,i3)*tyt4(i1,i2,i3)
      tyy43(i1,i2,i3)=ry(i1,i2,i3)*tyr4(i1,i2,i3)+sy(i1,i2,i3)*tys4(i1,
     & i2,i3)+ty(i1,i2,i3)*tyt4(i1,i2,i3)
      tyz43(i1,i2,i3)=rz(i1,i2,i3)*tyr4(i1,i2,i3)+sz(i1,i2,i3)*tys4(i1,
     & i2,i3)+tz(i1,i2,i3)*tyt4(i1,i2,i3)
      tzx42(i1,i2,i3)= rx(i1,i2,i3)*tzr4(i1,i2,i3)+sx(i1,i2,i3)*tzs4(
     & i1,i2,i3)
      tzy42(i1,i2,i3)= ry(i1,i2,i3)*tzr4(i1,i2,i3)+sy(i1,i2,i3)*tzs4(
     & i1,i2,i3)
      tzx43(i1,i2,i3)=rx(i1,i2,i3)*tzr4(i1,i2,i3)+sx(i1,i2,i3)*tzs4(i1,
     & i2,i3)+tx(i1,i2,i3)*tzt4(i1,i2,i3)
      tzy43(i1,i2,i3)=ry(i1,i2,i3)*tzr4(i1,i2,i3)+sy(i1,i2,i3)*tzs4(i1,
     & i2,i3)+ty(i1,i2,i3)*tzt4(i1,i2,i3)
      tzz43(i1,i2,i3)=rz(i1,i2,i3)*tzr4(i1,i2,i3)+sz(i1,i2,i3)*tzs4(i1,
     & i2,i3)+tz(i1,i2,i3)*tzt4(i1,i2,i3)
      uxx41(i1,i2,i3)=(rx(i1,i2,i3)**2)*urr4(i1,i2,i3)+(rxx42(i1,i2,i3)
     & )*ur4(i1,i2,i3)
      uyy41(i1,i2,i3)=0
      uxy41(i1,i2,i3)=0
      uxz41(i1,i2,i3)=0
      uyz41(i1,i2,i3)=0
      uzz41(i1,i2,i3)=0
      ulaplacian41(i1,i2,i3)=uxx41(i1,i2,i3)
      uxx42(i1,i2,i3)=(rx(i1,i2,i3)**2)*urr4(i1,i2,i3)+2.*(rx(i1,i2,i3)
     & *sx(i1,i2,i3))*urs4(i1,i2,i3)+(sx(i1,i2,i3)**2)*uss4(i1,i2,i3)+
     & (rxx42(i1,i2,i3))*ur4(i1,i2,i3)+(sxx42(i1,i2,i3))*us4(i1,i2,i3)
      uyy42(i1,i2,i3)=(ry(i1,i2,i3)**2)*urr4(i1,i2,i3)+2.*(ry(i1,i2,i3)
     & *sy(i1,i2,i3))*urs4(i1,i2,i3)+(sy(i1,i2,i3)**2)*uss4(i1,i2,i3)+
     & (ryy42(i1,i2,i3))*ur4(i1,i2,i3)+(syy42(i1,i2,i3))*us4(i1,i2,i3)
      uxy42(i1,i2,i3)=rx(i1,i2,i3)*ry(i1,i2,i3)*urr4(i1,i2,i3)+(rx(i1,
     & i2,i3)*sy(i1,i2,i3)+ry(i1,i2,i3)*sx(i1,i2,i3))*urs4(i1,i2,i3)+
     & sx(i1,i2,i3)*sy(i1,i2,i3)*uss4(i1,i2,i3)+rxy42(i1,i2,i3)*ur4(
     & i1,i2,i3)+sxy42(i1,i2,i3)*us4(i1,i2,i3)
      uxz42(i1,i2,i3)=0
      uyz42(i1,i2,i3)=0
      uzz42(i1,i2,i3)=0
      ulaplacian42(i1,i2,i3)=(rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)*urr4(i1,
     & i2,i3)+2.*(rx(i1,i2,i3)*sx(i1,i2,i3)+ ry(i1,i2,i3)*sy(i1,i2,i3)
     & )*urs4(i1,i2,i3)+(sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)*uss4(i1,i2,
     & i3)+(rxx42(i1,i2,i3)+ryy42(i1,i2,i3))*ur4(i1,i2,i3)+(sxx42(i1,
     & i2,i3)+syy42(i1,i2,i3))*us4(i1,i2,i3)
      uxx43(i1,i2,i3)=rx(i1,i2,i3)**2*urr4(i1,i2,i3)+sx(i1,i2,i3)**2*
     & uss4(i1,i2,i3)+tx(i1,i2,i3)**2*utt4(i1,i2,i3)+2.*rx(i1,i2,i3)*
     & sx(i1,i2,i3)*urs4(i1,i2,i3)+2.*rx(i1,i2,i3)*tx(i1,i2,i3)*urt4(
     & i1,i2,i3)+2.*sx(i1,i2,i3)*tx(i1,i2,i3)*ust4(i1,i2,i3)+rxx43(i1,
     & i2,i3)*ur4(i1,i2,i3)+sxx43(i1,i2,i3)*us4(i1,i2,i3)+txx43(i1,i2,
     & i3)*ut4(i1,i2,i3)
      uyy43(i1,i2,i3)=ry(i1,i2,i3)**2*urr4(i1,i2,i3)+sy(i1,i2,i3)**2*
     & uss4(i1,i2,i3)+ty(i1,i2,i3)**2*utt4(i1,i2,i3)+2.*ry(i1,i2,i3)*
     & sy(i1,i2,i3)*urs4(i1,i2,i3)+2.*ry(i1,i2,i3)*ty(i1,i2,i3)*urt4(
     & i1,i2,i3)+2.*sy(i1,i2,i3)*ty(i1,i2,i3)*ust4(i1,i2,i3)+ryy43(i1,
     & i2,i3)*ur4(i1,i2,i3)+syy43(i1,i2,i3)*us4(i1,i2,i3)+tyy43(i1,i2,
     & i3)*ut4(i1,i2,i3)
      uzz43(i1,i2,i3)=rz(i1,i2,i3)**2*urr4(i1,i2,i3)+sz(i1,i2,i3)**2*
     & uss4(i1,i2,i3)+tz(i1,i2,i3)**2*utt4(i1,i2,i3)+2.*rz(i1,i2,i3)*
     & sz(i1,i2,i3)*urs4(i1,i2,i3)+2.*rz(i1,i2,i3)*tz(i1,i2,i3)*urt4(
     & i1,i2,i3)+2.*sz(i1,i2,i3)*tz(i1,i2,i3)*ust4(i1,i2,i3)+rzz43(i1,
     & i2,i3)*ur4(i1,i2,i3)+szz43(i1,i2,i3)*us4(i1,i2,i3)+tzz43(i1,i2,
     & i3)*ut4(i1,i2,i3)
      uxy43(i1,i2,i3)=rx(i1,i2,i3)*ry(i1,i2,i3)*urr4(i1,i2,i3)+sx(i1,
     & i2,i3)*sy(i1,i2,i3)*uss4(i1,i2,i3)+tx(i1,i2,i3)*ty(i1,i2,i3)*
     & utt4(i1,i2,i3)+(rx(i1,i2,i3)*sy(i1,i2,i3)+ry(i1,i2,i3)*sx(i1,
     & i2,i3))*urs4(i1,i2,i3)+(rx(i1,i2,i3)*ty(i1,i2,i3)+ry(i1,i2,i3)*
     & tx(i1,i2,i3))*urt4(i1,i2,i3)+(sx(i1,i2,i3)*ty(i1,i2,i3)+sy(i1,
     & i2,i3)*tx(i1,i2,i3))*ust4(i1,i2,i3)+rxy43(i1,i2,i3)*ur4(i1,i2,
     & i3)+sxy43(i1,i2,i3)*us4(i1,i2,i3)+txy43(i1,i2,i3)*ut4(i1,i2,i3)
      uxz43(i1,i2,i3)=rx(i1,i2,i3)*rz(i1,i2,i3)*urr4(i1,i2,i3)+sx(i1,
     & i2,i3)*sz(i1,i2,i3)*uss4(i1,i2,i3)+tx(i1,i2,i3)*tz(i1,i2,i3)*
     & utt4(i1,i2,i3)+(rx(i1,i2,i3)*sz(i1,i2,i3)+rz(i1,i2,i3)*sx(i1,
     & i2,i3))*urs4(i1,i2,i3)+(rx(i1,i2,i3)*tz(i1,i2,i3)+rz(i1,i2,i3)*
     & tx(i1,i2,i3))*urt4(i1,i2,i3)+(sx(i1,i2,i3)*tz(i1,i2,i3)+sz(i1,
     & i2,i3)*tx(i1,i2,i3))*ust4(i1,i2,i3)+rxz43(i1,i2,i3)*ur4(i1,i2,
     & i3)+sxz43(i1,i2,i3)*us4(i1,i2,i3)+txz43(i1,i2,i3)*ut4(i1,i2,i3)
      uyz43(i1,i2,i3)=ry(i1,i2,i3)*rz(i1,i2,i3)*urr4(i1,i2,i3)+sy(i1,
     & i2,i3)*sz(i1,i2,i3)*uss4(i1,i2,i3)+ty(i1,i2,i3)*tz(i1,i2,i3)*
     & utt4(i1,i2,i3)+(ry(i1,i2,i3)*sz(i1,i2,i3)+rz(i1,i2,i3)*sy(i1,
     & i2,i3))*urs4(i1,i2,i3)+(ry(i1,i2,i3)*tz(i1,i2,i3)+rz(i1,i2,i3)*
     & ty(i1,i2,i3))*urt4(i1,i2,i3)+(sy(i1,i2,i3)*tz(i1,i2,i3)+sz(i1,
     & i2,i3)*ty(i1,i2,i3))*ust4(i1,i2,i3)+ryz43(i1,i2,i3)*ur4(i1,i2,
     & i3)+syz43(i1,i2,i3)*us4(i1,i2,i3)+tyz43(i1,i2,i3)*ut4(i1,i2,i3)
      ulaplacian43(i1,i2,i3)=(rx(i1,i2,i3)**2+ry(i1,i2,i3)**2+rz(i1,i2,
     & i3)**2)*urr4(i1,i2,i3)+(sx(i1,i2,i3)**2+sy(i1,i2,i3)**2+sz(i1,
     & i2,i3)**2)*uss4(i1,i2,i3)+(tx(i1,i2,i3)**2+ty(i1,i2,i3)**2+tz(
     & i1,i2,i3)**2)*utt4(i1,i2,i3)+2.*(rx(i1,i2,i3)*sx(i1,i2,i3)+ ry(
     & i1,i2,i3)*sy(i1,i2,i3)+rz(i1,i2,i3)*sz(i1,i2,i3))*urs4(i1,i2,
     & i3)+2.*(rx(i1,i2,i3)*tx(i1,i2,i3)+ ry(i1,i2,i3)*ty(i1,i2,i3)+
     & rz(i1,i2,i3)*tz(i1,i2,i3))*urt4(i1,i2,i3)+2.*(sx(i1,i2,i3)*tx(
     & i1,i2,i3)+ sy(i1,i2,i3)*ty(i1,i2,i3)+sz(i1,i2,i3)*tz(i1,i2,i3))
     & *ust4(i1,i2,i3)+(rxx43(i1,i2,i3)+ryy43(i1,i2,i3)+rzz43(i1,i2,
     & i3))*ur4(i1,i2,i3)+(sxx43(i1,i2,i3)+syy43(i1,i2,i3)+szz43(i1,
     & i2,i3))*us4(i1,i2,i3)+(txx43(i1,i2,i3)+tyy43(i1,i2,i3)+tzz43(
     & i1,i2,i3))*ut4(i1,i2,i3)
      !============================================================================================
      ! Define derivatives for a rectangular grid
      !
      !============================================================================================
      h41(kd) = 1./(12.*dx(kd))
      h42(kd) = 1./(12.*dx(kd)**2)
      ux43r(i1,i2,i3)=(8.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))-(u(i1+2,i2,i3)-
     & u(i1-2,i2,i3)))*h41(0)
      uy43r(i1,i2,i3)=(8.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))-(u(i1,i2+2,i3)-
     & u(i1,i2-2,i3)))*h41(1)
      uz43r(i1,i2,i3)=(8.*(u(i1,i2,i3+1)-u(i1,i2,i3-1))-(u(i1,i2,i3+2)-
     & u(i1,i2,i3-2)))*h41(2)
      uxx43r(i1,i2,i3)=( -30.*u(i1,i2,i3)+16.*(u(i1+1,i2,i3)+u(i1-1,i2,
     & i3))-(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )*h42(0)
      uyy43r(i1,i2,i3)=( -30.*u(i1,i2,i3)+16.*(u(i1,i2+1,i3)+u(i1,i2-1,
     & i3))-(u(i1,i2+2,i3)+u(i1,i2-2,i3)) )*h42(1)
      uzz43r(i1,i2,i3)=( -30.*u(i1,i2,i3)+16.*(u(i1,i2,i3+1)+u(i1,i2,
     & i3-1))-(u(i1,i2,i3+2)+u(i1,i2,i3-2)) )*h42(2)
      uxy43r(i1,i2,i3)=( (u(i1+2,i2+2,i3)-u(i1-2,i2+2,i3)- u(i1+2,i2-2,
     & i3)+u(i1-2,i2-2,i3)) +8.*(u(i1-1,i2+2,i3)-u(i1-1,i2-2,i3)-u(i1+
     & 1,i2+2,i3)+u(i1+1,i2-2,i3) +u(i1+2,i2-1,i3)-u(i1-2,i2-1,i3)-u(
     & i1+2,i2+1,i3)+u(i1-2,i2+1,i3))+64.*(u(i1+1,i2+1,i3)-u(i1-1,i2+
     & 1,i3)- u(i1+1,i2-1,i3)+u(i1-1,i2-1,i3)))*(h41(0)*h41(1))
      uxz43r(i1,i2,i3)=( (u(i1+2,i2,i3+2)-u(i1-2,i2,i3+2)-u(i1+2,i2,i3-
     & 2)+u(i1-2,i2,i3-2)) +8.*(u(i1-1,i2,i3+2)-u(i1-1,i2,i3-2)-u(i1+
     & 1,i2,i3+2)+u(i1+1,i2,i3-2) +u(i1+2,i2,i3-1)-u(i1-2,i2,i3-1)- u(
     & i1+2,i2,i3+1)+u(i1-2,i2,i3+1)) +64.*(u(i1+1,i2,i3+1)-u(i1-1,i2,
     & i3+1)-u(i1+1,i2,i3-1)+u(i1-1,i2,i3-1)) )*(h41(0)*h41(2))
      uyz43r(i1,i2,i3)=( (u(i1,i2+2,i3+2)-u(i1,i2-2,i3+2)-u(i1,i2+2,i3-
     & 2)+u(i1,i2-2,i3-2)) +8.*(u(i1,i2-1,i3+2)-u(i1,i2-1,i3-2)-u(i1,
     & i2+1,i3+2)+u(i1,i2+1,i3-2) +u(i1,i2+2,i3-1)-u(i1,i2-2,i3-1)-u(
     & i1,i2+2,i3+1)+u(i1,i2-2,i3+1)) +64.*(u(i1,i2+1,i3+1)-u(i1,i2-1,
     & i3+1)-u(i1,i2+1,i3-1)+u(i1,i2-1,i3-1)) )*(h41(1)*h41(2))
      ux41r(i1,i2,i3)= ux43r(i1,i2,i3)
      uy41r(i1,i2,i3)= uy43r(i1,i2,i3)
      uz41r(i1,i2,i3)= uz43r(i1,i2,i3)
      uxx41r(i1,i2,i3)= uxx43r(i1,i2,i3)
      uyy41r(i1,i2,i3)= uyy43r(i1,i2,i3)
      uzz41r(i1,i2,i3)= uzz43r(i1,i2,i3)
      uxy41r(i1,i2,i3)= uxy43r(i1,i2,i3)
      uxz41r(i1,i2,i3)= uxz43r(i1,i2,i3)
      uyz41r(i1,i2,i3)= uyz43r(i1,i2,i3)
      ulaplacian41r(i1,i2,i3)=uxx43r(i1,i2,i3)
      ux42r(i1,i2,i3)= ux43r(i1,i2,i3)
      uy42r(i1,i2,i3)= uy43r(i1,i2,i3)
      uz42r(i1,i2,i3)= uz43r(i1,i2,i3)
      uxx42r(i1,i2,i3)= uxx43r(i1,i2,i3)
      uyy42r(i1,i2,i3)= uyy43r(i1,i2,i3)
      uzz42r(i1,i2,i3)= uzz43r(i1,i2,i3)
      uxy42r(i1,i2,i3)= uxy43r(i1,i2,i3)
      uxz42r(i1,i2,i3)= uxz43r(i1,i2,i3)
      uyz42r(i1,i2,i3)= uyz43r(i1,i2,i3)
      ulaplacian42r(i1,i2,i3)=uxx43r(i1,i2,i3)+uyy43r(i1,i2,i3)
      ulaplacian43r(i1,i2,i3)=uxx43r(i1,i2,i3)+uyy43r(i1,i2,i3)+uzz43r(
     & i1,i2,i3)
!     --- end statement functions ----


      side                 =ipar(0)
      axis                 =ipar(1)
      useCoefficients      =ipar(2)
      orderOfExtrapolation =ipar(3)
      gridType             =ipar(4)
      orderOfAccuracy      =ipar(5)
      useForcing           =ipar(6)
      equationToSolve      =ipar(7)
      bcOption4            =ipar(8)
      solveEquationWithBC  =ipar(9)
      level                =ipar(10)
      debug                =ipar(11)

      dirichletFirstGhostLineBC =ipar(12)
      neumannFirstGhostLineBC   =ipar(13)
      dirichletSecondGhostLineBC=ipar(14)
      neumannSecondGhostLineBC  =ipar(15)

      grid                 =ipar(16)

      isNeumannBC          =ipar(17)  ! true if this is really a Neumann or mixed BC
      orderOfExtrapolationForNeumann = ipar(18)
      myid                 =ipar(19)

      dx(0)                =rpar(0)
      dx(1)                =rpar(1)
      dx(2)                =rpar(2)
      a0                   =rpar(3)
      a1                   =rpar(4)
      dr(0)                =rpar(5)
      dr(1)                =rpar(6)
      dr(2)                =rpar(7)
!**      signForJacobian      =rpar(8)

      !write(*,'("bcOpt: side,axis,grid=",2i2,i3," bc=",i2," useCoefficients=",i2," equationToSolve=",i2)') side,axis,grid,bc,useCoefficients,equationToSolve
      !write(*,'("bcOpt: isNeumannBC=",i2," neumannFirstGhostLineBC=",i2," useForcing=",i2)') isNeumannBC,neumannFirstGhostLineBC,useForcing


      if( nd.eq.3 .and. bc.eq.equation .and. orderOfAccuracy.eq.4 
     & .and. neumannSecondGhostLineBC.eq.useEquationToSecondOrder )
     & then

        ! 3D, order=4, Neumann BC + use equation:
        call bc3dOrder4( nd, nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,n1a,n1b,n2a,
     & n2b,n3a,n3b, ndc, c, u,f,mask,rsxy, xy,bc, boundaryCondition, 
     & ipar, rpar )

        return

      end if

      if( orderOfExtrapolationForNeumann.lt.1 .or. 
     & orderOfExtrapolationForNeumann.gt.100 )then
         write(*,'("bcOpt:ERROR: orderOfExtrapolationForNeumann=",i6)')
     &  orderOfExtrapolationForNeumann
         stop 7051
      end if

      if( debug.gt.7 )then
        write(*,'(" bcOpt: bc=",i2," level=",i1," order=",i1," n1bc=",
     & i2," n2bc=",i2)')
     & bc,level,orderOfAccuracy,
     & neumannFirstGhostLineBC,neumannSecondGhostLineBC
      end if


      is1=0
      is2=0
      is3=0
      if( axis.eq.0 )then
        is1=1-2*side
      else if( axis.eq.1 )then
        is2=1-2*side
      else if( axis.eq.2 )then
        is3=1-2*side
      else
        stop 5
      end if

      if( orderOfAccuracy.eq.4 )then
        m11=1
        m21=2
        m31=3
        m41=4
        m51=5
        m12=6
        m22=7
        m32=8
        m42=9
        m52=10
        m13=11
        m23=12
        m33=13
        m43=14
        m53=15
        m14=16
        m24=17
        m34=18
        m44=19
        m54=20
        m15=21
        m25=22
        m35=23
        m45=24
        m55=25
      end if

      ! write(*,*) 'bcOpt:side,axis,bc,bcOption4,orderOfAccuracy=',side,axis,bc,bcOption4,orderOfAccuracy

      if( bc.eq.dirichlet )then

        if( useForcing.eq.1 )then
          do i3=n3a,n3b
          do i2=n2a,n2b
          do i1=n1a,n1b
            if( mask(i1,i2,i3).gt.0 )then
              u(i1,i2,i3)=f(i1,i2,i3)
            end if
          end do
          end do
          end do
        else
          do i3=n3a,n3b
          do i2=n2a,n2b
          do i1=n1a,n1b
            if( mask(i1,i2,i3).gt.0 )then
              u(i1,i2,i3)=0.
            end if
          end do
          end do
          end do
        end if


      else if( bc .eq. extrapolation )then

        if( useCoefficients.eq.1 )then
          ! write(*,*) 'bcOpt:useCoeff extrap side,axis,is1,is2,is3=',side,axis,is1,is2,is3
          if( orderOfExtrapolation.le.3 )then
            do i3=n3a,n3b
            do i2=n2a,n2b
            do i1=n1a,n1b
              u(i1,i2,i3)=-(c(2,i1,i2,i3)*u(i1+is1,i2+is2,i3+is3)+c(3,
     & i1,i2,i3)*u(i1+2*is1,i2+2*is2,i3+2*is3)+c(4,i1,i2,i3)*u(i1+3*
     & is1,i2+3*is2,i3+3*is3))/c(1,i1,i2,i3)
            end do
            end do
            end do
          else if( orderOfExtrapolation.le.4 )then
            do i3=n3a,n3b
            do i2=n2a,n2b
            do i1=n1a,n1b
              u(i1,i2,i3)=-(c(2,i1,i2,i3)*u(i1+is1,i2+is2,i3+is3)+c(3,
     & i1,i2,i3)*u(i1+2*is1,i2+2*is2,i3+2*is3)+c(4,i1,i2,i3)*u(i1+3*
     & is1,i2+3*is2,i3+3*is3)+c(5,i1,i2,i3)*u(i1+4*is1,i2+4*is2,i3+4*
     & is3))/c(1,i1,i2,i3)
            end do
            end do
            end do
          else if( orderOfExtrapolation.le.5 )then
            do i3=n3a,n3b
            do i2=n2a,n2b
            do i1=n1a,n1b
              u(i1,i2,i3)=-(c(2,i1,i2,i3)*u(i1+is1,i2+is2,i3+is3)+c(3,
     & i1,i2,i3)*u(i1+2*is1,i2+2*is2,i3+2*is3)+c(4,i1,i2,i3)*u(i1+3*
     & is1,i2+3*is2,i3+3*is3)+c(5,i1,i2,i3)*u(i1+4*is1,i2+4*is2,i3+4*
     & is3)+c(6,i1,i2,i3)*u(i1+5*is1,i2+5*is2,i3+5*is3))/c(1,i1,i2,i3)
            end do
            end do
            end do
          else
            write(*,*) 'bcOpt:ERROR: orderOfExtrapolation=',
     &           orderOfExtrapolation
            stop 1
          end if

        else
          ! explicit application of extrapolation equations
          ! write(*,*) 'bcOpt: extrap side,axis,is1,is2,is3,order=',side,axis,is1,is2,is3,orderOfExtrapolation

          if( orderOfExtrapolation.eq.3 )then
            do i3=n3a,n3b
            do i2=n2a,n2b
            do i1=n1a,n1b
              u(i1,i2,i3)=3.*u(i1+is1,i2+is2,i3+is3)-3.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)+u(i1+3*is1,i2+3*is2,i3+3*is3)
            end do
            end do
            end do
          else if( orderOfExtrapolation.eq.4 )then
            do i3=n3a,n3b
            do i2=n2a,n2b
            do i1=n1a,n1b
              u(i1,i2,i3)=4.*u(i1+is1,i2+is2,i3+is3)-6.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)+4.*u(i1+3*is1,i2+3*is2,i3+3*is3)-u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
            end do
            end do
            end do
          else if( orderOfExtrapolation.eq.5 )then
            do i3=n3a,n3b
            do i2=n2a,n2b
            do i1=n1a,n1b
              u(i1,i2,i3)=5.*u(i1+is1,i2+is2,i3+is3)-10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)+10.*u(i1+3*is1,i2+3*is2,i3+3*is3)-5.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)+u(i1+5*is1,i2+5*is2,i3+5*is3)
            end do
            end do
            end do
          else if( orderOfExtrapolation.eq.6 )then
            do i3=n3a,n3b
            do i2=n2a,n2b
            do i1=n1a,n1b
              u(i1,i2,i3)=6.*u(i1+is1,i2+is2,i3+is3)-15.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)+20.*u(i1+3*is1,i2+3*is2,i3+3*is3)-15.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)+6.*u(i1+5*is1,i2+5*is2,i3+5*is3)-u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
            end do
            end do
            end do
          else if( orderOfExtrapolation.eq.7 )then
            do i3=n3a,n3b
            do i2=n2a,n2b
            do i1=n1a,n1b
              u(i1,i2,i3)=7.*u(i1+is1,i2+is2,i3+is3)-21.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)+35.*u(i1+3*is1,i2+3*is2,i3+3*is3)-35.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)+21.*u(i1+5*is1,i2+5*is2,i3+5*is3)-7.*u(
     & i1+6*is1,i2+6*is2,i3+6*is3)+u(i1+7*is1,i2+7*is2,i3+7*is3)
            end do
            end do
            end do
          else if( orderOfExtrapolation.eq.2 )then
            do i3=n3a,n3b
            do i2=n2a,n2b
            do i1=n1a,n1b
              u(i1,i2,i3)=2.*u(i1+is1,i2+is2,i3+is3)-u(i1+2*is1,i2+2*
     & is2,i3+2*is3)
            end do
            end do
            end do
          else
            write(*,*) 'bcOpt:ERROR: orderOfExtrapolation=',
     &           orderOfExtrapolation
            stop 1
          end if
        end if

      else if( bc .eq. extrapolateTwoGhostLines )then
        ! extrapolate two ghost 
        ! write(*,*) 'bcOpt: extrapTwo side,axis,is1,is2,is3,order=',side,axis,is1,is2,is3,orderOfExtrapolation

        if( orderOfExtrapolation.eq.3 )then
          do i3=n3a,n3b
          do i2=n2a,n2b
          do i1=n1a,n1b
            u(i1,i2,i3)=3.*u(i1+is1,i2+is2,i3+is3)-3.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)+u(i1+3*is1,i2+3*is2,i3+3*is3)
            u(i1-is1,i2-is2,i3-is3)=3.*u(i1,i2,i3)-3.*u(i1+is1,i2+is2,
     & i3+is3)+u(i1+2*is1,i2+2*is2,i3+2*is3)
          end do
          end do
          end do
        else if( orderOfExtrapolation.eq.4 )then
          do i3=n3a,n3b
          do i2=n2a,n2b
          do i1=n1a,n1b
            u(i1,i2,i3)=4.*u(i1+is1,i2+is2,i3+is3)-6.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)+4.*u(i1+3*is1,i2+3*is2,i3+3*is3)-u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
            u(i1-is1,i2-is2,i3-is3)=4.*u(i1,i2,i3)-6.*u(i1+is1,i2+is2,
     & i3+is3)+4.*u(i1+2*is1,i2+2*is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,
     & i3+3*is3)
          end do
          end do
          end do
        else if( orderOfExtrapolation.eq.5 )then
          do i3=n3a,n3b
          do i2=n2a,n2b
          do i1=n1a,n1b
            u(i1,i2,i3)=5.*u(i1+is1,i2+is2,i3+is3)-10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)+10.*u(i1+3*is1,i2+3*is2,i3+3*is3)-5.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)+u(i1+5*is1,i2+5*is2,i3+5*is3)
            u(i1-is1,i2-is2,i3-is3)=5.*u(i1,i2,i3)-10.*u(i1+is1,i2+is2,
     & i3+is3)+10.*u(i1+2*is1,i2+2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*
     & is2,i3+3*is3)+u(i1+4*is1,i2+4*is2,i3+4*is3)
          end do
          end do
          end do
        else if( orderOfExtrapolation.eq.6 )then
          do i3=n3a,n3b
          do i2=n2a,n2b
          do i1=n1a,n1b
            u(i1,i2,i3)=6.*u(i1+is1,i2+is2,i3+is3)-15.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)+20.*u(i1+3*is1,i2+3*is2,i3+3*is3)-15.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)+6.*u(i1+5*is1,i2+5*is2,i3+5*is3)-u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
            u(i1-is1,i2-is2,i3-is3)=6.*u(i1,i2,i3)-15.*u(i1+is1,i2+is2,
     & i3+is3)+20.*u(i1+2*is1,i2+2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*
     & is2,i3+3*is3)+6.*u(i1+4*is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*
     & is2,i3+5*is3)
          end do
          end do
          end do
        else if( orderOfExtrapolation.eq.7 )then
          do i3=n3a,n3b
          do i2=n2a,n2b
          do i1=n1a,n1b
            u(i1,i2,i3)=7.*u(i1+is1,i2+is2,i3+is3)-21.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)+35.*u(i1+3*is1,i2+3*is2,i3+3*is3)-35.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)+21.*u(i1+5*is1,i2+5*is2,i3+5*is3)-7.*u(i1+6*
     & is1,i2+6*is2,i3+6*is3)+u(i1+7*is1,i2+7*is2,i3+7*is3)
            u(i1-is1,i2-is2,i3-is3)=7.*u(i1,i2,i3)-21.*u(i1+is1,i2+is2,
     & i3+is3)+35.*u(i1+2*is1,i2+2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*
     & is2,i3+3*is3)+21.*u(i1+4*is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,
     & i2+5*is2,i3+5*is3)+u(i1+6*is1,i2+6*is2,i3+6*is3)
          end do
          end do
          end do
        else if( orderOfExtrapolation.eq.2 )then
          do i3=n3a,n3b
          do i2=n2a,n2b
          do i1=n1a,n1b
            u(i1,i2,i3)=2.*u(i1+is1,i2+is2,i3+is3)-u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
            u(i1-is1,i2-is2,i3-is3)=2.*u(i1,i2,i3)-u(i1+is1,i2+is2,i3+
     & is3)
          end do
          end do
          end do
        else
          write(*,*) 'bcOpt:ERROR: orderOfExtrapolation=',
     & orderOfExtrapolation
          stop 1
        end if

      else if( isNeumannBC.eq.1 .and. orderOfAccuracy.eq.2 .and. 
     & gridType.eq.rectangular )then

        ! Neumann or mixed BC, 2nd-order
         ! write(*,'("bcOpt:neumann2ndOrderRectangular: grid=",i4," level=",i2," side,axis=",2i2," useForcing=",i2)') grid,level,side,axis,useForcing
         ! write(*,'(" a0,a1,dx(axis)=",3f6.2)') a0,a1,dx(axis)
         ! write(*,'(" n1a,n1b,...",6i3," is1,is2,is3=",3i2)') n1a,n1b,n2a,n2b,n3a,n3b,is1,is2,is3
         ! On a Cartesian grid the Mixed condition is:
         !  a1*nSign*(u(1)-u(-1))/(2*dx) + a0*u = f 
         !   nSign = 2*side-1
         if( useForcing.eq.1 )then
          ! Loop over boundary points
          do i3=n3a+is3,n3b+is3
          do i2=n2a+is2,n2b+is2
          do i1=n1a+is1,n1b+is1
           if( mask(i1,i2,i3).gt.0 )then
             u(i1-is1,i2-is2,i3-is3)=u(i1+is1,i2+is2,i3+is3) - (a0*u(
     & i1,i2,i3)-f(i1-is1,i2-is2,i3-is3))*(2.*dx(axis)/a1)
             ! write(*,'(" i1,i2=",2i3," f=",e10.2," u(-1)=",e10.2)') i1,i2,f(i1-is1,i2-is2,i3-is3),u(i1-is1,i2-is2,i3-is3)
           else if( mask(i1,i2,i3).lt.0 )then
             ! should we use 2nd or 3rd order extrap here?
             u(i1-is1,i2-is2,i3-is3)=(3.*u(i1,i2,i3)-3.*u(i1+is1,i2+
     & is2,i3+is3)+u(i1+2*is1,i2+2*is2,i3+2*is3))
             ! write(*,'("bcOpt:neumann:extrap ighost:  i1,i2=",2i3," u(-1)=",e12.4)') i1,i2,u(i1-is1,i2-is2,i3-is3)
           end if
          end do
          end do
          end do
         else
          ! Loop over boundary points
          do i3=n3a+is3,n3b+is3
          do i2=n2a+is2,n2b+is2
          do i1=n1a+is1,n1b+is1
           if( mask(i1,i2,i3).gt.0 )then
             u(i1-is1,i2-is2,i3-is3)=u(i1+is1,i2+is2,i3+is3) - (a0*u(
     & i1,i2,i3)            )*(2.*dx(axis)/a1)
           else if( mask(i1,i2,i3).lt.0 )then
             u(i1-is1,i2-is2,i3-is3)=(2.*u(i1,i2,i3)-u(i1+is1,i2+is2,
     & i3+is3))
           end if
          end do
          end do
          end do
         end if

      else if( bc.eq.equation .and. orderOfAccuracy.eq.2 )then

        ! 2nd order "Neumann" or mixed type boundary condition 
        ! The BC is defined by the coefficient matrix

        ! write(*,'("bcOpt: neumann/mixed useCoeff: grid=",i4," level=",i2," side,axis=",2i2," useForcing=",i2)') grid,level,side,axis,useForcing

        if( useCoefficients.eq.0 )then
          stop 2930
        end if

        ! if( gridType.ne.curvilinear )then
        !   stop 2930
        ! end if

        if( nd.eq.2 )then
          m11=1                 ! MCE(-1,-1, 0)
          m21=2                 ! MCE( 0,-1, 0)
          m31=3                 ! MCE(+1,-1, 0)
          m12=4                 ! MCE(-1, 0, 0)
          m22=5                 ! MCE( 0, 0, 0)
          m32=6                 ! MCE(+1, 0, 0)
          m13=7                 ! MCE(-1,+1, 0)
          m23=8                 ! MCE( 0,+1, 0)
          m33=9                 ! MCE(+1,+1, 0)



          mGhost=m22-is1+3*(-is2)

         ! j1=-1 
         ! j2=1
         ! j3=0
         ! write(*,'("bcOpt:Neumann: j1,j2=",2i3,"  c11,c12,c13=",3e10.2," c21,c22,c23=",3e10.2," c31,c32,c33=",3e10.2, "cGhost=",e10.2)') j1,j2,! c(m11,j1,j2,j3),c(m12,j1,j2,j3),c(m13,j1,j2,j3),! c(m21,j1,j2,j3),c(m22,j1,j2,j3),c(m23,j1,j2,j3),! c(m31,j1,j2,j3),c(m32,j1,j2,j3),c(m33,j1,j2,j3),c(mGhost,j1,j2,j3)

          do i3=n3a,n3b
          do i2=n2a,n2b
          do i1=n1a,n1b
           if( mask(i1+is1,i2+is2,i3+is3).gt.0 )then
          !    if( abs(c(mGhost,i1,i2,i3)).lt.1.e-10 )then
          !      write(*,*) 'bcOpt:ERROR: i1,i2,i3,mGhost,c=', i1,i2,i3,mGhost,c(mGhost,i1,i2,i3)
          !      write(*,*) ' c(0:2)=',c(0,i1,i2,i3),c(1,i1,i2,i3),c(2,i1,i2,i3)
          !      write(*,*) ' c(3:5)=',c(3,i1,i2,i3),c(4,i1,i2,i3),c(5,i1,i2,i3)
          !      write(*,*) ' c(6:9)=',c(6,i1,i2,i3),c(7,i1,i2,i3),c(8,i1,i2,i3)
          !    end if
              u(i1,i2,i3)=(f(i1,i2,i3)-op2d(i1,i2,i3,i1+is1,i2+is2,i3))
     & /c(mGhost,i1,i2,i3)+u(i1,i2,i3)
           else if( mask(i1+is1,i2+is2,i3+is3).lt.0 )then
             u(i1,i2,i3)=(3.*u(i1+is1,i2+is2,i3+is3)-3.*u(i1+is1+is1,
     & i2+is2+is2,i3+is3+is3)+u(i1+is1+2*is1,i2+is2+2*is2,i3+is3+2*
     & is3))
           end if
          end do
          end do
          end do
        else
          m111=1
          m211=2
          m311=3
          m121=4
          m221=5
          m321=6
          m131=7
          m231=8
          m331=9
          m112=10
          m212=11
          m312=12
          m122=13
          m222=14
          m322=15
          m132=16
          m232=17
          m332=18
          m113=19
          m213=20
          m313=21
          m123=22
          m223=23
          m323=24
          m133=25
          m233=26
          m333=27

          mGhost=m222-is1+3*(-is2)+9*(-is3)
          do i3=n3a,n3b
          do i2=n2a,n2b
          do i1=n1a,n1b
           if( mask(i1+is1,i2+is2,i3+is3).gt.0 )then
          !    if( abs(c(mGhost,i1,i2,i3)).lt.1.e-10 )then
          !      write(*,*) 'bcOpt:ERROR: i1,i2,i3,mGhost,c=', i1,i2,i3,mGhost,c(mGhost,i1,i2,i3)
          !      write(*,*) ' c(0:2)=',c(0,i1,i2,i3),c(1,i1,i2,i3),c(2,i1,i2,i3)
          !      write(*,*) ' c(3:5)=',c(3,i1,i2,i3),c(4,i1,i2,i3),c(5,i1,i2,i3)
          !      write(*,*) ' c(6:9)=',c(6,i1,i2,i3),c(7,i1,i2,i3),c(8,i1,i2,i3)
          !    end if
              u(i1,i2,i3)=(f(i1,i2,i3)-op3d(i1,i2,i3,i1+is1,i2+is2,i3+
     & is3))/c(mGhost,i1,i2,i3)+u(i1,i2,i3)
           else if( mask(i1+is1,i2+is2,i3+is3).lt.0 )then
             u(i1,i2,i3)=(3.*u(i1+is1,i2+is2,i3+is3)-3.*u(i1+is1+is1,
     & i2+is2+is2,i3+is3+is3)+u(i1+is1+2*is1,i2+is2+2*is2,i3+is3+2*
     & is3))
           end if
          end do
          end do
          end do

        end if

      else if( bc.eq.equation .and. orderOfAccuracy.eq.4 )then

        ! *************************************************************
        ! *********  Fourth-order accurate Neumann or mixed BC's ******
        ! *************************************************************
        ! write(*,*) 'bcOpt:equation4, bcOption4=',bcOption4

        ! *wdh* 100507 if( bcOption4.eq.0 )then
        if( neumannSecondGhostLineBC.eq.useExtrapolation )then

          if( debug.gt.15 .and. myid.eq.0 )then
           write(*,'("  bcOpt:order4:l=",i2," neumann-AndExtrap",i1,
     & "...")') level,orderOfExtrapolation
          end if
           ! In this case the neumann/mixed BC is coupled with the extrapolation of the
           ! second ghost line -- we solve the coupled equations to give the two values
           if( gridType.eq.rectangular )then
             if( a1.eq.0. )then
               write(*,*) 'bcOpt:ERROR: a1=0!'
               stop 2
             end if
             ! write(*,*) '@@@ bcOpt:orderOfExtrapolationForNeumann=',orderOfExtrapolationForNeumann
             dxn=dx(axis)
             if( orderOfExtrapolationForNeumann.eq.5 .and. 
     & useForcing.eq.1 )then
               ! use f at the ghost line as the RHS for the mixed BC
               b0=-4.*dxn*a0/a1-10./3.
               b1=4.*(dxn/a1)
               do i3=n3a,n3b
               do i2=n2a,n2b
               do i1=n1a,n1b
                 u(i1,i2,i3)=b0*u(i1+is1,i2+is2,i3+is3)+6.*u(i1+2*is1,
     & i2+2*is2,i3+2*is3)-2.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,
     & i2+4*is2,i3+4*is3)/3.+b1*f(i1,i2,i3)
                 u(i1-is1,i2-is2,i3-is3)=5.*u(i1,i2,i3)-10.*u(i1+is1,
     & i2+is2,i3+is3)+10.*u(i1+2*is1,i2+2*is2,i3+2*is3)-5.*u(i1+3*is1,
     & i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*is2,i3+4*is3)
               end do
               end do
               end do
             else if( orderOfExtrapolationForNeumann.eq.5 .and. 
     & useForcing.eq.0 )then
               b0=-4.*dxn*a0/a1-10./3.
               b1=4.*(dxn/a1)
               do i3=n3a,n3b
               do i2=n2a,n2b
               do i1=n1a,n1b
                 u(i1,i2,i3)=b0*u(i1+is1,i2+is2,i3+is3)+6.*u(i1+2*is1,
     & i2+2*is2,i3+2*is3)-2.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,
     & i2+4*is2,i3+4*is3)/3.
                 u(i1-is1,i2-is2,i3-is3)=5.*u(i1,i2,i3)-10.*u(i1+is1,
     & i2+is2,i3+is3)+10.*u(i1+2*is1,i2+2*is2,i3+2*is3)-5.*u(i1+3*is1,
     & i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*is2,i3+4*is3)
               end do
               end do
               end do
             else if( orderOfExtrapolationForNeumann.eq.4 .and. 
     & useForcing.eq.1 )then
               ! use f at the ghost line as the RHS for the mixed BC
               b0=-3.*dxn*a0/a1-1.5
               b1=3.*(dxn/a1)
               do i3=n3a,n3b
               do i2=n2a,n2b
               do i1=n1a,n1b
                 u(i1,i2,i3)=b0*u(i1+is1,i2+is2,i3+is3)+3.*u(i1+2*is1,
     & i2+2*is2,i3+2*is3)-.5*u(i1+3*is1,i2+3*is2,i3+3*is3)+b1*f(i1,i2,
     & i3)
                 u(i1-is1,i2-is2,i3-is3)=4.*u(i1,i2,i3)-6.*u(i1+is1,i2+
     & is2,i3+is3)+4.*u(i1+2*is1,i2+2*is2,i3+2*is3)-u(i1+3*is1,i2+3*
     & is2,i3+3*is3)
               end do
               end do
               end do
             else if( orderOfExtrapolationForNeumann.eq.4 .and. 
     & useForcing.eq.0 )then
               b0=-3.*dxn*a0/a1-1.5
               b1=3.*(dxn/a1)
               do i3=n3a,n3b
               do i2=n2a,n2b
               do i1=n1a,n1b
                 u(i1,i2,i3)=b0*u(i1+is1,i2+is2,i3+is3)+3.*u(i1+2*is1,
     & i2+2*is2,i3+2*is3)-.5*u(i1+3*is1,i2+3*is2,i3+3*is3)
                 u(i1-is1,i2-is2,i3-is3)=4.*u(i1,i2,i3)-6.*u(i1+is1,i2+
     & is2,i3+is3)+4.*u(i1+2*is1,i2+2*is2,i3+2*is3)-u(i1+3*is1,i2+3*
     & is2,i3+3*is3)
               end do
               end do
               end do
             else
               write(*,*) 'bcOpt:ERROR: 
     & orderOfExtrapolationForNeumann=',
     & orderOfExtrapolationForNeumann,' useForcing=',useForcing
               stop 1
             end if
           else
             ! **** curvilinear case ****
             if( nd.eq.2 )then
               m11=1
               m21=2
               m31=3
               m41=4
               m51=5
               m12=6
               m22=7
               m32=8
               m42=9
               m52=10
               m13=11
               m23=12
               m33=13
               m43=14
               m53=15
               m14=16
               m24=17
               m34=18
               m44=19
               m54=20
               m15=21
               m25=22
               m35=23
               m45=24
               m55=25
               ! mg2 is the index of the 2nd ghost point 
               ! mg1 is the index of the 1st ghost point
               mg2 = m33-2*is1-2*5*is2          ! m13 or m53 or m31 or m35
               mg1 = mg2+is1+5*is2              ! m23 or m43 or m32 or m34
          !     write(*,*) 'bcOpt: 4th order neumann BC -- curvilinear'
          !     write(*,*) 'orderOfExtrapolation=',orderOfExtrapolation
               if( orderOfExtrapolationForNeumann.eq.5 .and. 
     & useForcing.eq.1 )then
                 ! use f at the ghost line as the RHS for the mixed BC
                 do i3=n3a,n3b
                 do i2=n2a,n2b
                 do i1=n1a,n1b
                   t1=op2dSparse4(i1,i2,i3,i1+is1,i2+is2,i3+is3)-c(mg1,
     & i1,i2,i3)*u(i1,i2,i3)-c(mg2,i1,i2,i3)*u(i1-is1,i2-is2,i3-is3)
                   u(i1,i2,i3)=(f(i1,i2,i3)-t1+(10.*u(i1+is1,i2+is2,i3+
     & is3)-10.*u(i1+2*is1,i2+2*is2,i3+2*is3)+5.*u(i1+3*is1,i2+3*is2,
     & i3+3*is3)-u(i1+4*is1,i2+4*is2,i3+4*is3))*c(mg2,i1,i2,i3))/(5.*
     & c(mg2,i1,i2,i3)+c(mg1,i1,i2,i3))
                   u(i1-is1,i2-is2,i3-is3)=5.*u(i1,i2,i3)-10.*u(i1+is1,
     & i2+is2,i3+is3)+10.*u(i1+2*is1,i2+2*is2,i3+2*is3)-5.*u(i1+3*is1,
     & i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*is2,i3+4*is3)
                 end do
                 end do
                 end do
               else if( orderOfExtrapolationForNeumann.eq.5 .and. 
     & useForcing.eq.0 )then
                 do i3=n3a,n3b
                 do i2=n2a,n2b
                 do i1=n1a,n1b
                   t1=op2dSparse4(i1,i2,i3,i1+is1,i2+is2,i3+is3)-c(mg1,
     & i1,i2,i3)*u(i1,i2,i3)-c(mg2,i1,i2,i3)*u(i1-is1,i2-is2,i3-is3)
                   u(i1,i2,i3)=(-t1+(10.*u(i1+is1,i2+is2,i3+is3)-10.*u(
     & i1+2*is1,i2+2*is2,i3+2*is3)+5.*u(i1+3*is1,i2+3*is2,i3+3*is3)-u(
     & i1+4*is1,i2+4*is2,i3+4*is3))*c(mg2,i1,i2,i3))/(5.*c(mg2,i1,i2,
     & i3)+c(mg1,i1,i2,i3))
                   u(i1-is1,i2-is2,i3-is3)=5.*u(i1,i2,i3)-10.*u(i1+is1,
     & i2+is2,i3+is3)+10.*u(i1+2*is1,i2+2*is2,i3+2*is3)-5.*u(i1+3*is1,
     & i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*is2,i3+4*is3)
                 end do
                 end do
                 end do
               else if( orderOfExtrapolationForNeumann.eq.4 .and. 
     & useForcing.eq.1 )then
                 do i3=n3a,n3b
                 do i2=n2a,n2b
                 do i1=n1a,n1b
                   t1=op2dSparse4(i1,i2,i3,i1+is1,i2+is2,i3+is3)-c(mg1,
     & i1,i2,i3)*u(i1,i2,i3)-c(mg2,i1,i2,i3)*u(i1-is1,i2-is2,i3-is3)
                   u(i1,i2,i3)=(f(i1,i2,i3)-t1+(6.*u(i1+is1,i2+is2,i3+
     & is3)-4.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+3*is2,i3+3*
     & is3))*c(mg2,i1,i2,i3))/(4.*c(mg2,i1,i2,i3)+c(mg1,i1,i2,i3))
                   u(i1-is1,i2-is2,i3-is3)=4.*u(i1,i2,i3)-6.*u(i1+is1,
     & i2+is2,i3+is3)+4.*u(i1+2*is1,i2+2*is2,i3+2*is3)-u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
                 end do
                 end do
                 end do
               else if( orderOfExtrapolationForNeumann.eq.4 .and. 
     & useForcing.eq.0 )then
                 do i3=n3a,n3b
                 do i2=n2a,n2b
                 do i1=n1a,n1b
                   t1=op2dSparse4(i1,i2,i3,i1+is1,i2+is2,i3+is3)-c(mg1,
     & i1,i2,i3)*u(i1,i2,i3)-c(mg2,i1,i2,i3)*u(i1-is1,i2-is2,i3-is3)
                   u(i1,i2,i3)=(-t1+(6.*u(i1+is1,i2+is2,i3+is3)-4.*u(
     & i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+3*is2,i3+3*is3))*c(
     & mg2,i1,i2,i3))/(4.*c(mg2,i1,i2,i3)+c(mg1,i1,i2,i3))
                   u(i1-is1,i2-is2,i3-is3)=4.*u(i1,i2,i3)-6.*u(i1+is1,
     & i2+is2,i3+is3)+4.*u(i1+2*is1,i2+2*is2,i3+2*is3)-u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
                 end do
                 end do
                 end do
               else
                 write(*,*) 'bcOpt:ERROR: 
     & orderOfExtrapolationForNeumann=',
     & orderOfExtrapolationForNeumann,' useForcing=',useForcing
                 stop 1
               end if
             else if( nd.eq.3 )then
                !  ***** 4th order **** these were added 030925
                m111=1
                m211=2
                m311=3
                m411=4
                m511=5
                m121=6
                m221=7
                m321=8
                m421=9
                m521=10
                m131=11
                m231=12
                m331=13
                m431=14
                m531=15
                m141=16
                m241=17
                m341=18
                m441=19
                m541=20
                m151=21
                m251=22
                m351=23
                m451=24
                m551=25
                m112=26
                m212=27
                m312=28
                m412=29
                m512=30
                m122=31
                m222=32
                m322=33
                m422=34
                m522=35
                m132=36
                m232=37
                m332=38
                m432=39
                m532=40
                m142=41
                m242=42
                m342=43
                m442=44
                m542=45
                m152=46
                m252=47
                m352=48
                m452=49
                m552=50
                m113=51
                m213=52
                m313=53
                m413=54
                m513=55
                m123=56
                m223=57
                m323=58
                m423=59
                m523=60
                m133=61
                m233=62
                m333=63
                m433=64
                m533=65
                m143=66
                m243=67
                m343=68
                m443=69
                m543=70
                m153=71
                m253=72
                m353=73
                m453=74
                m553=75
                m114=76
                m214=77
                m314=78
                m414=79
                m514=80
                m124=81
                m224=82
                m324=83
                m424=84
                m524=85
                m134=86
                m234=87
                m334=88
                m434=89
                m534=90
                m144=91
                m244=92
                m344=93
                m444=94
                m544=95
                m154=96
                m254=97
                m354=98
                m454=99
                m554=100
                m115=101
                m215=102
                m315=103
                m415=104
                m515=105
                m125=106
                m225=107
                m325=108
                m425=109
                m525=110
                m135=111
                m235=112
                m335=113
                m435=114
                m535=115
                m145=116
                m245=117
                m345=118
                m445=119
                m545=120
                m155=121
                m255=122
                m355=123
                m455=124
                m555=125
               ! mg2 is the index of the 2nd ghost point 
               ! mg1 is the index of the 1st ghost point
               mg2 = m333-2*is1-2*5*is2-2*5*5*is3       ! m133 or m533 or m313 or m353 or m331 or m335
               mg1 = mg2+is1+5*is2+5*5*is3              ! m233 or m433 or m323 or m343 or m332 or m334
               if( orderOfExtrapolationForNeumann.eq.5 .and. 
     & useForcing.eq.1 )then
                 ! use f at the ghost line as the RHS for the mixed BC
                 do i3=n3a,n3b
                 do i2=n2a,n2b
                 do i1=n1a,n1b
                   t1=(op3dSparse4(i1,i2,i3,i1+is1,i2+is2,i3+is3)-c(
     & mg1,i1,i2,i3)*u(i1,i2,i3))/c(mg2,i1,i2,i3)-u(i1-is1,i2-is2,i3-
     & is3)
                   u(i1,i2,i3)=(t1-10.*u(i1+is1,i2+is2,i3+is3)+10.*u(
     & i1+2*is1,i2+2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(
     & i1+4*is1,i2+4*is2,i3+4*is3)-f(i1,i2,i3)/c(mg2,i1,i2,i3))/(-5.-
     & c(mg1,i1,i2,i3)/c(mg2,i1,i2,i3))
                   u(i1-is1,i2-is2,i3-is3)=5.*u(i1,i2,i3)-10.*u(i1+is1,
     & i2+is2,i3+is3)+10.*u(i1+2*is1,i2+2*is2,i3+2*is3)-5.*u(i1+3*is1,
     & i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*is2,i3+4*is3)
                 end do
                 end do
                 end do
               else if( orderOfExtrapolationForNeumann.eq.5 .and. 
     & useForcing.eq.0 )then
                 do i3=n3a,n3b
                 do i2=n2a,n2b
                 do i1=n1a,n1b
                   t1=(op3dSparse4(i1,i2,i3,i1+is1,i2+is2,i3+is3)-c(
     & mg1,i1,i2,i3)*u(i1,i2,i3))/c(mg2,i1,i2,i3)-u(i1-is1,i2-is2,i3-
     & is3)
                   u(i1,i2,i3)=(t1-10.*u(i1+is1,i2+is2,i3+is3)+10.*u(
     & i1+2*is1,i2+2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(
     & i1+4*is1,i2+4*is2,i3+4*is3))/(-5.-c(mg1,i1,i2,i3)/c(mg2,i1,i2,
     & i3))
                   u(i1-is1,i2-is2,i3-is3)=5.*u(i1,i2,i3)-10.*u(i1+is1,
     & i2+is2,i3+is3)+10.*u(i1+2*is1,i2+2*is2,i3+2*is3)-5.*u(i1+3*is1,
     & i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*is2,i3+4*is3)
                 end do
                 end do
                 end do
               else if( orderOfExtrapolationForNeumann.eq.4 .and. 
     & useForcing.eq.1 )then
                 ! *wdh* order=4 added 110223
                 ! use f at the ghost line as the RHS for the mixed BC
                 do i3=n3a,n3b
                 do i2=n2a,n2b
                 do i1=n1a,n1b
                   t1=(op3dSparse4(i1,i2,i3,i1+is1,i2+is2,i3+is3)-c(
     & mg1,i1,i2,i3)*u(i1,i2,i3))/c(mg2,i1,i2,i3)-u(i1-is1,i2-is2,i3-
     & is3)
                   u(i1,i2,i3)=(t1-6.*u(i1+is1,i2+is2,i3+is3)+4.*u(i1+
     & 2*is1,i2+2*is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)-f(i1,i2,
     & i3)/c(mg2,i1,i2,i3))/(-4.-c(mg1,i1,i2,i3)/c(mg2,i1,i2,i3))
                   u(i1-is1,i2-is2,i3-is3)=4.*u(i1,i2,i3)-6.*u(i1+is1,
     & i2+is2,i3+is3)+4.*u(i1+2*is1,i2+2*is2,i3+2*is3)-u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
                 end do
                 end do
                 end do
               else if( orderOfExtrapolationForNeumann.eq.4 .and. 
     & useForcing.eq.0 )then
                 do i3=n3a,n3b
                 do i2=n2a,n2b
                 do i1=n1a,n1b
                   t1=(op3dSparse4(i1,i2,i3,i1+is1,i2+is2,i3+is3)-c(
     & mg1,i1,i2,i3)*u(i1,i2,i3))/c(mg2,i1,i2,i3)-u(i1-is1,i2-is2,i3-
     & is3)
                   u(i1,i2,i3)=(t1-6.*u(i1+is1,i2+is2,i3+is3)+4.*u(i1+
     & 2*is1,i2+2*is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3))/(-4.-c(
     & mg1,i1,i2,i3)/c(mg2,i1,i2,i3))
                   u(i1-is1,i2-is2,i3-is3)=4.*u(i1,i2,i3)-6.*u(i1+is1,
     & i2+is2,i3+is3)+4.*u(i1+2*is1,i2+2*is2,i3+2*is3)-u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
                 end do
                 end do
                 end do
               else
                 write(*,*) 'bcOpt:ERROR: 
     & orderOfExtrapolationForNeumann=',
     & orderOfExtrapolationForNeumann,' useForcing=',useForcing
                 stop 1
               end if
             else
               write(*,*) 'bcOpt:ERROR: nd=',nd
               stop 4
             end if
           end if

        else if( neumannSecondGhostLineBC.eq.useEquationToSecondOrder )
     & then


          if( debug.gt.15 )then
            write(*,'("  bcOpt:order4:l=",i2," neumann-AndEqn...")') 
     & level
          end if
          ! write(*,*) 'bcOpt:NE n1a,n1b,n2a,n2b=',n1a,n1b,n2a,n2b

          ! define m1a,m1b,.. to equal n1a,n1b,.. except for periodic directions
          m1a=n1a
          m1b=n1b
          m2a=n2a
          m2b=n2b
          m3a=n3a
          m3b=n3b
          if( boundaryCondition(0,0).lt.0 )then
            m1a=m1a-1
            m1b=m1b+1
          end if
          if( boundaryCondition(0,1).lt.0 )then
            m2a=m2a-1
            m2b=m2b+1
          end if
          if( boundaryCondition(0,2).lt.0 )then
            m3a=m3a-1
            m3b=m3b+1
          end if
          if( useForcing.eq.1 )then
            if( axis.eq.0 .and. nd.eq.2 )then
              if( solveEquationWithBC.eq.0 )then
                ! *wdh* 110213 -- FINISH ME for the heat operator 
                ! if( equationToSolve.ne.laplaceEquation .and. equationToSolve.ne.heatEquationOperator)then
                !   write(*,'("Ogmg:bcOpt:neumannAndEqn(order4):ERROR: only implemented for equation=laplace or heatEquationOperator")')
                if( equationToSolve.ne.laplaceEquation )then
                  write(*,'("Ogmg:bcOpt:neumannAndEqn(order4):ERROR: 
     & only implemented for equation=laplace")')
                  write(*,'("equationToSolve=",i2)') equationToSolve
                  write(*,'("gridType=",i2)') gridType
                  stop 6064
                end if
                if( gridType.eq.rectangular )then
                  if( a1.eq.0. )then
                    write(*,*) 'bcOpt:ERROR: a1=0!'
                    stop 2
                  end if
                  ! write(*,'("bcOpt:order4 neumannAndEqnEvenNewer (rect) grid=",i3," n1a,n1b,n2a,n2b=",4i3)') grid,n1a,n1b,n2a,n2b
                  drn=dx(axis)
                  nsign = 2*side-1
                  br2=-nsign*a0/(a1*nsign)
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                   j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                   j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! Note: the rhs for the mixed BC is stored in the ghost point value of f
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Cartesian grids use dx: 
                      g = f(j1,j2,j3)
                      ff=f(i1,i2,i3)
                        ! Note "g" is located on the ghost point "j1" of f
                        ! 2nd-order one sided:
                        ! ffr=(-f(i1+2*is1,i2,i3)+4.*f(i1+is1,i2,i3)-3.*ff)/(2.*dx(0))  
                        ! 3rd-order one sided: 100510 -- added is1
                        ffr=is1*(-11.*ff+18.*f(i1+is1,i2,i3)-9.*f(i1+2*
     & is1,i2,i3)+2.*f(i1+3*is1,i2,i3))/(6.*dx(0))
                        ! 100610: Check the mask for computing valid tangential derivatives:
                        ! NOTE: the forcing f and g are only assumed to be given where mask>0
                        ! In order to compute tangential derivatives of the forcing we may need to fill in
                        ! neighbouring values of the forcing at interp and unused points
                        gv( 0, 0, 0)=f(j1,i2,i3)
                        i2m1 = i2-1
                        if( i2m1.lt.n2a .or. mask(i1,i2m1,i3).le.0 )
     & then
                          ! f(j1,i2m1,i3)= extrap3(f,j1,i2m1,i3, 0,1,0)
                          ! gv( 0,-1, 0)=extrap3(f,j1,i2m1,i3, 0,1,0)
                          ! extrapWithMask
                            if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(
     & 1),i3+4*(0)).gt.0 )then
                             gv(0,-1,0)=(4.*f(j1+(0),i2m1+(1),i3+(0))-
     & 6.*f(j1+2*(0),i2m1+2*(1),i3+2*(0))+4.*f(j1+3*(0),i2m1+3*(1),i3+
     & 3*(0))-f(j1+4*(0),i2m1+4*(1),i3+4*(0)))
                            else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                             gv(0,-1,0)=(3.*f(j1+(0),i2m1+(1),i3+(0))-
     & 3.*f(j1+2*(0),i2m1+2*(1),i3+2*(0))+f(j1+3*(0),i2m1+3*(1),i3+3*(
     & 0)))
                            else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                             gv(0,-1,0)=(2.*f(j1+(0),i2m1+(1),i3+(0))-
     & f(j1+2*(0),i2m1+2*(1),i3+2*(0)))
                            else
                             gv(0,-1,0)=(f(j1+(0),i2m1+(1),i3+(0)))
                            end if
                        else
                          gv( 0,-1, 0)=f(j1,i2m1,i3)
                        end if
                        i2p1 = i2+1
                        if( i2p1.gt.n2b .or. mask(i1,i2p1,i3).le.0 )
     & then
                          ! f(j1,i2p1,i3)= extrap3(f,j1,i2p1,i3, 0,-1,0)
                          ! gv( 0,+1, 0)=extrap3(f,j1,i2p1,i3, 0,-1,0)
                            if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(
     & -1),i3+4*(0)).gt.0 )then
                             gv(0,+1,0)=(4.*f(j1+(0),i2p1+(-1),i3+(0))-
     & 6.*f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+4.*f(j1+3*(0),i2p1+3*(-1),
     & i3+3*(0))-f(j1+4*(0),i2p1+4*(-1),i3+4*(0)))
                            else if( mask(i1+  (0),i2p1+  (-1),i3+  (0)
     & ).gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 
     & .and.mask(i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                             gv(0,+1,0)=(3.*f(j1+(0),i2p1+(-1),i3+(0))-
     & 3.*f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+f(j1+3*(0),i2p1+3*(-1),i3+
     & 3*(0)))
                            else if( mask(i1+  (0),i2p1+  (-1),i3+  (0)
     & ).gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                             gv(0,+1,0)=(2.*f(j1+(0),i2p1+(-1),i3+(0))-
     & f(j1+2*(0),i2p1+2*(-1),i3+2*(0)))
                            else
                             gv(0,+1,0)=(f(j1+(0),i2p1+(-1),i3+(0)))
                            end if
                        else
                          gv( 0,+1, 0)=f(j1,i2p1,i3)
                        end if
                        ! gss=FSS(j1,i2,i3)
                        gss = ((gv(0,+1,0)-2.*gv(0,0,0)+gv(0,-1,0))*
     & h22(1))
                     ! gdExact(ntd,nxd,nyd,nzd,x,y,z,n,t,value)
                     ! call gdExact(0,1,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue0)
                     ! call gdExact(0,1,2,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue1)
                     ! call gdExact(0,3,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue2)
                     ! call gdExact(0,1,2,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue3)
                     ! write(*,'(''bcopt: i1,i2,i3, x,y, g,ge, gss,gsse ='',3i3,2f8.2,5f11.6)') i1,i2,i3,xy(i1,i2,i3,0),xy(i1,i2,i3,1),g,ue0,gss,ue1
                     ! write(*,'(''     : ffr, ffre ='',5f11.6)') ffr,ue2+ue3
                     ! ********************** TEMP ******************
                     ! g=ue0
                     ! gss=ue1
                     ! ffr=ue2+ue3
                     ! ********************************************
                     ur=( g - a0*u(i1,i2,i3) )/(a1*nsign)
                     gb= ffr - (gss - a0*ff )/(a1*nsign) ! This is u_xxx + a0/(a1*nsign)*( u_xx )
                     u(i1-is1,i2,i3) = (3.+br2*drn)/(3.-br2*drn)*u(i1+
     & is1,i2,i3)-2*br2*drn/(3.-br2*drn)*u(i1,i2,i3)+nsign*(gb*drn**3+
     & 6*ur*drn)/(3.-br2*drn)
                     u(i1-2*is1,i2,i3) = u(i1+2*is1,i2,i3) +16*br2*
     & drn/(3.-br2*drn)*u(i1+is1,i2,i3)-16*br2*drn/(3.-br2*drn)*u(i1,
     & i2,i3)+nsign*(12*ur*drn**2*br2+12*ur*drn+8*gb*drn**3)/(3.-br2*
     & drn)
                     ! call gdExact(0,0,0,0,xy(i1-is1,i2,i3,0),xy(i1-is1,i2,i3,1),0.,0,0.,ue0)
                     ! call gdExact(0,0,0,0,xy(i1-2*is1,i2,i3,0),xy(i1-2*is1,i2,i3,1),0.,0,0.,ue1)
                     ! write(*,'(''     : u(-1),ue(-1), u(-2),ue(-2) ='',5f11.6)') u(i1-is1,i2,i3),ue0, u(i1-2*is1,i2,i3),ue1
                     ! if( abs( u(i1-is1,i2,i3)-ue0).gt. .01 )then
                     !  write(*,'(''   BCOPT:ERROR  : u(-1),ue(-1), u(-2),ue(-2) ='',5f11.6)')u(i1-is1,i2,i3),ue0, u(i1-2*is1,i2,i3),ue1
                     ! else
                     !  ! u(i1-is1,i2,i3)=ue0
                     !  ! u(i1-2*is1,i2,i3) = ue1
                     ! end if
                   ! for testing: 
                   !  u(j1,j2,j3)=u(i1+is1,i2+is2,i3+is3)
                   !  u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*is3)
                    ! write(*,'(''bcopt: i1,i2,i3,g,ffr,gss,u,ur ='',3i3,6e12.3)') i1,i2,i3,g,ffr,gss,u(i1,i2,i3),ur,gb
                    ! write(*,'('' i1,i2,i3,f,f,f='',3i3,4e11.2)') i1,i2,i3,f(i1,i2,i3),f(i1+2*is1,i2+2*is2,i3),f(i1+is1,i2+is2,i3)
                    ! write(*,'('' u(-1),u(-2)='',4e11.2)') u(j1,j2,j3),u(i1-2*is1,i2-2*is2,i3-2*is3)
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                    ! write(*,'("NeumEqn: extrap interp-ghost i1,i2=",2i3," u(-1),u(-2)=",2e12.4)') i1,i2,u(i1-  is1,i2-  is2,i3-  is3),u(i1-2*is1,i2-2*is2,i3-2*is3)
                   end if
                 end do
                 end do
                 end do
                else
                  ! **** curvilinear case ****
                  if( axis.gt.1 )then
                    write(*,*) 'bcOpt:ERROR: this option not 
     & implemented yet'
                    write(*,*) 'axis=',axis
                    stop 12
                  end if
                  ! write(*,'("bcOpt:order4 neumannAndEqnEvenNewer (curv) grid=",i3," n1a,n1b,n2a,n2b=",4i3)') grid,n1a,n1b,n2a,n2b
                  nsign = 2*side-1
                  drn=dr(axis)
                  cf1=3.*nsign
                  alpha1=a1*nsign
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                    j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                    j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! the rhs for the mixed BC is stored in the ghost point value of f
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Curvilinear grids use dr:
                      g = f(j1,j2,j3)
                      ff= f(i1,i2,i3)
                        ! 2nd-order one sided:
                        ! ffr=is1*(-f(i1+2*is1,i2,i3)+4.*f(i1+is1,i2,i3)-3.*ff)*d12(0)  
                        ! 3rd-order one sided:
                        ffr=is1*(-11.*ff+18.*f(i1+is1,i2,i3)-9.*f(i1+2*
     & is1,i2,i3)+2.*f(i1+3*is1,i2,i3))/(6.*dr(0))
                        ! NOTE: the forcing f and g are only assumed to be given where mask>0
                        ! In order to compute tangential derivatives of the forcing we may need to fill in
                        ! neighbouring values of the forcing at interp and unused points
                        fv( 0, 0, 0) = f(i1,i2,i3)
                        gv( 0, 0, 0) = f(j1,i2,i3)
                        i2m1 = i2-1
                        if( i2m1.lt.n2a .or. mask(i1,i2m1,i3).le.0 )
     & then
                         ! NOTE: We DO need to extrap f and g 
                         ! f(i1,i2m1,i3)= extrap3(f,i1,i2m1,i3, 0,1,0)
                         ! f(j1,i2m1,i3)= extrap3(f,j1,i2m1,i3, 0,1,0)
                         ! fv( 0,-1, 0) = extrap3(f,i1,i2m1,i3, 0,1,0)
                         ! gv( 0,-1, 0) = extrap3(f,j1,i2m1,i3, 0,1,0)
                           if( mask(i1+  (0),i2m1+  (1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(1),i3+
     & 4*(0)).gt.0 )then
                            fv(0,-1,0)=(4.*f(i1+(0),i2m1+(1),i3+(0))-
     & 6.*f(i1+2*(0),i2m1+2*(1),i3+2*(0))+4.*f(i1+3*(0),i2m1+3*(1),i3+
     & 3*(0))-f(i1+4*(0),i2m1+4*(1),i3+4*(0)))
                           else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                            fv(0,-1,0)=(3.*f(i1+(0),i2m1+(1),i3+(0))-
     & 3.*f(i1+2*(0),i2m1+2*(1),i3+2*(0))+f(i1+3*(0),i2m1+3*(1),i3+3*(
     & 0)))
                           else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                            fv(0,-1,0)=(2.*f(i1+(0),i2m1+(1),i3+(0))-f(
     & i1+2*(0),i2m1+2*(1),i3+2*(0)))
                           else
                            fv(0,-1,0)=(f(i1+(0),i2m1+(1),i3+(0)))
                           end if
                           if( mask(i1+  (0),i2m1+  (1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(1),i3+
     & 4*(0)).gt.0 )then
                            gv(0,-1,0)=(4.*f(j1+(0),i2m1+(1),i3+(0))-
     & 6.*f(j1+2*(0),i2m1+2*(1),i3+2*(0))+4.*f(j1+3*(0),i2m1+3*(1),i3+
     & 3*(0))-f(j1+4*(0),i2m1+4*(1),i3+4*(0)))
                           else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                            gv(0,-1,0)=(3.*f(j1+(0),i2m1+(1),i3+(0))-
     & 3.*f(j1+2*(0),i2m1+2*(1),i3+2*(0))+f(j1+3*(0),i2m1+3*(1),i3+3*(
     & 0)))
                           else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                            gv(0,-1,0)=(2.*f(j1+(0),i2m1+(1),i3+(0))-f(
     & j1+2*(0),i2m1+2*(1),i3+2*(0)))
                           else
                            gv(0,-1,0)=(f(j1+(0),i2m1+(1),i3+(0)))
                           end if
                        else
                         fv( 0,-1, 0) = f(i1,i2m1,i3)
                         gv( 0,-1, 0) = f(j1,i2m1,i3)
                        end if
                        i2p1 = i2+1
                        if( i2p1.gt.n2b .or. mask(i1,i2p1,i3).le.0 )
     & then
                         !  f(i1,i2p1,i3)= extrap3(f,i1,i2p1,i3, 0,-1,0)
                         !  f(j1,i2p1,i3)= extrap3(f,j1,i2p1,i3, 0,-1,0)
                         ! fv( 0,+1, 0) = extrap3(f,i1,i2p1,i3, 0,-1,0)
                         ! gv( 0,+1, 0) = extrap3(f,j1,i2p1,i3, 0,-1,0)
                           if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(
     & -1),i3+4*(0)).gt.0 )then
                            fv(0,+1,0)=(4.*f(i1+(0),i2p1+(-1),i3+(0))-
     & 6.*f(i1+2*(0),i2p1+2*(-1),i3+2*(0))+4.*f(i1+3*(0),i2p1+3*(-1),
     & i3+3*(0))-f(i1+4*(0),i2p1+4*(-1),i3+4*(0)))
                           else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                            fv(0,+1,0)=(3.*f(i1+(0),i2p1+(-1),i3+(0))-
     & 3.*f(i1+2*(0),i2p1+2*(-1),i3+2*(0))+f(i1+3*(0),i2p1+3*(-1),i3+
     & 3*(0)))
                           else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                            fv(0,+1,0)=(2.*f(i1+(0),i2p1+(-1),i3+(0))-
     & f(i1+2*(0),i2p1+2*(-1),i3+2*(0)))
                           else
                            fv(0,+1,0)=(f(i1+(0),i2p1+(-1),i3+(0)))
                           end if
                           if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(
     & -1),i3+4*(0)).gt.0 )then
                            gv(0,+1,0)=(4.*f(j1+(0),i2p1+(-1),i3+(0))-
     & 6.*f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+4.*f(j1+3*(0),i2p1+3*(-1),
     & i3+3*(0))-f(j1+4*(0),i2p1+4*(-1),i3+4*(0)))
                           else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                            gv(0,+1,0)=(3.*f(j1+(0),i2p1+(-1),i3+(0))-
     & 3.*f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+f(j1+3*(0),i2p1+3*(-1),i3+
     & 3*(0)))
                           else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                            gv(0,+1,0)=(2.*f(j1+(0),i2p1+(-1),i3+(0))-
     & f(j1+2*(0),i2p1+2*(-1),i3+2*(0)))
                           else
                            gv(0,+1,0)=(f(j1+(0),i2p1+(-1),i3+(0)))
                           end if
                        else
                         fv( 0,+1, 0) = f(i1,i2p1,i3)
                         gv( 0,+1, 0) = f(j1,i2p1,i3)
                        end if
                        ! ffs= FS(i1,i2,i3)
                        ! gs = FS(j1,i2,i3)
                        ! gss=FSS(j1,i2,i3)
                        ffs = ((fv(0,+1,0)-fv(0,-1,0))*d12(1))
                        gs  = ((gv(0,+1,0)-gv(0,-1,0))*d12(1))
                        gss = ((gv(0,+1,0)-2.*gv(0,0,0)+gv(0,-1,0))*
     & d22(1))
                     ! NOTE: *** The next include file only works for Laplace equation ***
                      rxi=rx(i1,i2,i3)
                      ryi=ry(i1,i2,i3)
                      sxi=sx(i1,i2,i3)
                      syi=sy(i1,i2,i3)
                      rxr=rxr2(i1,i2,i3)
                      rxs=rxs2(i1,i2,i3)
                      ryr=ryr2(i1,i2,i3)
                      rys=rys2(i1,i2,i3)
                      sxr=sxr2(i1,i2,i3)
                      sxs=sxs2(i1,i2,i3)
                      syr=syr2(i1,i2,i3)
                      sys=sys2(i1,i2,i3)
                      rxx=rxx22(i1,i2,i3)
                      ryy=ryy22(i1,i2,i3)
                      rxrr=rxrr2(i1,i2,i3)
                      rxrs=rxrs2(i1,i2,i3)
                      rxss=rxss2(i1,i2,i3)
                      ryrr=ryrr2(i1,i2,i3)
                      ryrs=ryrs2(i1,i2,i3)
                      ryss=ryss2(i1,i2,i3)
                      sxx=sxx22(i1,i2,i3)
                      syy=syy22(i1,i2,i3)
                      sxrr=sxrr2(i1,i2,i3)
                      sxrs=sxrs2(i1,i2,i3)
                      sxss=sxss2(i1,i2,i3)
                      syrr=syrr2(i1,i2,i3)
                      syrs=syrs2(i1,i2,i3)
                      syss=syss2(i1,i2,i3)
                      rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                      ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                      rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                      ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                      sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                      syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                      sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                      syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                      alpha1=a1*nsign  ! nsign=2*side-1
                      alpha2=a1*nsign
                       rxNormI=1./sqrt(rxi**2+ryi**2)
                       rxNormIs=-(rxi*rxs+ryi*rys)*rxNormI**3
                       rxNormIss=-(rxi*rxss+ryi*ryss+rxs*rxs+rys*rys)*
     & rxNormI**3 -3.*(rxi*rxs+ryi*rys)*rxNormI**2*rxNormIs
                       n1=rxi*rxNormI
                       n1s=rxs*rxNormI + rxi*rxNormIs
                       n1ss=rxss*rxNormI + 2.*rxs*rxNormIs + rxi*
     & rxNormIss
                       n2=ryi*rxNormI
                       n2s=rys*rxNormI + ryi*rxNormIs
                       n2ss=ryss*rxNormI + 2.*rys*rxNormIs + ryi*
     & rxNormIss
                       an1=alpha1*(n1*rxi+n2*ryi)
                       an2=alpha2*(n1*sxi+n2*syi)
                       an1s=alpha1*(n1*rxs+n2*rys+n1s*rxi+n2s*ryi)
                       an1ss=alpha1*(n1*rxss+n2*ryss+2.*(n1s*rxs+n2s*
     & rys)+n1ss*rxi+n2ss*ryi)
                       an2s=alpha2*(n1*sxs+n2*sys + n1s*sxi+n2s*syi)
                       an2ss=alpha2*(n1*sxss+n2*syss + 2.*(n1s*sxs+n2s*
     & sys) + n1ss*sxi+n2ss*syi)
                      c11=rxi**2+ryi**2
                      c11r=2.*(rxi*rxr+ryi*ryr)
                      c11s=2.*(rxi*rxs+ryi*rys)
                      c12=2.*(rxi*sxi+ryi*syi)
                      c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                      c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                      c22=sxi**2+syi**2
                      c22r=2.*(sxi*sxr+syi*syr)
                      c22s=2.*(sxi*sxs+syi*sys)
                      c1=rxx+ryy
                      c1r=rxxr+ryyr
                      c1s=rxxs+ryys
                      c2=sxx+syy
                      c2r=sxxr+syyr
                      c2s=sxxs+syys
                      c0=0.
                      c0r=0.
                      c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                      b0=-(c12*c1*an1**2*an2*c0+c1s*an1*a0*c12**2*an2-
     & c22s*an1*c12**2*an1s*a0-c0s*an1**2*c12**2*an2+2*an2s*c12**3*
     & an1s*a0+c12**2*an1ss*a0*c22*an1-2*c12**2*an2s*c1*an1*a0-c0r*
     & an1**3*c11*c22+c0r*an1**2*c11*c12*an2+c1r*an1**2*c11*a0*c22-
     & c22r*an1**2*c11*c1*a0-c1r*an1*c11*a0*c12*an2-c12r*an1**2*c11*
     & an2*c0+c12r*an1*c11*an2*c1*a0-c2*an1**2*c11*an2*c0+c2*an1*c11*
     & an2*c1*a0+c22r*an1**3*c11*c0-c22**2*c11*an1ss*a0*an1+c22*c11*
     & c1*an1*a0**2-c22*c11*c12*an1s*a0**2-2*c22*c11*an2s*c0*an1**2+2*
     & c22**2*c11*an1s**2*a0-c12*c1s*an1**2*a0*c22-c12*c22s*an1**3*c0-
     & c12*c2*an1**3*c0-c12*c1**2*an1*an2*a0+c12*c2*an1**2*c1*a0+2*
     & c12**2*an2s*c0*an1**2-an1ss*a0*c12**3*an2-2*c12**2*an1s*an2*c0*
     & an1+c12**3*an1s*a0**2+2*c22*c11*an2s*c1*an1*a0-2*c22*c11*an2s*
     & c12*an1s*a0+c12*c12s*an1*an1s*a0*c22-c12*c12s*an1*an2*c1*a0+
     & c12*c0s*an1**3*c22+c12*c1*an1*an1s*a0*c22+c12**2*a0*c0*an1**2-
     & 2*c12**2*an1s**2*a0*c22-c12**2*c1*an1*a0**2+2*c12**2*an1s*an2*
     & c1*a0+c22r*an1*c11*c12*an1s*a0-c12r*an1*c11*an1s*a0*c22-c0*an1*
     & c11*a0*c12*an2-c2*an1*c11*an1s*a0*c22+c22*c11*an1ss*a0*c12*an2-
     & 2*c22*c11*an1s*an2*c1*a0+2*c22*c11*an1s*an2*c0*an1+c12*c12s*
     & an1**2*an2*c0+c12*c22s*an1**2*c1*a0-c2*an1*c12**2*an1s*a0)/an1*
     & *2/(c12*an2-c22*an1)/c11**2
                      b1=1/an1**2*(2*c12**2*an2s*c1*an1*an2+c12*c12s*
     & an1**2*an2s*c22+c12*c12s*an1**2*a0*c22+c22r*an1**2*c11*c12*a0-
     & c22r*an1*c11*c12*an1s*an2+c22r*an1**2*c11*c1*an2+c1r*an1*c11*
     & an2**2*c12-c1r*an1**2*c11*an2*c22-c12*c12s*an1**2*an2*c2-c12*
     & c12s*an1*an1s*an2*c22-c2r*an1**2*c11*c12*an2+c12**2*a0*c1*an1*
     & an2+3*c12**2*an1s*an2*c2*an1-2*c12**2*an1s*an2s*an1*c22+2*c12**
     & 3*an2s**2*an1-c12r*an1*c11*c1*an2**2-c2*an1*c11*c1*an2**2+c0*
     & an1*c11*an2**2*c12-c0*an1**2*c11*an2*c22+c12r*an1**2*c11*an2*
     & c2-3*c22*c11*an2s*c12*a0*an1+2*c22*c11*an2s*c12*an1s*an2+c2**2*
     & an1**2*c11*an2-c22*c11*c12*a0**2*an1+2*c22*c11*an1s*c1*an2**2-
     & c22*c11*an1ss*an2**2*c12-2*c22*c11*an2s*c1*an1*an2+c22*c11*
     & an2ss*an1*c12*an2+c22*c11*a0*c12*an1s*an2-c22*c11*an1s*an2*c2*
     & an1+2*c22**2*c11*an1s*an2s*an1+2*c22**2*c11*an1s*a0*an1+c22**2*
     & c11*an1ss*an2*an1+3*an2s*c12**3*a0*an1-2*an2s*c12**3*an1s*an2-
     & an2ss*an1*c12**3*an2+2*c12**2*an1s**2*an2*c22-2*c12**2*an1s*c1*
     & an2**2+c12*c1**2*an1*an2**2-c12*c0*an1**3*c22+c12*c22s*an1**3*
     & c2-2*c12**2*an1s*a0*an1*c22-c12**2*an1ss*an2*c22*an1-a0*c12**3*
     & an1s*an2+c12**2*an2ss*an1**2*c22-2*c12**2*a0*c2*an1**2-3*c12**
     & 2*an2s*c2*an1**2-2*c12*c1*an1**2*an2*c2+c12*c1*an1**2*an2s*c22+
     & c12*c1*an1**2*a0*c22-2*c22*c11*c12*an2s**2*an1+c22*c11*an2s*c2*
     & an1**2-c12*c22s*an1**2*c1*an2+c12*c1s*an1**2*an2*c22-c22*c11*
     & a0*c1*an1*an2-c12r*an1**2*c11*an2s*c22-c12r*an1**2*c11*a0*c22+
     & c12r*an1*c11*an1s*an2*c22+c22r*an1**2*c11*c12*an2s+c12**3*a0**
     & 2*an1-c12*c2s*an1**3*c22-c22**2*c11*an2ss*an1**2-2*c22**2*c11*
     & an1s**2*an2-c22r*an1**3*c11*c2+c2r*an1**3*c11*c22-c12*c1*an1*
     & an1s*an2*c22+c12*c12s*an1*c1*an2**2+c22s*an1*c12**2*an1s*an2-
     & c1s*an1*an2**2*c12**2+c2s*an1**2*c12**2*an2-c22s*an1**2*c12**2*
     & a0+c0*an1**2*c12**2*an2-c22s*an1**2*c12**2*an2s+c12*c2**2*an1**
     & 3+an1ss*an2**2*c12**3)/(c12*an2-c22*an1)/c11**2
                      br2=1/an1*(-c11s*an1*c12**2*an2+2*c12**2*an2s*
     & c11*an1+c12**2*a0*c11*an1+2*c12*c1*an1*an2*c11+c12*c12s*an1*
     & an2*c11-c12*c2*an1**2*c11-c12*c22s*an1**2*c11+c12*c11s*an1**2*
     & c22-2*c22*c11**2*an2s*an1-c22*c11**2*a0*an1+2*c22*c11**2*an1s*
     & an2-c1*an1**2*c11*c22-c2*an1*c11**2*an2+c22r*an1**2*c11**2-
     & c12r*an1*c11**2*an2+c11r*an1*c11*c12*an2-c11r*an1**2*c11*c22-2*
     & c12**2*an1s*an2*c11)/(c12*an2-c22*an1)/c11**2
                      b3=-(an2*c12**2-an2*c22*c11-c22*an1*c12)/an1/c11*
     & *2
                      bf=1/an1**2*(2*c12**2*an1s*an1*c22-c12*c1*an1**2*
     & c22-c12*c12s*an1**2*c22+2*c22*c11*an2s*c12*an1+c22*c11*a0*c12*
     & an1-2*c22**2*c11*an1s*an1+c2*an1**2*c11*c22+c12r*an1**2*c11*
     & c22-c22r*an1**2*c11*c12-2*an2s*c12**3*an1-a0*c12**3*an1+c2*an1*
     & *2*c12**2+c22s*an1**2*c12**2)/(c12*an2-c22*an1)/c11**2*gs+
     & 1/an1**2*(-c22*c11*an1*c12*an2+an1*c12**3*an2-c12**2*an1**2*
     & c22+c22**2*c11*an1**2)/(c12*an2-c22*an1)/c11**2*gss+1/an1**2*(-
     & 2*c12**2*an1s*an2*an1+c12*c1*an1**2*an2+c12*c12s*an1**2*an2+2*
     & c22*c11*an1s*an2*an1-c22*c11*a0*an1**2-2*c22*c11*an2s*an1**2-
     & c2*an1**2*c11*an2+c22r*an1**3*c11-c12r*an1**2*c11*an2+c12**2*
     & a0*an1**2+2*c12**2*an2s*an1**2-c12*c2*an1**3-c12*c22s*an1**3)/(
     & c12*an2-c22*an1)/c11**2*ff+1/an1**2*(-an1**2*c12**2*an2+c12*
     & an1**3*c22)/(c12*an2-c22*an1)/c11**2*ffs+1/an1**2*(-an1**3*c11*
     & c22+an1**2*c11*c12*an2)/(c12*an2-c22*an1)/c11**2*ffr+1/an1**2*(
     & -2*c12**2*an2s*c1*an1-c22s*an1*c12**2*an1s-c2*an1*c12**2*an1s+
     & c1s*an1*c12**2*an2-an1ss*c12**3*an2-2*c12**2*an1s**2*c22+c22r*
     & an1*c11*c12*an1s-c12r*an1*c11*an1s*c22+c12r*an1*c11*an2*c1-
     & c22r*an1**2*c11*c1-c0*an1*c11*c12*an2+2*an2s*c12**3*an1s-c2*
     & an1*c11*an1s*c22-c12*c1s*an1**2*c22+c12*c22s*an1**2*c1+c2*an1*
     & c11*an2*c1+c12**2*an1ss*c22*an1-c12**2*a0*c1*an1+c22*c11*an1ss*
     & c12*an2-2*c22*c11*an1s*an2*c1+c22*c11*a0*c1*an1-c22**2*c11*
     & an1ss*an1+c0*an1**2*c11*c22+c12*c12s*an1*an1s*c22-c12*c1**2*
     & an1*an2-c12*c12s*an1*an2*c1+c12*c2*an1**2*c1-2*c22*c11*an2s*
     & c12*an1s+a0*c12**3*an1s+c12*c1*an1*an1s*c22+2*c12**2*an1s*an2*
     & c1+2*c22**2*c11*an1s**2+2*c22*c11*an2s*c1*an1-c22*c11*a0*c12*
     & an1s-c1r*an1*c11*c12*an2+c1r*an1**2*c11*c22)/(c12*an2-c22*an1)
     & /c11**2*g
                     us=us4(i1,i2,i3)
                     ! uss=uss2(i1,i2,i3) 
                     usss=usss2(i1,i2,i3)
               ! *****************
               !$$$    ! gdExact(ntd,nxd,nyd,nzd,x,y,z,n,t,value)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue0)
               !$$$    
               !$$$    call gdExact(0,0,0,0,xy(i1-2,i2,i3,0),xy(i1-2,i2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1-1,i2,i3,0),xy(i1-1,i2,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1+1,i2,i3,0),xy(i1+1,i2,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1+2,i2,i3,0),xy(i1+2,i2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$
               !$$$    ure   = (ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(0))
               !$$$    urre=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(0)**2)
               !$$$    urrre = (-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(0)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-2,i3,0),xy(i1,i2-2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+2,i3,0),xy(i1,i2+2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$    use=(ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(1))
               !$$$    usse=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(1)**2)
               !$$$    ussse=(-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(1)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue4)
               !$$$    urse=(ue4-ue3-ue2+ue1)/(4.*dr(0)*dr(1))
               ! *****************
                     ur= (g - an2*us -a0*u(i1,i2,i3))/an1
                     gb=b0*u(i1,i2,i3)+b1*us+b3*usss+bf ! this is really: urrr+br2*urr
                 ! write(*,'("bcopt:side,is1=",i2,i3," i1,i2,i3=",3i3," b0,b1,b3,bf,br2 =",6f10.4)') side,is1,i1,i2,i3,b0,b1,b3,bf,br2
                 ! write(*,'("      g,gr,grr,ff,ffr,ffs    =",6f11.6)') g,gr,grr,ff,ffr,ffs
                 ! write(*,'("      an1,an2,an1r,an2r,an2rr  =",5f10.6)') an1,an2,an1r,an2r,an2rr
               !   urrree=b0*u(i1,i2,i3)+b1*use+b2*usse+b3*ussse+bf
               !
               !    write(*,'("  (x,y)=(",f6.3,",",f6.3,")  ur=",e11.3," exact=",e11.3," gb =",e11.3," exact=",e11.3," urrree=",e11.3)')!               xy(i1,i2,i3,0),xy(i1,i2,i3,1),ur,ure,gb,urrre,urrree
               !    write(*,'("  us=",e11.3," use=",e11.3," uss =",e11.3," usse=",e11.3," usss=",e11.3," ussse=",e11.3)') !     us,use,uss,usse,usss,ussse
               !
               !    urrf=( ff - (c12*urse +c22*usse + c1*ure + c2*use) )/c11
               !
               !    write(*,'(" c11,c12,c22,c1,c2=",5f10.3,"  urre=",e11.3," urrf=[ff- (c12*urs+...)]/c11=",e11.3') c11,c12,c22,c1,c2,urre,urrf
               !    write(*,'(" rxx,ryy,sxx,syy,rxr,rxs,ryr,rys=",8f10.3') rxx,ryy,sxx,syy,rxr,rxs,ryr,rys
                     ! write(*,'("bcopt:side=",i2," i1,i2,i3=",3i3," b0,b1,b3,bf,br2 =",6f10.4)') side,i1,i2,i3,b0,b1,b3,bf,br2
                     ! On side==1 we change the sign of br2 and the forcing
                     br2=-nsign*br2
                     u(i1-is1,i2,i3) = (3.+br2*drn)/(3.-br2*drn)*u(i1+
     & is1,i2,i3)-2*br2*drn/(3.-br2*drn)*u(i1,i2,i3)+nsign*(gb*drn**3+
     & 6*ur*drn)/(3.-br2*drn)
                     u(i1-2*is1,i2,i3) = u(i1+2*is1,i2,i3) +16*br2*
     & drn/(3.-br2*drn)*u(i1+is1,i2,i3)-16*br2*drn/(3.-br2*drn)*u(i1,
     & i2,i3)+nsign*(12*ur*drn**2*br2+12*ur*drn+8*gb*drn**3)/(3.-br2*
     & drn)
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                    ! write(*,'("NeumEqn: extrap interp-ghost i1,i2=",2i3," u(-1),u(-2)=",2e12.4)') i1,i2,u(i1-  is1,i2-  is2,i3-  is3),u(i1-2*is1,i2-2*is2,i3-2*is3)
                   end if
                 end do
                 end do
                 end do
                end if
              else
               ! assign 2-ghost and boundary pt
                if( gridType.eq.rectangular )then
                  if( a1.eq.0. )then
                    write(*,*) 'bcOpt:ERROR: a1=0!'
                    stop 2
                  end if
               !   write(*,'(''bcOpt:4th-order neumannPDE (rect) n2a,n2b='',2i3)') n2a,n2b
                  drn=dx(axis)
                  nsign = 2*side-1
                  br2=-nsign*a0/(a1*nsign)
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                   j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                   j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! the rhs for the mixed BC is stored in the ghost point value of 
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Cartesian grids use dx: 
                      g = f(j1,j2,j3)
                      ff=f(i1,i2,i3)
                        ! Note "g" is located on the ghost point "j1" of f
                        ! 2nd-order one sided:
                        ! ffr=(-f(i1+2*is1,i2,i3)+4.*f(i1+is1,i2,i3)-3.*ff)/(2.*dx(0))  
                        ! 3rd-order one sided: 100510 -- added is1
                        ffr=is1*(-11.*ff+18.*f(i1+is1,i2,i3)-9.*f(i1+2*
     & is1,i2,i3)+2.*f(i1+3*is1,i2,i3))/(6.*dx(0))
                        ! 100610: Check the mask for computing valid tangential derivatives:
                        ! NOTE: the forcing f and g are only assumed to be given where mask>0
                        ! In order to compute tangential derivatives of the forcing we may need to fill in
                        ! neighbouring values of the forcing at interp and unused points
                        gv( 0, 0, 0)=f(j1,i2,i3)
                        i2m1 = i2-1
                        if( i2m1.lt.n2a .or. mask(i1,i2m1,i3).le.0 )
     & then
                          ! f(j1,i2m1,i3)= extrap3(f,j1,i2m1,i3, 0,1,0)
                          ! gv( 0,-1, 0)=extrap3(f,j1,i2m1,i3, 0,1,0)
                          ! extrapWithMask
                            if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(
     & 1),i3+4*(0)).gt.0 )then
                             gv(0,-1,0)=(4.*f(j1+(0),i2m1+(1),i3+(0))-
     & 6.*f(j1+2*(0),i2m1+2*(1),i3+2*(0))+4.*f(j1+3*(0),i2m1+3*(1),i3+
     & 3*(0))-f(j1+4*(0),i2m1+4*(1),i3+4*(0)))
                            else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                             gv(0,-1,0)=(3.*f(j1+(0),i2m1+(1),i3+(0))-
     & 3.*f(j1+2*(0),i2m1+2*(1),i3+2*(0))+f(j1+3*(0),i2m1+3*(1),i3+3*(
     & 0)))
                            else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                             gv(0,-1,0)=(2.*f(j1+(0),i2m1+(1),i3+(0))-
     & f(j1+2*(0),i2m1+2*(1),i3+2*(0)))
                            else
                             gv(0,-1,0)=(f(j1+(0),i2m1+(1),i3+(0)))
                            end if
                        else
                          gv( 0,-1, 0)=f(j1,i2m1,i3)
                        end if
                        i2p1 = i2+1
                        if( i2p1.gt.n2b .or. mask(i1,i2p1,i3).le.0 )
     & then
                          ! f(j1,i2p1,i3)= extrap3(f,j1,i2p1,i3, 0,-1,0)
                          ! gv( 0,+1, 0)=extrap3(f,j1,i2p1,i3, 0,-1,0)
                            if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(
     & -1),i3+4*(0)).gt.0 )then
                             gv(0,+1,0)=(4.*f(j1+(0),i2p1+(-1),i3+(0))-
     & 6.*f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+4.*f(j1+3*(0),i2p1+3*(-1),
     & i3+3*(0))-f(j1+4*(0),i2p1+4*(-1),i3+4*(0)))
                            else if( mask(i1+  (0),i2p1+  (-1),i3+  (0)
     & ).gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 
     & .and.mask(i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                             gv(0,+1,0)=(3.*f(j1+(0),i2p1+(-1),i3+(0))-
     & 3.*f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+f(j1+3*(0),i2p1+3*(-1),i3+
     & 3*(0)))
                            else if( mask(i1+  (0),i2p1+  (-1),i3+  (0)
     & ).gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                             gv(0,+1,0)=(2.*f(j1+(0),i2p1+(-1),i3+(0))-
     & f(j1+2*(0),i2p1+2*(-1),i3+2*(0)))
                            else
                             gv(0,+1,0)=(f(j1+(0),i2p1+(-1),i3+(0)))
                            end if
                        else
                          gv( 0,+1, 0)=f(j1,i2p1,i3)
                        end if
                        ! gss=FSS(j1,i2,i3)
                        gss = ((gv(0,+1,0)-2.*gv(0,0,0)+gv(0,-1,0))*
     & h22(1))
                     ur=( g - a0*u(i1,i2,i3) )/(a1*nsign)
                     gb= ffr - (gss - a0*ff )/(a1*nsign) ! This is u_xxx + a0/(a1*nsign)*( u_xx )
                     u(i1-is1,i2,i3) = (3.+br2*drn)/(3.-br2*drn)*u(i1+
     & is1,i2,i3)-2*br2*drn/(3.-br2*drn)*u(i1,i2,i3)+nsign*(gb*drn**3+
     & 6*ur*drn)/(3.-br2*drn)
                     u(i1-2*is1,i2,i3) = u(i1+2*is1,i2,i3) +16*br2*
     & drn/(3.-br2*drn)*u(i1+is1,i2,i3)-16*br2*drn/(3.-br2*drn)*u(i1,
     & i2,i3)+nsign*(12*ur*drn**2*br2+12*ur*drn+8*gb*drn**3)/(3.-br2*
     & drn)
               !   write(*,'(''bcopt: i1,i2,i3,g,ffr,gss,u,uss ='',3i3,5f11.6)') i1,i2,i3,g,ffr,gss,u(i1,i2,i3),uss
               !  write(*,'('' i1,i2,i3,ur,urrr,ffr,gss ='',3i3,4e11.2)') i1,i2,i3,ur,urrr,ffr,gss
               !  write(*,'('' i1,i2,i3,f,f,f='',3i3,4e11.2)') i1,i2,i3,f(i1,i2,i3),f(i1+2*is1,i2+2*is2,i3),f(i1+is1,i2+is2,i3)
               !      u(j1,j2,j3)=u(i1+is1,i2+is2,i3+is3)
               !      u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*is3)
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                   end if
                 end do
                 end do
                 end do
                else
                  ! **** curvilinear case ****
                  if( axis.gt.1 )then
                    write(*,*) 'bcOpt:ERROR: this option not 
     & implemented yet'
                    write(*,*) 'axis=',axis
                    stop 12
                  end if
                  ! write(*,*) 'bcOpt:4th-order neumann (curvilinear- R)'
                  nsign = 2*side-1
                  drn=dr(axis)
                  cf1=3.*nsign
                  alpha1=a1*nsign
                  ma = m33-2*is1 - 2*5*is2  ! 2nd ghost
                  mb = m33-  is1 - 5*is2    ! 1st ghost
                  mc = m33                  ! diagonal
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                    j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                    j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! the rhs for the mixed BC is stored in the ghost point value of f
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Curvilinear grids use dr:
                      g = f(j1,j2,j3)
                      ff= f(i1,i2,i3)
                        ! 2nd-order one sided:
                        ! ffr=is1*(-f(i1+2*is1,i2,i3)+4.*f(i1+is1,i2,i3)-3.*ff)*d12(0)  
                        ! 3rd-order one sided:
                        ffr=is1*(-11.*ff+18.*f(i1+is1,i2,i3)-9.*f(i1+2*
     & is1,i2,i3)+2.*f(i1+3*is1,i2,i3))/(6.*dr(0))
                        ! NOTE: the forcing f and g are only assumed to be given where mask>0
                        ! In order to compute tangential derivatives of the forcing we may need to fill in
                        ! neighbouring values of the forcing at interp and unused points
                        fv( 0, 0, 0) = f(i1,i2,i3)
                        gv( 0, 0, 0) = f(j1,i2,i3)
                        i2m1 = i2-1
                        if( i2m1.lt.n2a .or. mask(i1,i2m1,i3).le.0 )
     & then
                         ! NOTE: We DO need to extrap f and g 
                         ! f(i1,i2m1,i3)= extrap3(f,i1,i2m1,i3, 0,1,0)
                         ! f(j1,i2m1,i3)= extrap3(f,j1,i2m1,i3, 0,1,0)
                         ! fv( 0,-1, 0) = extrap3(f,i1,i2m1,i3, 0,1,0)
                         ! gv( 0,-1, 0) = extrap3(f,j1,i2m1,i3, 0,1,0)
                           if( mask(i1+  (0),i2m1+  (1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(1),i3+
     & 4*(0)).gt.0 )then
                            fv(0,-1,0)=(4.*f(i1+(0),i2m1+(1),i3+(0))-
     & 6.*f(i1+2*(0),i2m1+2*(1),i3+2*(0))+4.*f(i1+3*(0),i2m1+3*(1),i3+
     & 3*(0))-f(i1+4*(0),i2m1+4*(1),i3+4*(0)))
                           else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                            fv(0,-1,0)=(3.*f(i1+(0),i2m1+(1),i3+(0))-
     & 3.*f(i1+2*(0),i2m1+2*(1),i3+2*(0))+f(i1+3*(0),i2m1+3*(1),i3+3*(
     & 0)))
                           else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                            fv(0,-1,0)=(2.*f(i1+(0),i2m1+(1),i3+(0))-f(
     & i1+2*(0),i2m1+2*(1),i3+2*(0)))
                           else
                            fv(0,-1,0)=(f(i1+(0),i2m1+(1),i3+(0)))
                           end if
                           if( mask(i1+  (0),i2m1+  (1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(1),i3+
     & 4*(0)).gt.0 )then
                            gv(0,-1,0)=(4.*f(j1+(0),i2m1+(1),i3+(0))-
     & 6.*f(j1+2*(0),i2m1+2*(1),i3+2*(0))+4.*f(j1+3*(0),i2m1+3*(1),i3+
     & 3*(0))-f(j1+4*(0),i2m1+4*(1),i3+4*(0)))
                           else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                            gv(0,-1,0)=(3.*f(j1+(0),i2m1+(1),i3+(0))-
     & 3.*f(j1+2*(0),i2m1+2*(1),i3+2*(0))+f(j1+3*(0),i2m1+3*(1),i3+3*(
     & 0)))
                           else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                            gv(0,-1,0)=(2.*f(j1+(0),i2m1+(1),i3+(0))-f(
     & j1+2*(0),i2m1+2*(1),i3+2*(0)))
                           else
                            gv(0,-1,0)=(f(j1+(0),i2m1+(1),i3+(0)))
                           end if
                        else
                         fv( 0,-1, 0) = f(i1,i2m1,i3)
                         gv( 0,-1, 0) = f(j1,i2m1,i3)
                        end if
                        i2p1 = i2+1
                        if( i2p1.gt.n2b .or. mask(i1,i2p1,i3).le.0 )
     & then
                         !  f(i1,i2p1,i3)= extrap3(f,i1,i2p1,i3, 0,-1,0)
                         !  f(j1,i2p1,i3)= extrap3(f,j1,i2p1,i3, 0,-1,0)
                         ! fv( 0,+1, 0) = extrap3(f,i1,i2p1,i3, 0,-1,0)
                         ! gv( 0,+1, 0) = extrap3(f,j1,i2p1,i3, 0,-1,0)
                           if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(
     & -1),i3+4*(0)).gt.0 )then
                            fv(0,+1,0)=(4.*f(i1+(0),i2p1+(-1),i3+(0))-
     & 6.*f(i1+2*(0),i2p1+2*(-1),i3+2*(0))+4.*f(i1+3*(0),i2p1+3*(-1),
     & i3+3*(0))-f(i1+4*(0),i2p1+4*(-1),i3+4*(0)))
                           else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                            fv(0,+1,0)=(3.*f(i1+(0),i2p1+(-1),i3+(0))-
     & 3.*f(i1+2*(0),i2p1+2*(-1),i3+2*(0))+f(i1+3*(0),i2p1+3*(-1),i3+
     & 3*(0)))
                           else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                            fv(0,+1,0)=(2.*f(i1+(0),i2p1+(-1),i3+(0))-
     & f(i1+2*(0),i2p1+2*(-1),i3+2*(0)))
                           else
                            fv(0,+1,0)=(f(i1+(0),i2p1+(-1),i3+(0)))
                           end if
                           if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(
     & -1),i3+4*(0)).gt.0 )then
                            gv(0,+1,0)=(4.*f(j1+(0),i2p1+(-1),i3+(0))-
     & 6.*f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+4.*f(j1+3*(0),i2p1+3*(-1),
     & i3+3*(0))-f(j1+4*(0),i2p1+4*(-1),i3+4*(0)))
                           else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                            gv(0,+1,0)=(3.*f(j1+(0),i2p1+(-1),i3+(0))-
     & 3.*f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+f(j1+3*(0),i2p1+3*(-1),i3+
     & 3*(0)))
                           else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                            gv(0,+1,0)=(2.*f(j1+(0),i2p1+(-1),i3+(0))-
     & f(j1+2*(0),i2p1+2*(-1),i3+2*(0)))
                           else
                            gv(0,+1,0)=(f(j1+(0),i2p1+(-1),i3+(0)))
                           end if
                        else
                         fv( 0,+1, 0) = f(i1,i2p1,i3)
                         gv( 0,+1, 0) = f(j1,i2p1,i3)
                        end if
                        ! ffs= FS(i1,i2,i3)
                        ! gs = FS(j1,i2,i3)
                        ! gss=FSS(j1,i2,i3)
                        ffs = ((fv(0,+1,0)-fv(0,-1,0))*d12(1))
                        gs  = ((gv(0,+1,0)-gv(0,-1,0))*d12(1))
                        gss = ((gv(0,+1,0)-2.*gv(0,0,0)+gv(0,-1,0))*
     & d22(1))
                      rxi=rx(i1,i2,i3)
                      ryi=ry(i1,i2,i3)
                      sxi=sx(i1,i2,i3)
                      syi=sy(i1,i2,i3)
                      rxr=rxr2(i1,i2,i3)
                      rxs=rxs2(i1,i2,i3)
                      ryr=ryr2(i1,i2,i3)
                      rys=rys2(i1,i2,i3)
                      sxr=sxr2(i1,i2,i3)
                      sxs=sxs2(i1,i2,i3)
                      syr=syr2(i1,i2,i3)
                      sys=sys2(i1,i2,i3)
                      rxx=rxx22(i1,i2,i3)
                      ryy=ryy22(i1,i2,i3)
                      rxrr=rxrr2(i1,i2,i3)
                      rxrs=rxrs2(i1,i2,i3)
                      rxss=rxss2(i1,i2,i3)
                      ryrr=ryrr2(i1,i2,i3)
                      ryrs=ryrs2(i1,i2,i3)
                      ryss=ryss2(i1,i2,i3)
                      sxx=sxx22(i1,i2,i3)
                      syy=syy22(i1,i2,i3)
                      sxrr=sxrr2(i1,i2,i3)
                      sxrs=sxrs2(i1,i2,i3)
                      sxss=sxss2(i1,i2,i3)
                      syrr=syrr2(i1,i2,i3)
                      syrs=syrs2(i1,i2,i3)
                      syss=syss2(i1,i2,i3)
                      rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                      ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                      rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                      ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                      sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                      syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                      sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                      syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                      alpha1=a1*nsign  ! nsign=2*side-1
                      alpha2=a1*nsign
                       rxNormI=1./sqrt(rxi**2+ryi**2)
                       rxNormIs=-(rxi*rxs+ryi*rys)*rxNormI**3
                       rxNormIss=-(rxi*rxss+ryi*ryss+rxs*rxs+rys*rys)*
     & rxNormI**3 -3.*(rxi*rxs+ryi*rys)*rxNormI**2*rxNormIs
                       n1=rxi*rxNormI
                       n1s=rxs*rxNormI + rxi*rxNormIs
                       n1ss=rxss*rxNormI + 2.*rxs*rxNormIs + rxi*
     & rxNormIss
                       n2=ryi*rxNormI
                       n2s=rys*rxNormI + ryi*rxNormIs
                       n2ss=ryss*rxNormI + 2.*rys*rxNormIs + ryi*
     & rxNormIss
                       an1=alpha1*(n1*rxi+n2*ryi)
                       an2=alpha2*(n1*sxi+n2*syi)
                       an1s=alpha1*(n1*rxs+n2*rys+n1s*rxi+n2s*ryi)
                       an1ss=alpha1*(n1*rxss+n2*ryss+2.*(n1s*rxs+n2s*
     & rys)+n1ss*rxi+n2ss*ryi)
                       an2s=alpha2*(n1*sxs+n2*sys + n1s*sxi+n2s*syi)
                       an2ss=alpha2*(n1*sxss+n2*syss + 2.*(n1s*sxs+n2s*
     & sys) + n1ss*sxi+n2ss*syi)
                      c11=rxi**2+ryi**2
                      c11r=2.*(rxi*rxr+ryi*ryr)
                      c11s=2.*(rxi*rxs+ryi*rys)
                      c12=2.*(rxi*sxi+ryi*syi)
                      c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                      c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                      c22=sxi**2+syi**2
                      c22r=2.*(sxi*sxr+syi*syr)
                      c22s=2.*(sxi*sxs+syi*sys)
                      c1=rxx+ryy
                      c1r=rxxr+ryyr
                      c1s=rxxs+ryys
                      c2=sxx+syy
                      c2r=sxxr+syyr
                      c2s=sxxs+syys
                      c0=0.
                      c0r=0.
                      c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                      b0=-(c12*c1*an1**2*an2*c0+c1s*an1*a0*c12**2*an2-
     & c22s*an1*c12**2*an1s*a0-c0s*an1**2*c12**2*an2+2*an2s*c12**3*
     & an1s*a0+c12**2*an1ss*a0*c22*an1-2*c12**2*an2s*c1*an1*a0-c0r*
     & an1**3*c11*c22+c0r*an1**2*c11*c12*an2+c1r*an1**2*c11*a0*c22-
     & c22r*an1**2*c11*c1*a0-c1r*an1*c11*a0*c12*an2-c12r*an1**2*c11*
     & an2*c0+c12r*an1*c11*an2*c1*a0-c2*an1**2*c11*an2*c0+c2*an1*c11*
     & an2*c1*a0+c22r*an1**3*c11*c0-c22**2*c11*an1ss*a0*an1+c22*c11*
     & c1*an1*a0**2-c22*c11*c12*an1s*a0**2-2*c22*c11*an2s*c0*an1**2+2*
     & c22**2*c11*an1s**2*a0-c12*c1s*an1**2*a0*c22-c12*c22s*an1**3*c0-
     & c12*c2*an1**3*c0-c12*c1**2*an1*an2*a0+c12*c2*an1**2*c1*a0+2*
     & c12**2*an2s*c0*an1**2-an1ss*a0*c12**3*an2-2*c12**2*an1s*an2*c0*
     & an1+c12**3*an1s*a0**2+2*c22*c11*an2s*c1*an1*a0-2*c22*c11*an2s*
     & c12*an1s*a0+c12*c12s*an1*an1s*a0*c22-c12*c12s*an1*an2*c1*a0+
     & c12*c0s*an1**3*c22+c12*c1*an1*an1s*a0*c22+c12**2*a0*c0*an1**2-
     & 2*c12**2*an1s**2*a0*c22-c12**2*c1*an1*a0**2+2*c12**2*an1s*an2*
     & c1*a0+c22r*an1*c11*c12*an1s*a0-c12r*an1*c11*an1s*a0*c22-c0*an1*
     & c11*a0*c12*an2-c2*an1*c11*an1s*a0*c22+c22*c11*an1ss*a0*c12*an2-
     & 2*c22*c11*an1s*an2*c1*a0+2*c22*c11*an1s*an2*c0*an1+c12*c12s*
     & an1**2*an2*c0+c12*c22s*an1**2*c1*a0-c2*an1*c12**2*an1s*a0)/an1*
     & *2/(c12*an2-c22*an1)/c11**2
                      b1=1/an1**2*(2*c12**2*an2s*c1*an1*an2+c12*c12s*
     & an1**2*an2s*c22+c12*c12s*an1**2*a0*c22+c22r*an1**2*c11*c12*a0-
     & c22r*an1*c11*c12*an1s*an2+c22r*an1**2*c11*c1*an2+c1r*an1*c11*
     & an2**2*c12-c1r*an1**2*c11*an2*c22-c12*c12s*an1**2*an2*c2-c12*
     & c12s*an1*an1s*an2*c22-c2r*an1**2*c11*c12*an2+c12**2*a0*c1*an1*
     & an2+3*c12**2*an1s*an2*c2*an1-2*c12**2*an1s*an2s*an1*c22+2*c12**
     & 3*an2s**2*an1-c12r*an1*c11*c1*an2**2-c2*an1*c11*c1*an2**2+c0*
     & an1*c11*an2**2*c12-c0*an1**2*c11*an2*c22+c12r*an1**2*c11*an2*
     & c2-3*c22*c11*an2s*c12*a0*an1+2*c22*c11*an2s*c12*an1s*an2+c2**2*
     & an1**2*c11*an2-c22*c11*c12*a0**2*an1+2*c22*c11*an1s*c1*an2**2-
     & c22*c11*an1ss*an2**2*c12-2*c22*c11*an2s*c1*an1*an2+c22*c11*
     & an2ss*an1*c12*an2+c22*c11*a0*c12*an1s*an2-c22*c11*an1s*an2*c2*
     & an1+2*c22**2*c11*an1s*an2s*an1+2*c22**2*c11*an1s*a0*an1+c22**2*
     & c11*an1ss*an2*an1+3*an2s*c12**3*a0*an1-2*an2s*c12**3*an1s*an2-
     & an2ss*an1*c12**3*an2+2*c12**2*an1s**2*an2*c22-2*c12**2*an1s*c1*
     & an2**2+c12*c1**2*an1*an2**2-c12*c0*an1**3*c22+c12*c22s*an1**3*
     & c2-2*c12**2*an1s*a0*an1*c22-c12**2*an1ss*an2*c22*an1-a0*c12**3*
     & an1s*an2+c12**2*an2ss*an1**2*c22-2*c12**2*a0*c2*an1**2-3*c12**
     & 2*an2s*c2*an1**2-2*c12*c1*an1**2*an2*c2+c12*c1*an1**2*an2s*c22+
     & c12*c1*an1**2*a0*c22-2*c22*c11*c12*an2s**2*an1+c22*c11*an2s*c2*
     & an1**2-c12*c22s*an1**2*c1*an2+c12*c1s*an1**2*an2*c22-c22*c11*
     & a0*c1*an1*an2-c12r*an1**2*c11*an2s*c22-c12r*an1**2*c11*a0*c22+
     & c12r*an1*c11*an1s*an2*c22+c22r*an1**2*c11*c12*an2s+c12**3*a0**
     & 2*an1-c12*c2s*an1**3*c22-c22**2*c11*an2ss*an1**2-2*c22**2*c11*
     & an1s**2*an2-c22r*an1**3*c11*c2+c2r*an1**3*c11*c22-c12*c1*an1*
     & an1s*an2*c22+c12*c12s*an1*c1*an2**2+c22s*an1*c12**2*an1s*an2-
     & c1s*an1*an2**2*c12**2+c2s*an1**2*c12**2*an2-c22s*an1**2*c12**2*
     & a0+c0*an1**2*c12**2*an2-c22s*an1**2*c12**2*an2s+c12*c2**2*an1**
     & 3+an1ss*an2**2*c12**3)/(c12*an2-c22*an1)/c11**2
                      br2=1/an1*(-c11s*an1*c12**2*an2+2*c12**2*an2s*
     & c11*an1+c12**2*a0*c11*an1+2*c12*c1*an1*an2*c11+c12*c12s*an1*
     & an2*c11-c12*c2*an1**2*c11-c12*c22s*an1**2*c11+c12*c11s*an1**2*
     & c22-2*c22*c11**2*an2s*an1-c22*c11**2*a0*an1+2*c22*c11**2*an1s*
     & an2-c1*an1**2*c11*c22-c2*an1*c11**2*an2+c22r*an1**2*c11**2-
     & c12r*an1*c11**2*an2+c11r*an1*c11*c12*an2-c11r*an1**2*c11*c22-2*
     & c12**2*an1s*an2*c11)/(c12*an2-c22*an1)/c11**2
                      b3=-(an2*c12**2-an2*c22*c11-c22*an1*c12)/an1/c11*
     & *2
                      bf=1/an1**2*(2*c12**2*an1s*an1*c22-c12*c1*an1**2*
     & c22-c12*c12s*an1**2*c22+2*c22*c11*an2s*c12*an1+c22*c11*a0*c12*
     & an1-2*c22**2*c11*an1s*an1+c2*an1**2*c11*c22+c12r*an1**2*c11*
     & c22-c22r*an1**2*c11*c12-2*an2s*c12**3*an1-a0*c12**3*an1+c2*an1*
     & *2*c12**2+c22s*an1**2*c12**2)/(c12*an2-c22*an1)/c11**2*gs+
     & 1/an1**2*(-c22*c11*an1*c12*an2+an1*c12**3*an2-c12**2*an1**2*
     & c22+c22**2*c11*an1**2)/(c12*an2-c22*an1)/c11**2*gss+1/an1**2*(-
     & 2*c12**2*an1s*an2*an1+c12*c1*an1**2*an2+c12*c12s*an1**2*an2+2*
     & c22*c11*an1s*an2*an1-c22*c11*a0*an1**2-2*c22*c11*an2s*an1**2-
     & c2*an1**2*c11*an2+c22r*an1**3*c11-c12r*an1**2*c11*an2+c12**2*
     & a0*an1**2+2*c12**2*an2s*an1**2-c12*c2*an1**3-c12*c22s*an1**3)/(
     & c12*an2-c22*an1)/c11**2*ff+1/an1**2*(-an1**2*c12**2*an2+c12*
     & an1**3*c22)/(c12*an2-c22*an1)/c11**2*ffs+1/an1**2*(-an1**3*c11*
     & c22+an1**2*c11*c12*an2)/(c12*an2-c22*an1)/c11**2*ffr+1/an1**2*(
     & -2*c12**2*an2s*c1*an1-c22s*an1*c12**2*an1s-c2*an1*c12**2*an1s+
     & c1s*an1*c12**2*an2-an1ss*c12**3*an2-2*c12**2*an1s**2*c22+c22r*
     & an1*c11*c12*an1s-c12r*an1*c11*an1s*c22+c12r*an1*c11*an2*c1-
     & c22r*an1**2*c11*c1-c0*an1*c11*c12*an2+2*an2s*c12**3*an1s-c2*
     & an1*c11*an1s*c22-c12*c1s*an1**2*c22+c12*c22s*an1**2*c1+c2*an1*
     & c11*an2*c1+c12**2*an1ss*c22*an1-c12**2*a0*c1*an1+c22*c11*an1ss*
     & c12*an2-2*c22*c11*an1s*an2*c1+c22*c11*a0*c1*an1-c22**2*c11*
     & an1ss*an1+c0*an1**2*c11*c22+c12*c12s*an1*an1s*c22-c12*c1**2*
     & an1*an2-c12*c12s*an1*an2*c1+c12*c2*an1**2*c1-2*c22*c11*an2s*
     & c12*an1s+a0*c12**3*an1s+c12*c1*an1*an1s*c22+2*c12**2*an1s*an2*
     & c1+2*c22**2*c11*an1s**2+2*c22*c11*an2s*c1*an1-c22*c11*a0*c12*
     & an1s-c1r*an1*c11*c12*an2+c1r*an1**2*c11*c22)/(c12*an2-c22*an1)
     & /c11**2*g
                     us=us4(i1,i2,i3)
                     ! uss=uss2(i1,i2,i3) 
                     usss=usss2(i1,i2,i3)
               ! *****************
               !$$$    ! gdExact(ntd,nxd,nyd,nzd,x,y,z,n,t,value)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue0)
               !$$$    
               !$$$    call gdExact(0,0,0,0,xy(i1-2,i2,i3,0),xy(i1-2,i2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1-1,i2,i3,0),xy(i1-1,i2,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1+1,i2,i3,0),xy(i1+1,i2,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1+2,i2,i3,0),xy(i1+2,i2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$
               !$$$    ure   = (ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(0))
               !$$$    urre=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(0)**2)
               !$$$    urrre = (-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(0)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-2,i3,0),xy(i1,i2-2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+2,i3,0),xy(i1,i2+2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$    use=(ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(1))
               !$$$    usse=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(1)**2)
               !$$$    ussse=(-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(1)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue4)
               !$$$    urse=(ue4-ue3-ue2+ue1)/(4.*dr(0)*dr(1))
               ! *****************
                   ! evaulate the defect when the 2-ghost pts and bndry pt are zero:
                   u(i1,i2,i3)=0.
                   u(i1-is1,i2-is2,i3)=0.
                   u(i1-2*is1,i2-2*is2,i3)=0.
                   gc=ff-op2d4(i1,i2,i3)
                   ca=c(ma,i1,i2,i3)
                   cb=c(mb,i1,i2,i3)
                   cc=c(mc,i1,i2,i3)
                     ga= (g - an2*us -a0*u(i1,i2,i3))/an1  ! ur
                     gb=b0*u(i1,i2,i3)+b1*us+b3*usss+bf ! this is really: urrr+br2*urr
                     ! write(*,'("bcopt:side=",i2," i1,i2,i3=",3i3," b0,b1,b3,bf,br2 =",6f10.4)') side,i1,i2,i3,b0,b1,b3,bf,br2
                     ! On side==1 we change the sign of br2 and the forcing
                     br2=-nsign*br2
                     ga=-nsign*ga
                     gb=-nsign*gb
                     u(i1-is1,i2,i3) = -(3*cc-16*br2*drn*ca+cc*br2*drn)
     & /(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1+is1,i2,i3)-
     & 2*br2*drn*ca/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(
     & i1+2*is1,i2,i3)-(24*br2*drn**2*ca*ga-cc*gb*drn**3-6*cc*ga*drn-
     & 2*br2*drn*gc)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)
                     u(i1-2*is1,i2,i3) = (-16*cc*br2*drn-16*br2*drn*cb)
     & /(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1+is1,i2,i3)+
     & (-3*cc+cc*br2*drn+2*br2*drn*cb)/(-3*cc+cc*br2*drn+16*br2*drn*
     & ca+2*br2*drn*cb)*u(i1+2*is1,i2,i3)+(16*br2*drn*gc+24*ga*drn**2*
     & br2*cb+8*cc*gb*drn**3+12*cc*ga*drn+12*ga*drn**2*cc*br2)/(-3*cc+
     & cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)
                     u(i1,i2,i3) = -cb/cc*u(i1-is1,i2,i3)-ca/cc*u(i1-2*
     & is1,i2,i3)+gc/cc
               !     write(*,'("neumannPDE:side=",i2," i1,i2,i3=",3i3," b0,b1,b3,bf,br2 =",6f10.4)') side,i1,i2,i3,b0,b1,b3,bf,br2
               !     write(*,'(" ca,cb,cc=",3e11.2,"   after: res(PDE) = ",6e10.2)') ca,cb,cc,op2d4(i1,i2,i3)-ff
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                   end if
                 end do
                 end do
                 end do
                end if
              end if
            else if( axis.eq.1 .and. nd.eq.2 )then
              if( solveEquationWithBC.eq.0 )then
                ! *wdh* 110213 -- FINISH ME for the heat operator 
                ! if( equationToSolve.ne.laplaceEquation .and. equationToSolve.ne.heatEquationOperator)then
                !   write(*,'("Ogmg:bcOpt:neumannAndEqn(order4):ERROR: only implemented for equation=laplace or heatEquationOperator")')
                if( equationToSolve.ne.laplaceEquation )then
                  write(*,'("Ogmg:bcOpt:neumannAndEqn(order4):ERROR: 
     & only implemented for equation=laplace")')
                  write(*,'("equationToSolve=",i2)') equationToSolve
                  write(*,'("gridType=",i2)') gridType
                  stop 6064
                end if
                if( gridType.eq.rectangular )then
                  if( a1.eq.0. )then
                    write(*,*) 'bcOpt:ERROR: a1=0!'
                    stop 2
                  end if
                  ! write(*,'("bcOpt:order4 neumannAndEqnEvenNewer (rect) grid=",i3," n1a,n1b,n2a,n2b=",4i3)') grid,n1a,n1b,n2a,n2b
                  drn=dx(axis)
                  nsign = 2*side-1
                  br2=-nsign*a0/(a1*nsign)
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                   j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                   j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! Note: the rhs for the mixed BC is stored in the ghost point value of f
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Cartesian grids use dx: 
                      g = f(j1,j2,j3)
                      ff=f(i1,i2,i3)
                        ! 2nd-order one sided:
                        ! ffs=(-f(i1,i2+2*is2,i3)+4.*f(i1,i2+is2,i3)-3.*ff)/(2.*dx(1)) 
                        ! 3rd-order one sided:
                        ffs=is2*(-11.*ff+18.*f(i1,i2+is2,i3)-9.*f(i1,
     & i2+2*is2,i3)+2.*f(i1,i2+3*is2,i3))/(6.*dx(1))
                        ! NOTE: the forcing f and g are only assumed to be given where mask>0
                        ! In order to compute tangential derivatives of the forcing we may need to fill in
                        ! neighbouring values of the forcing at interp and unused points
                        gv( 0, 0, 0)=f(i1,j2,i3)
                        i1m1 = i1-1
                        if( i1m1.lt.n1a .or. mask(i1m1,i2,i3).le.0 )
     & then
                         ! f(i1m1,j2,i3)= extrap3(f,i1m1,j2,i3, 1,0,0)
                         ! gv(-1, 0, 0) = extrap3(f,i1m1,j2,i3, 1,0,0)
                           if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                            gv(-1,0,0)=(4.*f(i1m1+(1),j2+(0),i3+(0))-
     & 6.*f(i1m1+2*(1),j2+2*(0),i3+2*(0))+4.*f(i1m1+3*(1),j2+3*(0),i3+
     & 3*(0))-f(i1m1+4*(1),j2+4*(0),i3+4*(0)))
                           else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                            gv(-1,0,0)=(3.*f(i1m1+(1),j2+(0),i3+(0))-
     & 3.*f(i1m1+2*(1),j2+2*(0),i3+2*(0))+f(i1m1+3*(1),j2+3*(0),i3+3*(
     & 0)))
                           else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                            gv(-1,0,0)=(2.*f(i1m1+(1),j2+(0),i3+(0))-f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0)))
                           else
                            gv(-1,0,0)=(f(i1m1+(1),j2+(0),i3+(0)))
                           end if
                        else
                          gv(-1, 0, 0) = f(i1m1,j2,i3)
                        end if
                        i1p1 = i1+1
                        if( i1p1.gt.n1b .or. mask(i1p1,i2,i3).le.0 )
     & then
                         ! f(i1p1,j2,i3)= extrap3(f,i1p1,j2,i3,-1,0,0)
                         ! gv(+1, 0, 0) = extrap3(f,i1p1,j2,i3,-1,0,0)
                           if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*
     & (0),i3+4*(0)).gt.0 )then
                            gv(+1,0,0)=(4.*f(i1p1+(-1),j2+(0),i3+(0))-
     & 6.*f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+4.*f(i1p1+3*(-1),j2+3*(0),
     & i3+3*(0))-f(i1p1+4*(-1),j2+4*(0),i3+4*(0)))
                           else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                            gv(+1,0,0)=(3.*f(i1p1+(-1),j2+(0),i3+(0))-
     & 3.*f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+f(i1p1+3*(-1),j2+3*(0),i3+
     & 3*(0)))
                           else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                            gv(+1,0,0)=(2.*f(i1p1+(-1),j2+(0),i3+(0))-
     & f(i1p1+2*(-1),j2+2*(0),i3+2*(0)))
                           else
                            gv(+1,0,0)=(f(i1p1+(-1),j2+(0),i3+(0)))
                           end if
                        else
                         gv(+1, 0, 0) = f(i1p1,j2,i3)
                        end if
                        ! grr=FRR(i1,j2,i3)
                        grr = ((gv(+1,0,0)-2.*gv(0,0,0)+gv(-1,0,0))*
     & h22(0))
                     us=( g - a0*u(i1,i2,i3) )/(a1*nsign)
                     gb= ffs - (grr - a0*ff )/(a1*nsign) ! This is u_yyy + a0/(a1*nsign)*( u_yy )
                     u(i1,i2-is2,i3) = (3.+br2*drn)/(3.-br2*drn)*u(i1,
     & i2+is2,i3)-2*br2*drn/(3.-br2*drn)*u(i1,i2,i3)+nsign*(gb*drn**3+
     & 6*us*drn)/(3.-br2*drn)
                     u(i1,i2-2*is2,i3) = u(i1,i2+2*is2,i3) +16*br2*
     & drn/(3.-br2*drn)*u(i1,i2+is2,i3)-16*br2*drn/(3.-br2*drn)*u(i1,
     & i2,i3)+nsign*(12*us*drn**2*br2+12*us*drn+8*gb*drn**3)/(3.-br2*
     & drn)
                   ! for testing: 
                   !  u(j1,j2,j3)=u(i1+is1,i2+is2,i3+is3)
                   !  u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*is3)
                    ! write(*,'(''bcopt: i1,i2,i3,g,ffs,grr,u,us ='',3i3,6e12.3)') i1,i2,i3,g,ffs,grr,u(i1,i2,i3),us,gb
                    ! write(*,'('' i1,i2,i3,f,f,f='',3i3,4e11.2)') i1,i2,i3,f(i1,i2,i3),f(i1+2*is1,i2+2*is2,i3),f(i1+is1,i2+is2,i3)
                    ! write(*,'('' u(-1),u(-2)='',4e11.2)') u(j1,j2,j3),u(i1-2*is1,i2-2*is2,i3-2*is3)
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                    ! write(*,'("NeumEqn: extrap interp-ghost i1,i2=",2i3," u(-1),u(-2)=",2e12.4)') i1,i2,u(i1-  is1,i2-  is2,i3-  is3),u(i1-2*is1,i2-2*is2,i3-2*is3)
                   end if
                 end do
                 end do
                 end do
                else
                  ! **** curvilinear case ****
                  if( axis.gt.1 )then
                    write(*,*) 'bcOpt:ERROR: this option not 
     & implemented yet'
                    write(*,*) 'axis=',axis
                    stop 12
                  end if
                  ! write(*,'("bcOpt:order4 neumannAndEqnEvenNewer (curv) grid=",i3," n1a,n1b,n2a,n2b=",4i3)') grid,n1a,n1b,n2a,n2b
                  nsign = 2*side-1
                  drn=dr(axis)
                  cf1=3.*nsign
                  alpha1=a1*nsign
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                    j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                    j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! the rhs for the mixed BC is stored in the ghost point value of f
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Curvilinear grids use dr:
                      g = f(j1,j2,j3)
                      ff= f(i1,i2,i3)
                        ! 2nd-order one sided:
                        ! is2*ffs=(-f(i1,i2+2*is2,i3)+4.*f(i1,i2+is2,i3)-3.*ff)*d12(1) 
                        ! 3rd-order one sided:
                        ffs=is2*(-11.*ff+18.*f(i1,i2+is2,i3)-9.*f(i1,
     & i2+2*is2,i3)+2.*f(i1,i2+3*is2,i3))/(6.*dr(1))
                        fv( 0, 0, 0) = f(i1,i2,i3)
                        gv( 0, 0, 0) = f(i1,j2,i3)
                        i1m1 = i1-1
                        if( i1m1.lt.n1a .or. mask(i1m1,i2,i3).le.0 )
     & then
                         ! f(i1m1,i2,i3)= extrap3(f,i1m1,i2,i3, 1,0,0)
                         ! f(i1m1,j2,i3)= extrap3(f,i1m1,j2,i3, 1,0,0)
                         ! fv(-1, 0, 0) = extrap3(f,i1m1,i2,i3, 1,0,0)
                         ! gv(-1, 0, 0) = extrap3(f,i1m1,j2,i3, 1,0,0)
                           if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                            fv(-1,0,0)=(4.*f(i1m1+(1),i2+(0),i3+(0))-
     & 6.*f(i1m1+2*(1),i2+2*(0),i3+2*(0))+4.*f(i1m1+3*(1),i2+3*(0),i3+
     & 3*(0))-f(i1m1+4*(1),i2+4*(0),i3+4*(0)))
                           else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                            fv(-1,0,0)=(3.*f(i1m1+(1),i2+(0),i3+(0))-
     & 3.*f(i1m1+2*(1),i2+2*(0),i3+2*(0))+f(i1m1+3*(1),i2+3*(0),i3+3*(
     & 0)))
                           else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                            fv(-1,0,0)=(2.*f(i1m1+(1),i2+(0),i3+(0))-f(
     & i1m1+2*(1),i2+2*(0),i3+2*(0)))
                           else
                            fv(-1,0,0)=(f(i1m1+(1),i2+(0),i3+(0)))
                           end if
                           if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                            gv(-1,0,0)=(4.*f(i1m1+(1),j2+(0),i3+(0))-
     & 6.*f(i1m1+2*(1),j2+2*(0),i3+2*(0))+4.*f(i1m1+3*(1),j2+3*(0),i3+
     & 3*(0))-f(i1m1+4*(1),j2+4*(0),i3+4*(0)))
                           else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                            gv(-1,0,0)=(3.*f(i1m1+(1),j2+(0),i3+(0))-
     & 3.*f(i1m1+2*(1),j2+2*(0),i3+2*(0))+f(i1m1+3*(1),j2+3*(0),i3+3*(
     & 0)))
                           else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                            gv(-1,0,0)=(2.*f(i1m1+(1),j2+(0),i3+(0))-f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0)))
                           else
                            gv(-1,0,0)=(f(i1m1+(1),j2+(0),i3+(0)))
                           end if
                        else
                         fv(-1, 0, 0) = f(i1m1,i2,i3)
                         gv(-1, 0, 0) = f(i1m1,j2,i3)
                        end if
                        i1p1 = i1+1
                        if( i1p1.gt.n1b .or. mask(i1p1,i2,i3).le.0 )
     & then
                         ! f(i1p1,i2,i3)= extrap3(f,i1p1,i2,i3,-1,0,0)
                         ! f(i1p1,j2,i3)= extrap3(f,i1p1,j2,i3,-1,0,0)
                         ! fv(+1, 0, 0) = extrap3(f,i1p1,i2,i3,-1,0,0)
                         ! gv(+1, 0, 0) = extrap3(f,i1p1,j2,i3,-1,0,0)
                           if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*
     & (0),i3+4*(0)).gt.0 )then
                            fv(+1,0,0)=(4.*f(i1p1+(-1),i2+(0),i3+(0))-
     & 6.*f(i1p1+2*(-1),i2+2*(0),i3+2*(0))+4.*f(i1p1+3*(-1),i2+3*(0),
     & i3+3*(0))-f(i1p1+4*(-1),i2+4*(0),i3+4*(0)))
                           else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                            fv(+1,0,0)=(3.*f(i1p1+(-1),i2+(0),i3+(0))-
     & 3.*f(i1p1+2*(-1),i2+2*(0),i3+2*(0))+f(i1p1+3*(-1),i2+3*(0),i3+
     & 3*(0)))
                           else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                            fv(+1,0,0)=(2.*f(i1p1+(-1),i2+(0),i3+(0))-
     & f(i1p1+2*(-1),i2+2*(0),i3+2*(0)))
                           else
                            fv(+1,0,0)=(f(i1p1+(-1),i2+(0),i3+(0)))
                           end if
                           if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*
     & (0),i3+4*(0)).gt.0 )then
                            gv(+1,0,0)=(4.*f(i1p1+(-1),j2+(0),i3+(0))-
     & 6.*f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+4.*f(i1p1+3*(-1),j2+3*(0),
     & i3+3*(0))-f(i1p1+4*(-1),j2+4*(0),i3+4*(0)))
                           else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                            gv(+1,0,0)=(3.*f(i1p1+(-1),j2+(0),i3+(0))-
     & 3.*f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+f(i1p1+3*(-1),j2+3*(0),i3+
     & 3*(0)))
                           else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                            gv(+1,0,0)=(2.*f(i1p1+(-1),j2+(0),i3+(0))-
     & f(i1p1+2*(-1),j2+2*(0),i3+2*(0)))
                           else
                            gv(+1,0,0)=(f(i1p1+(-1),j2+(0),i3+(0)))
                           end if
                        else
                         fv(+1, 0, 0) = f(i1p1,i2,i3)
                         gv(+1, 0, 0) = f(i1p1,j2,i3)
                        end if
                        ! ffr= FR(i1,i2,i3)
                        ! gr = FR(i1,j2,i3)
                        ! grr=FRR(i1,j2,i3)
                        ffr = ((fv(+1,0,0)-fv(-1,0,0))*d12(0))
                        gr  = ((gv(+1,0,0)-gv(-1,0,0))*d12(0))
                        grr = ((gv(+1,0,0)-2.*gv(0,0,0)+gv(-1,0,0))*
     & d22(0))
                      rxi=rx(i1,i2,i3)
                      ryi=ry(i1,i2,i3)
                      sxi=sx(i1,i2,i3)
                      syi=sy(i1,i2,i3)
                      rxr=rxr2(i1,i2,i3)
                      rxs=rxs2(i1,i2,i3)
                      ryr=ryr2(i1,i2,i3)
                      rys=rys2(i1,i2,i3)
                      sxr=sxr2(i1,i2,i3)
                      sxs=sxs2(i1,i2,i3)
                      syr=syr2(i1,i2,i3)
                      sys=sys2(i1,i2,i3)
                      rxx=rxx22(i1,i2,i3)
                      ryy=ryy22(i1,i2,i3)
                      rxrr=rxrr2(i1,i2,i3)
                      rxrs=rxrs2(i1,i2,i3)
                      rxss=rxss2(i1,i2,i3)
                      ryrr=ryrr2(i1,i2,i3)
                      ryrs=ryrs2(i1,i2,i3)
                      ryss=ryss2(i1,i2,i3)
                      sxx=sxx22(i1,i2,i3)
                      syy=syy22(i1,i2,i3)
                      sxrr=sxrr2(i1,i2,i3)
                      sxrs=sxrs2(i1,i2,i3)
                      sxss=sxss2(i1,i2,i3)
                      syrr=syrr2(i1,i2,i3)
                      syrs=syrs2(i1,i2,i3)
                      syss=syss2(i1,i2,i3)
                      rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                      ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                      rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                      ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                      sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                      syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                      sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                      syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                      alpha1=a1*nsign  ! nsign=2*side-1
                      alpha2=a1*nsign
                       sxNormI=1./sqrt(sxi**2+syi**2)
                       sxNormIr=-(sxi*sxr+syi*syr)*sxNormI**3
                       sxNormIrr=-(sxi*sxrr+syi*syrr+sxr*sxr+syr*syr)*
     & sxNormI**3 -3.*(sxi*sxr+syi*syr)*sxNormI**2*sxNormIr
                       n1=sxi*sxNormI
                       n1r=sxr*sxNormI + sxi*sxNormIr
                       n1rr=sxrr*sxNormI + 2.*sxr*sxNormIr + sxi*
     & sxNormIrr
                       n2=syi*sxNormI
                       n2r=syr*sxNormI + syi*sxNormIr
                       n2rr=syrr*sxNormI + 2.*syr*sxNormIr + syi*
     & sxNormIrr
                       an1=alpha1*(n1*rxi+n2*ryi)
                       an2=alpha2*(n1*sxi+n2*syi)
                       an1r=alpha1*(n1*rxr+n1r*rxi + n2*ryr+n2r*ryi)
                       an1rr=alpha1*(n1*rxrr+n2*ryrr+ 2.*(n1r*rxr+n2r*
     & ryr) + n1rr*rxi+n2rr*ryi)
                       an2r=alpha2*(n1*sxr+n1r*sxi + n2*syr+n2r*syi)
                       an2rr=alpha2*(n1*sxrr+n2*syrr+ 2.*(n1r*sxr+n2r*
     & syr) + n1rr*sxi+n2rr*syi)
                      c11=rxi**2+ryi**2
                      c11r=2.*(rxi*rxr+ryi*ryr)
                      c11s=2.*(rxi*rxs+ryi*rys)
                      c12=2.*(rxi*sxi+ryi*syi)
                      c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                      c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                      c22=sxi**2+syi**2
                      c22r=2.*(sxi*sxr+syi*syr)
                      c22s=2.*(sxi*sxs+syi*sys)
                      c1=rxx+ryy
                      c1r=rxxr+ryyr
                      c1s=rxxs+ryys
                      c2=sxx+syy
                      c2r=sxxr+syyr
                      c2s=sxxs+syys
                      c0=0.
                      c0r=0.
                      c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                      b0=-(c12*c2*an2**2*an1*c0+c2r*an2*a0*c12**2*an1-
     & c11r*an2*c12**2*an2r*a0-c0r*an2**2*c12**2*an1+2*an1r*c12**3*
     & an2r*a0+c12**2*an2rr*a0*c11*an2-2*c12**2*an1r*c2*an2*a0-c0s*
     & an2**3*c22*c11+c0s*an2**2*c22*c12*an1+c2s*an2**2*c22*a0*c11-
     & c11s*an2**2*c22*c2*a0-c2s*an2*c22*a0*c12*an1-c12s*an2**2*c22*
     & an1*c0+c12s*an2*c22*an1*c2*a0-c1*an2**2*c22*an1*c0+c1*an2*c22*
     & an1*c2*a0+c11s*an2**3*c22*c0-c11**2*c22*an2rr*a0*an2+c11*c22*
     & c2*an2*a0**2-c11*c22*c12*an2r*a0**2-2*c11*c22*an1r*c0*an2**2+2*
     & c11**2*c22*an2r**2*a0-c12*c2r*an2**2*a0*c11-c12*c11r*an2**3*c0-
     & c12*c1*an2**3*c0-c12*c2**2*an2*an1*a0+c12*c1*an2**2*c2*a0+2*
     & c12**2*an1r*c0*an2**2-an2rr*a0*c12**3*an1-2*c12**2*an2r*an1*c0*
     & an2+c12**3*an2r*a0**2+2*c11*c22*an1r*c2*an2*a0-2*c11*c22*an1r*
     & c12*an2r*a0+c12*c12r*an2*an2r*a0*c11-c12*c12r*an2*an1*c2*a0+
     & c12*c0r*an2**3*c11+c12*c2*an2*an2r*a0*c11+c12**2*a0*c0*an2**2-
     & 2*c12**2*an2r**2*a0*c11-c12**2*c2*an2*a0**2+2*c12**2*an2r*an1*
     & c2*a0+c11s*an2*c22*c12*an2r*a0-c12s*an2*c22*an2r*a0*c11-c0*an2*
     & c22*a0*c12*an1-c1*an2*c22*an2r*a0*c11+c11*c22*an2rr*a0*c12*an1-
     & 2*c11*c22*an2r*an1*c2*a0+2*c11*c22*an2r*an1*c0*an2+c12*c12r*
     & an2**2*an1*c0+c12*c11r*an2**2*c2*a0-c1*an2*c12**2*an2r*a0)/an2*
     & *2/(c12*an1-c11*an2)/c22**2
                      b1=1/an2**2*(2*c12**2*an1r*c2*an2*an1+c12*c12r*
     & an2**2*an1r*c11+c12*c12r*an2**2*a0*c11+c11s*an2**2*c22*c12*a0-
     & c11s*an2*c22*c12*an2r*an1+c11s*an2**2*c22*c2*an1+c2s*an2*c22*
     & an1**2*c12-c2s*an2**2*c22*an1*c11-c12*c12r*an2**2*an1*c1-c12*
     & c12r*an2*an2r*an1*c11-c1s*an2**2*c22*c12*an1+c12**2*a0*c2*an2*
     & an1+3*c12**2*an2r*an1*c1*an2-2*c12**2*an2r*an1r*an2*c11+2*c12**
     & 3*an1r**2*an2-c12s*an2*c22*c2*an1**2-c1*an2*c22*c2*an1**2+c0*
     & an2*c22*an1**2*c12-c0*an2**2*c22*an1*c11+c12s*an2**2*c22*an1*
     & c1-3*c11*c22*an1r*c12*a0*an2+2*c11*c22*an1r*c12*an2r*an1+c1**2*
     & an2**2*c22*an1-c11*c22*c12*a0**2*an2+2*c11*c22*an2r*c2*an1**2-
     & c11*c22*an2rr*an1**2*c12-2*c11*c22*an1r*c2*an2*an1+c11*c22*
     & an1rr*an2*c12*an1+c11*c22*a0*c12*an2r*an1-c11*c22*an2r*an1*c1*
     & an2+2*c11**2*c22*an2r*an1r*an2+2*c11**2*c22*an2r*a0*an2+c11**2*
     & c22*an2rr*an1*an2+3*an1r*c12**3*a0*an2-2*an1r*c12**3*an2r*an1-
     & an1rr*an2*c12**3*an1+2*c12**2*an2r**2*an1*c11-2*c12**2*an2r*c2*
     & an1**2+c12*c2**2*an2*an1**2-c12*c0*an2**3*c11+c12*c11r*an2**3*
     & c1-2*c12**2*an2r*a0*an2*c11-c12**2*an2rr*an1*c11*an2-a0*c12**3*
     & an2r*an1+c12**2*an1rr*an2**2*c11-2*c12**2*a0*c1*an2**2-3*c12**
     & 2*an1r*c1*an2**2-2*c12*c2*an2**2*an1*c1+c12*c2*an2**2*an1r*c11+
     & c12*c2*an2**2*a0*c11-2*c11*c22*c12*an1r**2*an2+c11*c22*an1r*c1*
     & an2**2-c12*c11r*an2**2*c2*an1+c12*c2r*an2**2*an1*c11-c11*c22*
     & a0*c2*an2*an1-c12s*an2**2*c22*an1r*c11-c12s*an2**2*c22*a0*c11+
     & c12s*an2*c22*an2r*an1*c11+c11s*an2**2*c22*c12*an1r+c12**3*a0**
     & 2*an2-c12*c1r*an2**3*c11-c11**2*c22*an1rr*an2**2-2*c11**2*c22*
     & an2r**2*an1-c11s*an2**3*c22*c1+c1s*an2**3*c22*c11-c12*c2*an2*
     & an2r*an1*c11+c12*c12r*an2*c2*an1**2+c11r*an2*c12**2*an2r*an1-
     & c2r*an2*an1**2*c12**2+c1r*an2**2*c12**2*an1-c11r*an2**2*c12**2*
     & a0+c0*an2**2*c12**2*an1-c11r*an2**2*c12**2*an1r+c12*c1**2*an2**
     & 3+an2rr*an1**2*c12**3)/(c12*an1-c11*an2)/c22**2
                      br2=1/an2*(-c22r*an2*c12**2*an1+2*c12**2*an1r*
     & c22*an2+c12**2*a0*c22*an2+2*c12*c2*an2*an1*c22+c12*c12r*an2*
     & an1*c22-c12*c1*an2**2*c22-c12*c11r*an2**2*c22+c12*c22r*an2**2*
     & c11-2*c11*c22**2*an1r*an2-c11*c22**2*a0*an2+2*c11*c22**2*an2r*
     & an1-c2*an2**2*c22*c11-c1*an2*c22**2*an1+c11s*an2**2*c22**2-
     & c12s*an2*c22**2*an1+c22s*an2*c22*c12*an1-c22s*an2**2*c22*c11-2*
     & c12**2*an2r*an1*c22)/(c12*an1-c11*an2)/c22**2
                      b3=-(an1*c12**2-an1*c11*c22-c11*an2*c12)/an2/c22*
     & *2
                      bf=1/an2**2*(2*c12**2*an2r*an2*c11-c12*c2*an2**2*
     & c11-c12*c12r*an2**2*c11+2*c11*c22*an1r*c12*an2+c11*c22*a0*c12*
     & an2-2*c11**2*c22*an2r*an2+c1*an2**2*c22*c11+c12s*an2**2*c22*
     & c11-c11s*an2**2*c22*c12-2*an1r*c12**3*an2-a0*c12**3*an2+c1*an2*
     & *2*c12**2+c11r*an2**2*c12**2)/(c12*an1-c11*an2)/c22**2*gr+
     & 1/an2**2*(-c11*c22*an2*c12*an1+an2*c12**3*an1-c12**2*an2**2*
     & c11+c11**2*c22*an2**2)/(c12*an1-c11*an2)/c22**2*grr+1/an2**2*(-
     & 2*c12**2*an2r*an1*an2+c12*c2*an2**2*an1+c12*c12r*an2**2*an1+2*
     & c11*c22*an2r*an1*an2-c11*c22*a0*an2**2-2*c11*c22*an1r*an2**2-
     & c1*an2**2*c22*an1+c11s*an2**3*c22-c12s*an2**2*c22*an1+c12**2*
     & a0*an2**2+2*c12**2*an1r*an2**2-c12*c1*an2**3-c12*c11r*an2**3)/(
     & c12*an1-c11*an2)/c22**2*ff+1/an2**2*(-an2**2*c12**2*an1+c12*
     & an2**3*c11)/(c12*an1-c11*an2)/c22**2*ffr+1/an2**2*(-an2**3*c22*
     & c11+an2**2*c22*c12*an1)/(c12*an1-c11*an2)/c22**2*ffs+1/an2**2*(
     & -2*c12**2*an1r*c2*an2-c11r*an2*c12**2*an2r-c1*an2*c12**2*an2r+
     & c2r*an2*c12**2*an1-an2rr*c12**3*an1-2*c12**2*an2r**2*c11+c11s*
     & an2*c22*c12*an2r-c12s*an2*c22*an2r*c11+c12s*an2*c22*an1*c2-
     & c11s*an2**2*c22*c2-c0*an2*c22*c12*an1+2*an1r*c12**3*an2r-c1*
     & an2*c22*an2r*c11-c12*c2r*an2**2*c11+c12*c11r*an2**2*c2+c1*an2*
     & c22*an1*c2+c12**2*an2rr*c11*an2-c12**2*a0*c2*an2+c11*c22*an2rr*
     & c12*an1-2*c11*c22*an2r*an1*c2+c11*c22*a0*c2*an2-c11**2*c22*
     & an2rr*an2+c0*an2**2*c22*c11+c12*c12r*an2*an2r*c11-c12*c2**2*
     & an2*an1-c12*c12r*an2*an1*c2+c12*c1*an2**2*c2-2*c11*c22*an1r*
     & c12*an2r+a0*c12**3*an2r+c12*c2*an2*an2r*c11+2*c12**2*an2r*an1*
     & c2+2*c11**2*c22*an2r**2+2*c11*c22*an1r*c2*an2-c11*c22*a0*c12*
     & an2r-c2s*an2*c22*c12*an1+c2s*an2**2*c22*c11)/(c12*an1-c11*an2)
     & /c22**2*g
                     ur=ur4(i1,i2,i3)
                     ! urr=urr2(i1,i2,i3)  ! need to 2nd-order
                     urrr=urrr2(i1,i2,i3)
               ! *****************
               !$$$    ! gdExact(ntd,nxd,nyd,nzd,x,y,z,n,t,value)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue0)
               !$$$    
               !$$$    call gdExact(0,0,0,0,xy(i1-2,i2,i3,0),xy(i1-2,i2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1-1,i2,i3,0),xy(i1-1,i2,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1+1,i2,i3,0),xy(i1+1,i2,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1+2,i2,i3,0),xy(i1+2,i2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$
               !$$$    ure   = (ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(0))
               !$$$    urre=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(0)**2)
               !$$$    urrre = (-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(0)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-2,i3,0),xy(i1,i2-2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+2,i3,0),xy(i1,i2+2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$    use=(ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(1))
               !$$$    usse=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(1)**2)
               !$$$    ussse=(-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(1)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue4)
               !$$$    urse=(ue4-ue3-ue2+ue1)/(4.*dr(0)*dr(1))
               ! *****************
                     us= (g - an1*ur -a0*u(i1,i2,i3))/an2
                     gb=b0*u(i1,i2,i3)+b1*ur+b3*urrr+bf ! this is: usss+br2*uss
                     ! On side==1 we change the sign of br2 and the forcing
                     br2=-nsign*br2
                     u(i1,i2-is2,i3) = (3.+br2*drn)/(3.-br2*drn)*u(i1,
     & i2+is2,i3)-2*br2*drn/(3.-br2*drn)*u(i1,i2,i3)+nsign*(gb*drn**3+
     & 6*us*drn)/(3.-br2*drn)
                     u(i1,i2-2*is2,i3) = u(i1,i2+2*is2,i3) +16*br2*
     & drn/(3.-br2*drn)*u(i1,i2+is2,i3)-16*br2*drn/(3.-br2*drn)*u(i1,
     & i2,i3)+nsign*(12*us*drn**2*br2+12*us*drn+8*gb*drn**3)/(3.-br2*
     & drn)
               !   usssee=b0*u(i1,i2,i3)+b1*ure+b2*urre+b3*urrre+bf
                 ! write(*,'(''bcopt: i1,i2,i3,g,ffs,grr,u,us ='',3i3,6e12.3)') i1,i2,i3,g,ffs,grr,u(i1,i2,i3),us,gb
                 ! write(*,'('' u(-1),u(-2)='',4e11.2)') u(i1,i2-is2,i3),u(i1,i2-2*is2,i3)
               !  write(*,'(''bcopt:side='',i2,'' i1,i2,i3,g,ff ='',3i3,2f10.4)') side,i1,i2,i3,g,ff
               !  write(*,'("  (x,y)=(",f6.3,",",f6.3,")  us=",e11.3," use=",e11.3," usss =",e11.3," ussse=",e11.3," usssee=",e11.3)')!            xy(i1,i2,i3,0),xy(i1,i2,i3,1),us,use,usss,ussse,usssee
               !  write(*,'("  ur=",e11.3," ure=",e11.3," urr =",e11.3," urre=",e11.3," urrr=",e11.3," urrre=",e11.3)') !     ur,ure,urr,urre,urrr,urrre
               !  ussf=( ff - (c12*urse +c11*urre + c1*ure + c2*use) )/c22
               !  write(*,'(" c11,c12,c22,c1,c2=",5f9.3,"  usse=",e11.3," ussf=[ff- (c12*urs+...)]/c22=",e11.3') c11,c12,c22,c1,c2,usse,ussf
               !    write(*,'(" rxx,ryy,sxx,syy,rxr,rxs,ryr,rys=",8f10.3') rxx,ryy,sxx,syy,rxr,rxs,ryr,rys
               !  usss=ussse
               !**      u(i1-is1,i2-is2,i3-is3)=u(i1+is1,i2+is2,i3+is3)+cf1*usss+cg1*us
               !**      u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*is3)+cf2*usss+cg2*us
               !   call gdExact(0,0,0,0,xy(i1,i2-  is2,i3,0),xy(i1,i2-  is2,i3,1),0.,0,0.,ue1)
               !   call gdExact(0,0,0,0,xy(i1,i2-2*is2,i3,0),xy(i1,i2-2*is2,i3,1),0.,0,0.,ue2)
               !    u(i1,i2-is2,i3) = ue1
               !    u(i1,i2-2*is2,i3) = ue2
               !    write(*,'("bcopt:side,is2=",i2,i3," i1,i2,i3=",3i3," b0,b1,b3,bf,br2 =",6f10.4)') side,is2,i1,i2,i3,b0,b1,b3,bf,br2
               !    write(*,'("      ue1,ue2,u(i1,i2-is2,i3),u(i1,i2-2*is2,i3)=",6f10.4)') ue1,ue2,u(i1,i2-is2,i3),u(i1,i2-2*is2,i3)
               !    ue3=nsign*(gb*drn**3+6*us*drn)/(3.-br2*drn)
               !    ue4=nsign*(12*us*drn**2*br2+12*us*drn+8*gb*drn**3)/(3.-br2*drn)
               !    write(*,'("      fa1,fa2,us,gb,drn=",5f10.4)') ue3,ue4,us,gb,drn
               !    write(*,'("      g,gr,grr,ff,ffr,ffs    =",6f11.6)') g,gr,grr,ff,ffr,ffs
               !    write(*,'("      an1,an2,an1r,an2r,an2rr  =",5f10.6)') an1,an2,an1r,an2r,an2rr
               !   call gdExact(0,0,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue0)
               !   call gdExact(0,0,0,0,xy(i1,i2-2,i3,0),xy(i1,i2-2,i3,1),0.,0,0.,ue1)
               !   call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !   call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !   call gdExact(0,0,0,0,xy(i1,i2+2,i3,0),xy(i1,i2+2,i3,1),0.,0,0.,ue4)
               !   use=(ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(1))
               !   usse=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(1)**2)
               !   ussse=(-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(1)**3)
               !  write(*,'("   use,usse=",2f10.5," ussse,gb-br2*usse  =",5f10.5)') use,usse,ussse,gb-br2*usse
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                    ! write(*,'("NeumEqn: extrap interp-ghost i1,i2=",2i3," u(-1),u(-2)=",2e12.4)') i1,i2,u(i1-  is1,i2-  is2,i3-  is3),u(i1-2*is1,i2-2*is2,i3-2*is3)
                   end if
                 end do
                 end do
                 end do
                end if
              else
               ! assign 2-ghost and boundary pt
                if( gridType.eq.rectangular )then
                  if( a1.eq.0. )then
                    write(*,*) 'bcOpt:ERROR: a1=0!'
                    stop 2
                  end if
               !   write(*,'(''bcOpt:4th-order neumannPDE (rect) n2a,n2b='',2i3)') n2a,n2b
                  drn=dx(axis)
                  nsign = 2*side-1
                  br2=-nsign*a0/(a1*nsign)
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                   j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                   j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! the rhs for the mixed BC is stored in the ghost point value of 
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Cartesian grids use dx: 
                      g = f(j1,j2,j3)
                      ff=f(i1,i2,i3)
                        ! 2nd-order one sided:
                        ! ffs=(-f(i1,i2+2*is2,i3)+4.*f(i1,i2+is2,i3)-3.*ff)/(2.*dx(1)) 
                        ! 3rd-order one sided:
                        ffs=is2*(-11.*ff+18.*f(i1,i2+is2,i3)-9.*f(i1,
     & i2+2*is2,i3)+2.*f(i1,i2+3*is2,i3))/(6.*dx(1))
                        ! NOTE: the forcing f and g are only assumed to be given where mask>0
                        ! In order to compute tangential derivatives of the forcing we may need to fill in
                        ! neighbouring values of the forcing at interp and unused points
                        gv( 0, 0, 0)=f(i1,j2,i3)
                        i1m1 = i1-1
                        if( i1m1.lt.n1a .or. mask(i1m1,i2,i3).le.0 )
     & then
                         ! f(i1m1,j2,i3)= extrap3(f,i1m1,j2,i3, 1,0,0)
                         ! gv(-1, 0, 0) = extrap3(f,i1m1,j2,i3, 1,0,0)
                           if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                            gv(-1,0,0)=(4.*f(i1m1+(1),j2+(0),i3+(0))-
     & 6.*f(i1m1+2*(1),j2+2*(0),i3+2*(0))+4.*f(i1m1+3*(1),j2+3*(0),i3+
     & 3*(0))-f(i1m1+4*(1),j2+4*(0),i3+4*(0)))
                           else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                            gv(-1,0,0)=(3.*f(i1m1+(1),j2+(0),i3+(0))-
     & 3.*f(i1m1+2*(1),j2+2*(0),i3+2*(0))+f(i1m1+3*(1),j2+3*(0),i3+3*(
     & 0)))
                           else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                            gv(-1,0,0)=(2.*f(i1m1+(1),j2+(0),i3+(0))-f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0)))
                           else
                            gv(-1,0,0)=(f(i1m1+(1),j2+(0),i3+(0)))
                           end if
                        else
                          gv(-1, 0, 0) = f(i1m1,j2,i3)
                        end if
                        i1p1 = i1+1
                        if( i1p1.gt.n1b .or. mask(i1p1,i2,i3).le.0 )
     & then
                         ! f(i1p1,j2,i3)= extrap3(f,i1p1,j2,i3,-1,0,0)
                         ! gv(+1, 0, 0) = extrap3(f,i1p1,j2,i3,-1,0,0)
                           if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*
     & (0),i3+4*(0)).gt.0 )then
                            gv(+1,0,0)=(4.*f(i1p1+(-1),j2+(0),i3+(0))-
     & 6.*f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+4.*f(i1p1+3*(-1),j2+3*(0),
     & i3+3*(0))-f(i1p1+4*(-1),j2+4*(0),i3+4*(0)))
                           else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                            gv(+1,0,0)=(3.*f(i1p1+(-1),j2+(0),i3+(0))-
     & 3.*f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+f(i1p1+3*(-1),j2+3*(0),i3+
     & 3*(0)))
                           else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                            gv(+1,0,0)=(2.*f(i1p1+(-1),j2+(0),i3+(0))-
     & f(i1p1+2*(-1),j2+2*(0),i3+2*(0)))
                           else
                            gv(+1,0,0)=(f(i1p1+(-1),j2+(0),i3+(0)))
                           end if
                        else
                         gv(+1, 0, 0) = f(i1p1,j2,i3)
                        end if
                        ! grr=FRR(i1,j2,i3)
                        grr = ((gv(+1,0,0)-2.*gv(0,0,0)+gv(-1,0,0))*
     & h22(0))
                     us=( g - a0*u(i1,i2,i3) )/(a1*nsign)
                     gb= ffs - (grr - a0*ff )/(a1*nsign) ! This is u_yyy + a0/(a1*nsign)*( u_yy )
                     u(i1,i2-is2,i3) = (3.+br2*drn)/(3.-br2*drn)*u(i1,
     & i2+is2,i3)-2*br2*drn/(3.-br2*drn)*u(i1,i2,i3)+nsign*(gb*drn**3+
     & 6*us*drn)/(3.-br2*drn)
                     u(i1,i2-2*is2,i3) = u(i1,i2+2*is2,i3) +16*br2*
     & drn/(3.-br2*drn)*u(i1,i2+is2,i3)-16*br2*drn/(3.-br2*drn)*u(i1,
     & i2,i3)+nsign*(12*us*drn**2*br2+12*us*drn+8*gb*drn**3)/(3.-br2*
     & drn)
               !   write(*,'(''bcopt: i1,i2,i3,g,ffr,gss,u,uss ='',3i3,5f11.6)') i1,i2,i3,g,ffr,gss,u(i1,i2,i3),uss
               !  write(*,'('' i1,i2,i3,ur,urrr,ffr,gss ='',3i3,4e11.2)') i1,i2,i3,ur,urrr,ffr,gss
               !  write(*,'('' i1,i2,i3,f,f,f='',3i3,4e11.2)') i1,i2,i3,f(i1,i2,i3),f(i1+2*is1,i2+2*is2,i3),f(i1+is1,i2+is2,i3)
               !      u(j1,j2,j3)=u(i1+is1,i2+is2,i3+is3)
               !      u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*is3)
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                   end if
                 end do
                 end do
                 end do
                else
                  ! **** curvilinear case ****
                  if( axis.gt.1 )then
                    write(*,*) 'bcOpt:ERROR: this option not 
     & implemented yet'
                    write(*,*) 'axis=',axis
                    stop 12
                  end if
                  ! write(*,*) 'bcOpt:4th-order neumann (curvilinear- S)'
                  nsign = 2*side-1
                  drn=dr(axis)
                  cf1=3.*nsign
                  alpha1=a1*nsign
                  ma = m33-2*is1 - 2*5*is2  ! 2nd ghost
                  mb = m33-  is1 - 5*is2    ! 1st ghost
                  mc = m33                  ! diagonal
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                    j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                    j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! the rhs for the mixed BC is stored in the ghost point value of f
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Curvilinear grids use dr:
                      g = f(j1,j2,j3)
                      ff= f(i1,i2,i3)
                        ! 2nd-order one sided:
                        ! is2*ffs=(-f(i1,i2+2*is2,i3)+4.*f(i1,i2+is2,i3)-3.*ff)*d12(1) 
                        ! 3rd-order one sided:
                        ffs=is2*(-11.*ff+18.*f(i1,i2+is2,i3)-9.*f(i1,
     & i2+2*is2,i3)+2.*f(i1,i2+3*is2,i3))/(6.*dr(1))
                        fv( 0, 0, 0) = f(i1,i2,i3)
                        gv( 0, 0, 0) = f(i1,j2,i3)
                        i1m1 = i1-1
                        if( i1m1.lt.n1a .or. mask(i1m1,i2,i3).le.0 )
     & then
                         ! f(i1m1,i2,i3)= extrap3(f,i1m1,i2,i3, 1,0,0)
                         ! f(i1m1,j2,i3)= extrap3(f,i1m1,j2,i3, 1,0,0)
                         ! fv(-1, 0, 0) = extrap3(f,i1m1,i2,i3, 1,0,0)
                         ! gv(-1, 0, 0) = extrap3(f,i1m1,j2,i3, 1,0,0)
                           if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                            fv(-1,0,0)=(4.*f(i1m1+(1),i2+(0),i3+(0))-
     & 6.*f(i1m1+2*(1),i2+2*(0),i3+2*(0))+4.*f(i1m1+3*(1),i2+3*(0),i3+
     & 3*(0))-f(i1m1+4*(1),i2+4*(0),i3+4*(0)))
                           else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                            fv(-1,0,0)=(3.*f(i1m1+(1),i2+(0),i3+(0))-
     & 3.*f(i1m1+2*(1),i2+2*(0),i3+2*(0))+f(i1m1+3*(1),i2+3*(0),i3+3*(
     & 0)))
                           else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                            fv(-1,0,0)=(2.*f(i1m1+(1),i2+(0),i3+(0))-f(
     & i1m1+2*(1),i2+2*(0),i3+2*(0)))
                           else
                            fv(-1,0,0)=(f(i1m1+(1),i2+(0),i3+(0)))
                           end if
                           if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                            gv(-1,0,0)=(4.*f(i1m1+(1),j2+(0),i3+(0))-
     & 6.*f(i1m1+2*(1),j2+2*(0),i3+2*(0))+4.*f(i1m1+3*(1),j2+3*(0),i3+
     & 3*(0))-f(i1m1+4*(1),j2+4*(0),i3+4*(0)))
                           else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                            gv(-1,0,0)=(3.*f(i1m1+(1),j2+(0),i3+(0))-
     & 3.*f(i1m1+2*(1),j2+2*(0),i3+2*(0))+f(i1m1+3*(1),j2+3*(0),i3+3*(
     & 0)))
                           else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                            gv(-1,0,0)=(2.*f(i1m1+(1),j2+(0),i3+(0))-f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0)))
                           else
                            gv(-1,0,0)=(f(i1m1+(1),j2+(0),i3+(0)))
                           end if
                        else
                         fv(-1, 0, 0) = f(i1m1,i2,i3)
                         gv(-1, 0, 0) = f(i1m1,j2,i3)
                        end if
                        i1p1 = i1+1
                        if( i1p1.gt.n1b .or. mask(i1p1,i2,i3).le.0 )
     & then
                         ! f(i1p1,i2,i3)= extrap3(f,i1p1,i2,i3,-1,0,0)
                         ! f(i1p1,j2,i3)= extrap3(f,i1p1,j2,i3,-1,0,0)
                         ! fv(+1, 0, 0) = extrap3(f,i1p1,i2,i3,-1,0,0)
                         ! gv(+1, 0, 0) = extrap3(f,i1p1,j2,i3,-1,0,0)
                           if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*
     & (0),i3+4*(0)).gt.0 )then
                            fv(+1,0,0)=(4.*f(i1p1+(-1),i2+(0),i3+(0))-
     & 6.*f(i1p1+2*(-1),i2+2*(0),i3+2*(0))+4.*f(i1p1+3*(-1),i2+3*(0),
     & i3+3*(0))-f(i1p1+4*(-1),i2+4*(0),i3+4*(0)))
                           else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                            fv(+1,0,0)=(3.*f(i1p1+(-1),i2+(0),i3+(0))-
     & 3.*f(i1p1+2*(-1),i2+2*(0),i3+2*(0))+f(i1p1+3*(-1),i2+3*(0),i3+
     & 3*(0)))
                           else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                            fv(+1,0,0)=(2.*f(i1p1+(-1),i2+(0),i3+(0))-
     & f(i1p1+2*(-1),i2+2*(0),i3+2*(0)))
                           else
                            fv(+1,0,0)=(f(i1p1+(-1),i2+(0),i3+(0)))
                           end if
                           if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*
     & (0),i3+4*(0)).gt.0 )then
                            gv(+1,0,0)=(4.*f(i1p1+(-1),j2+(0),i3+(0))-
     & 6.*f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+4.*f(i1p1+3*(-1),j2+3*(0),
     & i3+3*(0))-f(i1p1+4*(-1),j2+4*(0),i3+4*(0)))
                           else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                            gv(+1,0,0)=(3.*f(i1p1+(-1),j2+(0),i3+(0))-
     & 3.*f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+f(i1p1+3*(-1),j2+3*(0),i3+
     & 3*(0)))
                           else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                            gv(+1,0,0)=(2.*f(i1p1+(-1),j2+(0),i3+(0))-
     & f(i1p1+2*(-1),j2+2*(0),i3+2*(0)))
                           else
                            gv(+1,0,0)=(f(i1p1+(-1),j2+(0),i3+(0)))
                           end if
                        else
                         fv(+1, 0, 0) = f(i1p1,i2,i3)
                         gv(+1, 0, 0) = f(i1p1,j2,i3)
                        end if
                        ! ffr= FR(i1,i2,i3)
                        ! gr = FR(i1,j2,i3)
                        ! grr=FRR(i1,j2,i3)
                        ffr = ((fv(+1,0,0)-fv(-1,0,0))*d12(0))
                        gr  = ((gv(+1,0,0)-gv(-1,0,0))*d12(0))
                        grr = ((gv(+1,0,0)-2.*gv(0,0,0)+gv(-1,0,0))*
     & d22(0))
                      rxi=rx(i1,i2,i3)
                      ryi=ry(i1,i2,i3)
                      sxi=sx(i1,i2,i3)
                      syi=sy(i1,i2,i3)
                      rxr=rxr2(i1,i2,i3)
                      rxs=rxs2(i1,i2,i3)
                      ryr=ryr2(i1,i2,i3)
                      rys=rys2(i1,i2,i3)
                      sxr=sxr2(i1,i2,i3)
                      sxs=sxs2(i1,i2,i3)
                      syr=syr2(i1,i2,i3)
                      sys=sys2(i1,i2,i3)
                      rxx=rxx22(i1,i2,i3)
                      ryy=ryy22(i1,i2,i3)
                      rxrr=rxrr2(i1,i2,i3)
                      rxrs=rxrs2(i1,i2,i3)
                      rxss=rxss2(i1,i2,i3)
                      ryrr=ryrr2(i1,i2,i3)
                      ryrs=ryrs2(i1,i2,i3)
                      ryss=ryss2(i1,i2,i3)
                      sxx=sxx22(i1,i2,i3)
                      syy=syy22(i1,i2,i3)
                      sxrr=sxrr2(i1,i2,i3)
                      sxrs=sxrs2(i1,i2,i3)
                      sxss=sxss2(i1,i2,i3)
                      syrr=syrr2(i1,i2,i3)
                      syrs=syrs2(i1,i2,i3)
                      syss=syss2(i1,i2,i3)
                      rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                      ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                      rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                      ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                      sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                      syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                      sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                      syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                      alpha1=a1*nsign  ! nsign=2*side-1
                      alpha2=a1*nsign
                       sxNormI=1./sqrt(sxi**2+syi**2)
                       sxNormIr=-(sxi*sxr+syi*syr)*sxNormI**3
                       sxNormIrr=-(sxi*sxrr+syi*syrr+sxr*sxr+syr*syr)*
     & sxNormI**3 -3.*(sxi*sxr+syi*syr)*sxNormI**2*sxNormIr
                       n1=sxi*sxNormI
                       n1r=sxr*sxNormI + sxi*sxNormIr
                       n1rr=sxrr*sxNormI + 2.*sxr*sxNormIr + sxi*
     & sxNormIrr
                       n2=syi*sxNormI
                       n2r=syr*sxNormI + syi*sxNormIr
                       n2rr=syrr*sxNormI + 2.*syr*sxNormIr + syi*
     & sxNormIrr
                       an1=alpha1*(n1*rxi+n2*ryi)
                       an2=alpha2*(n1*sxi+n2*syi)
                       an1r=alpha1*(n1*rxr+n1r*rxi + n2*ryr+n2r*ryi)
                       an1rr=alpha1*(n1*rxrr+n2*ryrr+ 2.*(n1r*rxr+n2r*
     & ryr) + n1rr*rxi+n2rr*ryi)
                       an2r=alpha2*(n1*sxr+n1r*sxi + n2*syr+n2r*syi)
                       an2rr=alpha2*(n1*sxrr+n2*syrr+ 2.*(n1r*sxr+n2r*
     & syr) + n1rr*sxi+n2rr*syi)
                      c11=rxi**2+ryi**2
                      c11r=2.*(rxi*rxr+ryi*ryr)
                      c11s=2.*(rxi*rxs+ryi*rys)
                      c12=2.*(rxi*sxi+ryi*syi)
                      c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                      c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                      c22=sxi**2+syi**2
                      c22r=2.*(sxi*sxr+syi*syr)
                      c22s=2.*(sxi*sxs+syi*sys)
                      c1=rxx+ryy
                      c1r=rxxr+ryyr
                      c1s=rxxs+ryys
                      c2=sxx+syy
                      c2r=sxxr+syyr
                      c2s=sxxs+syys
                      c0=0.
                      c0r=0.
                      c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                      b0=-(c12*c2*an2**2*an1*c0+c2r*an2*a0*c12**2*an1-
     & c11r*an2*c12**2*an2r*a0-c0r*an2**2*c12**2*an1+2*an1r*c12**3*
     & an2r*a0+c12**2*an2rr*a0*c11*an2-2*c12**2*an1r*c2*an2*a0-c0s*
     & an2**3*c22*c11+c0s*an2**2*c22*c12*an1+c2s*an2**2*c22*a0*c11-
     & c11s*an2**2*c22*c2*a0-c2s*an2*c22*a0*c12*an1-c12s*an2**2*c22*
     & an1*c0+c12s*an2*c22*an1*c2*a0-c1*an2**2*c22*an1*c0+c1*an2*c22*
     & an1*c2*a0+c11s*an2**3*c22*c0-c11**2*c22*an2rr*a0*an2+c11*c22*
     & c2*an2*a0**2-c11*c22*c12*an2r*a0**2-2*c11*c22*an1r*c0*an2**2+2*
     & c11**2*c22*an2r**2*a0-c12*c2r*an2**2*a0*c11-c12*c11r*an2**3*c0-
     & c12*c1*an2**3*c0-c12*c2**2*an2*an1*a0+c12*c1*an2**2*c2*a0+2*
     & c12**2*an1r*c0*an2**2-an2rr*a0*c12**3*an1-2*c12**2*an2r*an1*c0*
     & an2+c12**3*an2r*a0**2+2*c11*c22*an1r*c2*an2*a0-2*c11*c22*an1r*
     & c12*an2r*a0+c12*c12r*an2*an2r*a0*c11-c12*c12r*an2*an1*c2*a0+
     & c12*c0r*an2**3*c11+c12*c2*an2*an2r*a0*c11+c12**2*a0*c0*an2**2-
     & 2*c12**2*an2r**2*a0*c11-c12**2*c2*an2*a0**2+2*c12**2*an2r*an1*
     & c2*a0+c11s*an2*c22*c12*an2r*a0-c12s*an2*c22*an2r*a0*c11-c0*an2*
     & c22*a0*c12*an1-c1*an2*c22*an2r*a0*c11+c11*c22*an2rr*a0*c12*an1-
     & 2*c11*c22*an2r*an1*c2*a0+2*c11*c22*an2r*an1*c0*an2+c12*c12r*
     & an2**2*an1*c0+c12*c11r*an2**2*c2*a0-c1*an2*c12**2*an2r*a0)/an2*
     & *2/(c12*an1-c11*an2)/c22**2
                      b1=1/an2**2*(2*c12**2*an1r*c2*an2*an1+c12*c12r*
     & an2**2*an1r*c11+c12*c12r*an2**2*a0*c11+c11s*an2**2*c22*c12*a0-
     & c11s*an2*c22*c12*an2r*an1+c11s*an2**2*c22*c2*an1+c2s*an2*c22*
     & an1**2*c12-c2s*an2**2*c22*an1*c11-c12*c12r*an2**2*an1*c1-c12*
     & c12r*an2*an2r*an1*c11-c1s*an2**2*c22*c12*an1+c12**2*a0*c2*an2*
     & an1+3*c12**2*an2r*an1*c1*an2-2*c12**2*an2r*an1r*an2*c11+2*c12**
     & 3*an1r**2*an2-c12s*an2*c22*c2*an1**2-c1*an2*c22*c2*an1**2+c0*
     & an2*c22*an1**2*c12-c0*an2**2*c22*an1*c11+c12s*an2**2*c22*an1*
     & c1-3*c11*c22*an1r*c12*a0*an2+2*c11*c22*an1r*c12*an2r*an1+c1**2*
     & an2**2*c22*an1-c11*c22*c12*a0**2*an2+2*c11*c22*an2r*c2*an1**2-
     & c11*c22*an2rr*an1**2*c12-2*c11*c22*an1r*c2*an2*an1+c11*c22*
     & an1rr*an2*c12*an1+c11*c22*a0*c12*an2r*an1-c11*c22*an2r*an1*c1*
     & an2+2*c11**2*c22*an2r*an1r*an2+2*c11**2*c22*an2r*a0*an2+c11**2*
     & c22*an2rr*an1*an2+3*an1r*c12**3*a0*an2-2*an1r*c12**3*an2r*an1-
     & an1rr*an2*c12**3*an1+2*c12**2*an2r**2*an1*c11-2*c12**2*an2r*c2*
     & an1**2+c12*c2**2*an2*an1**2-c12*c0*an2**3*c11+c12*c11r*an2**3*
     & c1-2*c12**2*an2r*a0*an2*c11-c12**2*an2rr*an1*c11*an2-a0*c12**3*
     & an2r*an1+c12**2*an1rr*an2**2*c11-2*c12**2*a0*c1*an2**2-3*c12**
     & 2*an1r*c1*an2**2-2*c12*c2*an2**2*an1*c1+c12*c2*an2**2*an1r*c11+
     & c12*c2*an2**2*a0*c11-2*c11*c22*c12*an1r**2*an2+c11*c22*an1r*c1*
     & an2**2-c12*c11r*an2**2*c2*an1+c12*c2r*an2**2*an1*c11-c11*c22*
     & a0*c2*an2*an1-c12s*an2**2*c22*an1r*c11-c12s*an2**2*c22*a0*c11+
     & c12s*an2*c22*an2r*an1*c11+c11s*an2**2*c22*c12*an1r+c12**3*a0**
     & 2*an2-c12*c1r*an2**3*c11-c11**2*c22*an1rr*an2**2-2*c11**2*c22*
     & an2r**2*an1-c11s*an2**3*c22*c1+c1s*an2**3*c22*c11-c12*c2*an2*
     & an2r*an1*c11+c12*c12r*an2*c2*an1**2+c11r*an2*c12**2*an2r*an1-
     & c2r*an2*an1**2*c12**2+c1r*an2**2*c12**2*an1-c11r*an2**2*c12**2*
     & a0+c0*an2**2*c12**2*an1-c11r*an2**2*c12**2*an1r+c12*c1**2*an2**
     & 3+an2rr*an1**2*c12**3)/(c12*an1-c11*an2)/c22**2
                      br2=1/an2*(-c22r*an2*c12**2*an1+2*c12**2*an1r*
     & c22*an2+c12**2*a0*c22*an2+2*c12*c2*an2*an1*c22+c12*c12r*an2*
     & an1*c22-c12*c1*an2**2*c22-c12*c11r*an2**2*c22+c12*c22r*an2**2*
     & c11-2*c11*c22**2*an1r*an2-c11*c22**2*a0*an2+2*c11*c22**2*an2r*
     & an1-c2*an2**2*c22*c11-c1*an2*c22**2*an1+c11s*an2**2*c22**2-
     & c12s*an2*c22**2*an1+c22s*an2*c22*c12*an1-c22s*an2**2*c22*c11-2*
     & c12**2*an2r*an1*c22)/(c12*an1-c11*an2)/c22**2
                      b3=-(an1*c12**2-an1*c11*c22-c11*an2*c12)/an2/c22*
     & *2
                      bf=1/an2**2*(2*c12**2*an2r*an2*c11-c12*c2*an2**2*
     & c11-c12*c12r*an2**2*c11+2*c11*c22*an1r*c12*an2+c11*c22*a0*c12*
     & an2-2*c11**2*c22*an2r*an2+c1*an2**2*c22*c11+c12s*an2**2*c22*
     & c11-c11s*an2**2*c22*c12-2*an1r*c12**3*an2-a0*c12**3*an2+c1*an2*
     & *2*c12**2+c11r*an2**2*c12**2)/(c12*an1-c11*an2)/c22**2*gr+
     & 1/an2**2*(-c11*c22*an2*c12*an1+an2*c12**3*an1-c12**2*an2**2*
     & c11+c11**2*c22*an2**2)/(c12*an1-c11*an2)/c22**2*grr+1/an2**2*(-
     & 2*c12**2*an2r*an1*an2+c12*c2*an2**2*an1+c12*c12r*an2**2*an1+2*
     & c11*c22*an2r*an1*an2-c11*c22*a0*an2**2-2*c11*c22*an1r*an2**2-
     & c1*an2**2*c22*an1+c11s*an2**3*c22-c12s*an2**2*c22*an1+c12**2*
     & a0*an2**2+2*c12**2*an1r*an2**2-c12*c1*an2**3-c12*c11r*an2**3)/(
     & c12*an1-c11*an2)/c22**2*ff+1/an2**2*(-an2**2*c12**2*an1+c12*
     & an2**3*c11)/(c12*an1-c11*an2)/c22**2*ffr+1/an2**2*(-an2**3*c22*
     & c11+an2**2*c22*c12*an1)/(c12*an1-c11*an2)/c22**2*ffs+1/an2**2*(
     & -2*c12**2*an1r*c2*an2-c11r*an2*c12**2*an2r-c1*an2*c12**2*an2r+
     & c2r*an2*c12**2*an1-an2rr*c12**3*an1-2*c12**2*an2r**2*c11+c11s*
     & an2*c22*c12*an2r-c12s*an2*c22*an2r*c11+c12s*an2*c22*an1*c2-
     & c11s*an2**2*c22*c2-c0*an2*c22*c12*an1+2*an1r*c12**3*an2r-c1*
     & an2*c22*an2r*c11-c12*c2r*an2**2*c11+c12*c11r*an2**2*c2+c1*an2*
     & c22*an1*c2+c12**2*an2rr*c11*an2-c12**2*a0*c2*an2+c11*c22*an2rr*
     & c12*an1-2*c11*c22*an2r*an1*c2+c11*c22*a0*c2*an2-c11**2*c22*
     & an2rr*an2+c0*an2**2*c22*c11+c12*c12r*an2*an2r*c11-c12*c2**2*
     & an2*an1-c12*c12r*an2*an1*c2+c12*c1*an2**2*c2-2*c11*c22*an1r*
     & c12*an2r+a0*c12**3*an2r+c12*c2*an2*an2r*c11+2*c12**2*an2r*an1*
     & c2+2*c11**2*c22*an2r**2+2*c11*c22*an1r*c2*an2-c11*c22*a0*c12*
     & an2r-c2s*an2*c22*c12*an1+c2s*an2**2*c22*c11)/(c12*an1-c11*an2)
     & /c22**2*g
                     ur=ur4(i1,i2,i3)
                     ! urr=urr2(i1,i2,i3)  ! need to 2nd-order
                     urrr=urrr2(i1,i2,i3)
               ! *****************
               !$$$    ! gdExact(ntd,nxd,nyd,nzd,x,y,z,n,t,value)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue0)
               !$$$    
               !$$$    call gdExact(0,0,0,0,xy(i1-2,i2,i3,0),xy(i1-2,i2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1-1,i2,i3,0),xy(i1-1,i2,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1+1,i2,i3,0),xy(i1+1,i2,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1+2,i2,i3,0),xy(i1+2,i2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$
               !$$$    ure   = (ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(0))
               !$$$    urre=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(0)**2)
               !$$$    urrre = (-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(0)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-2,i3,0),xy(i1,i2-2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+2,i3,0),xy(i1,i2+2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$    use=(ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(1))
               !$$$    usse=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(1)**2)
               !$$$    ussse=(-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(1)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue4)
               !$$$    urse=(ue4-ue3-ue2+ue1)/(4.*dr(0)*dr(1))
               ! *****************
                   ! evaulate the defect when the 2-ghost pts and bndry pt are zero:
                   u(i1,i2,i3)=0.
                   u(i1-is1,i2-is2,i3)=0.
                   u(i1-2*is1,i2-2*is2,i3)=0.
                   gc=ff-op2d4(i1,i2,i3)
                   ca=c(ma,i1,i2,i3)
                   cb=c(mb,i1,i2,i3)
                   cc=c(mc,i1,i2,i3)
                     ga= (g - an1*ur -a0*u(i1,i2,i3))/an2  ! us
                     gb=b0*u(i1,i2,i3)+b1*ur+b3*urrr+bf ! this is: usss+br2*uss
                     ! On side==1 we change the sign of br2 and the forcing
                     br2=-nsign*br2
                     ga=-nsign*ga
                     gb=-nsign*gb
                     u(i1,i2-is2,i3) = -(3*cc-16*br2*drn*ca+cc*br2*drn)
     & /(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1,i2+is2,i3)-
     & 2*br2*drn*ca/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(
     & i1,i2+2*is2,i3)-(24*br2*drn**2*ca*ga-cc*gb*drn**3-6*cc*ga*drn-
     & 2*br2*drn*gc)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)
                     u(i1,i2-2*is2,i3) = (-16*cc*br2*drn-16*br2*drn*cb)
     & /(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1,i2+is2,i3)+
     & (-3*cc+cc*br2*drn+2*br2*drn*cb)/(-3*cc+cc*br2*drn+16*br2*drn*
     & ca+2*br2*drn*cb)*u(i1,i2+2*is2,i3)+(16*br2*drn*gc+24*ga*drn**2*
     & br2*cb+8*cc*gb*drn**3+12*cc*ga*drn+12*ga*drn**2*cc*br2)/(-3*cc+
     & cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)
                     u(i1,i2,i3) = -cb/cc*u(i1,i2-is2,i3)-ca/cc*u(i1,
     & i2-2*is2,i3)+gc/cc
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                   end if
                 end do
                 end do
                 end do
                end if
              end if
!           else if( axis.eq.0 .and. nd.eq.3 )then
!             neumannAndEquation(forcing,R,3)
!           else if( axis.eq.1 .and. nd.eq.3 )then
!             neumannAndEquation(forcing,S,3)
!           else if( axis.eq.2 .and. nd.eq.3 )then
!             neumannAndEquation(forcing,T,3)
            else
              stop 10
            end if
          else
            if( axis.eq.0 .and. nd.eq.2 )then
              if( solveEquationWithBC.eq.0 )then
                ! *wdh* 110213 -- FINISH ME for the heat operator 
                ! if( equationToSolve.ne.laplaceEquation .and. equationToSolve.ne.heatEquationOperator)then
                !   write(*,'("Ogmg:bcOpt:neumannAndEqn(order4):ERROR: only implemented for equation=laplace or heatEquationOperator")')
                if( equationToSolve.ne.laplaceEquation )then
                  write(*,'("Ogmg:bcOpt:neumannAndEqn(order4):ERROR: 
     & only implemented for equation=laplace")')
                  write(*,'("equationToSolve=",i2)') equationToSolve
                  write(*,'("gridType=",i2)') gridType
                  stop 6064
                end if
                if( gridType.eq.rectangular )then
                  if( a1.eq.0. )then
                    write(*,*) 'bcOpt:ERROR: a1=0!'
                    stop 2
                  end if
                  ! write(*,'("bcOpt:order4 neumannAndEqnEvenNewer (rect) grid=",i3," n1a,n1b,n2a,n2b=",4i3)') grid,n1a,n1b,n2a,n2b
                  drn=dx(axis)
                  nsign = 2*side-1
                  br2=-nsign*a0/(a1*nsign)
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                   j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                   j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! Note: the rhs for the mixed BC is stored in the ghost point value of f
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Cartesian grids use dx: 
                      g=0.
                      ff=0.
                       ffr=0.
                        gs=0.
                        gss=0.
                     ! gdExact(ntd,nxd,nyd,nzd,x,y,z,n,t,value)
                     ! call gdExact(0,1,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue0)
                     ! call gdExact(0,1,2,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue1)
                     ! call gdExact(0,3,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue2)
                     ! call gdExact(0,1,2,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue3)
                     ! write(*,'(''bcopt: i1,i2,i3, x,y, g,ge, gss,gsse ='',3i3,2f8.2,5f11.6)') i1,i2,i3,xy(i1,i2,i3,0),xy(i1,i2,i3,1),g,ue0,gss,ue1
                     ! write(*,'(''     : ffr, ffre ='',5f11.6)') ffr,ue2+ue3
                     ! ********************** TEMP ******************
                     ! g=ue0
                     ! gss=ue1
                     ! ffr=ue2+ue3
                     ! ********************************************
                     ur=( g - a0*u(i1,i2,i3) )/(a1*nsign)
                     gb= ffr - (gss - a0*ff )/(a1*nsign) ! This is u_xxx + a0/(a1*nsign)*( u_xx )
                     u(i1-is1,i2,i3) = (3.+br2*drn)/(3.-br2*drn)*u(i1+
     & is1,i2,i3)-2*br2*drn/(3.-br2*drn)*u(i1,i2,i3)+nsign*(gb*drn**3+
     & 6*ur*drn)/(3.-br2*drn)
                     u(i1-2*is1,i2,i3) = u(i1+2*is1,i2,i3) +16*br2*
     & drn/(3.-br2*drn)*u(i1+is1,i2,i3)-16*br2*drn/(3.-br2*drn)*u(i1,
     & i2,i3)+nsign*(12*ur*drn**2*br2+12*ur*drn+8*gb*drn**3)/(3.-br2*
     & drn)
                     ! call gdExact(0,0,0,0,xy(i1-is1,i2,i3,0),xy(i1-is1,i2,i3,1),0.,0,0.,ue0)
                     ! call gdExact(0,0,0,0,xy(i1-2*is1,i2,i3,0),xy(i1-2*is1,i2,i3,1),0.,0,0.,ue1)
                     ! write(*,'(''     : u(-1),ue(-1), u(-2),ue(-2) ='',5f11.6)') u(i1-is1,i2,i3),ue0, u(i1-2*is1,i2,i3),ue1
                     ! if( abs( u(i1-is1,i2,i3)-ue0).gt. .01 )then
                     !  write(*,'(''   BCOPT:ERROR  : u(-1),ue(-1), u(-2),ue(-2) ='',5f11.6)')u(i1-is1,i2,i3),ue0, u(i1-2*is1,i2,i3),ue1
                     ! else
                     !  ! u(i1-is1,i2,i3)=ue0
                     !  ! u(i1-2*is1,i2,i3) = ue1
                     ! end if
                   ! for testing: 
                   !  u(j1,j2,j3)=u(i1+is1,i2+is2,i3+is3)
                   !  u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*is3)
                    ! write(*,'(''bcopt: i1,i2,i3,g,ffr,gss,u,ur ='',3i3,6e12.3)') i1,i2,i3,g,ffr,gss,u(i1,i2,i3),ur,gb
                    ! write(*,'('' i1,i2,i3,f,f,f='',3i3,4e11.2)') i1,i2,i3,f(i1,i2,i3),f(i1+2*is1,i2+2*is2,i3),f(i1+is1,i2+is2,i3)
                    ! write(*,'('' u(-1),u(-2)='',4e11.2)') u(j1,j2,j3),u(i1-2*is1,i2-2*is2,i3-2*is3)
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                    ! write(*,'("NeumEqn: extrap interp-ghost i1,i2=",2i3," u(-1),u(-2)=",2e12.4)') i1,i2,u(i1-  is1,i2-  is2,i3-  is3),u(i1-2*is1,i2-2*is2,i3-2*is3)
                   end if
                 end do
                 end do
                 end do
                else
                  ! **** curvilinear case ****
                  if( axis.gt.1 )then
                    write(*,*) 'bcOpt:ERROR: this option not 
     & implemented yet'
                    write(*,*) 'axis=',axis
                    stop 12
                  end if
                  ! write(*,'("bcOpt:order4 neumannAndEqnEvenNewer (curv) grid=",i3," n1a,n1b,n2a,n2b=",4i3)') grid,n1a,n1b,n2a,n2b
                  nsign = 2*side-1
                  drn=dr(axis)
                  cf1=3.*nsign
                  alpha1=a1*nsign
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                    j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                    j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! the rhs for the mixed BC is stored in the ghost point value of f
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Curvilinear grids use dr:
                      ff=0.
                      ffr=0.
                      ffs=0.
                      fft=0.
                      g=0.
                        gs=0.
                        gss=0.
                        gt=0.
                        gtt=0.
                        gst=0.
                     ! NOTE: *** The next include file only works for Laplace equation ***
                      rxi=rx(i1,i2,i3)
                      ryi=ry(i1,i2,i3)
                      sxi=sx(i1,i2,i3)
                      syi=sy(i1,i2,i3)
                      rxr=rxr2(i1,i2,i3)
                      rxs=rxs2(i1,i2,i3)
                      ryr=ryr2(i1,i2,i3)
                      rys=rys2(i1,i2,i3)
                      sxr=sxr2(i1,i2,i3)
                      sxs=sxs2(i1,i2,i3)
                      syr=syr2(i1,i2,i3)
                      sys=sys2(i1,i2,i3)
                      rxx=rxx22(i1,i2,i3)
                      ryy=ryy22(i1,i2,i3)
                      rxrr=rxrr2(i1,i2,i3)
                      rxrs=rxrs2(i1,i2,i3)
                      rxss=rxss2(i1,i2,i3)
                      ryrr=ryrr2(i1,i2,i3)
                      ryrs=ryrs2(i1,i2,i3)
                      ryss=ryss2(i1,i2,i3)
                      sxx=sxx22(i1,i2,i3)
                      syy=syy22(i1,i2,i3)
                      sxrr=sxrr2(i1,i2,i3)
                      sxrs=sxrs2(i1,i2,i3)
                      sxss=sxss2(i1,i2,i3)
                      syrr=syrr2(i1,i2,i3)
                      syrs=syrs2(i1,i2,i3)
                      syss=syss2(i1,i2,i3)
                      rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                      ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                      rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                      ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                      sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                      syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                      sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                      syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                      alpha1=a1*nsign  ! nsign=2*side-1
                      alpha2=a1*nsign
                       rxNormI=1./sqrt(rxi**2+ryi**2)
                       rxNormIs=-(rxi*rxs+ryi*rys)*rxNormI**3
                       rxNormIss=-(rxi*rxss+ryi*ryss+rxs*rxs+rys*rys)*
     & rxNormI**3 -3.*(rxi*rxs+ryi*rys)*rxNormI**2*rxNormIs
                       n1=rxi*rxNormI
                       n1s=rxs*rxNormI + rxi*rxNormIs
                       n1ss=rxss*rxNormI + 2.*rxs*rxNormIs + rxi*
     & rxNormIss
                       n2=ryi*rxNormI
                       n2s=rys*rxNormI + ryi*rxNormIs
                       n2ss=ryss*rxNormI + 2.*rys*rxNormIs + ryi*
     & rxNormIss
                       an1=alpha1*(n1*rxi+n2*ryi)
                       an2=alpha2*(n1*sxi+n2*syi)
                       an1s=alpha1*(n1*rxs+n2*rys+n1s*rxi+n2s*ryi)
                       an1ss=alpha1*(n1*rxss+n2*ryss+2.*(n1s*rxs+n2s*
     & rys)+n1ss*rxi+n2ss*ryi)
                       an2s=alpha2*(n1*sxs+n2*sys + n1s*sxi+n2s*syi)
                       an2ss=alpha2*(n1*sxss+n2*syss + 2.*(n1s*sxs+n2s*
     & sys) + n1ss*sxi+n2ss*syi)
                      c11=rxi**2+ryi**2
                      c11r=2.*(rxi*rxr+ryi*ryr)
                      c11s=2.*(rxi*rxs+ryi*rys)
                      c12=2.*(rxi*sxi+ryi*syi)
                      c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                      c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                      c22=sxi**2+syi**2
                      c22r=2.*(sxi*sxr+syi*syr)
                      c22s=2.*(sxi*sxs+syi*sys)
                      c1=rxx+ryy
                      c1r=rxxr+ryyr
                      c1s=rxxs+ryys
                      c2=sxx+syy
                      c2r=sxxr+syyr
                      c2s=sxxs+syys
                      c0=0.
                      c0r=0.
                      c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                      b0=-(c12*c1*an1**2*an2*c0+c1s*an1*a0*c12**2*an2-
     & c22s*an1*c12**2*an1s*a0-c0s*an1**2*c12**2*an2+2*an2s*c12**3*
     & an1s*a0+c12**2*an1ss*a0*c22*an1-2*c12**2*an2s*c1*an1*a0-c0r*
     & an1**3*c11*c22+c0r*an1**2*c11*c12*an2+c1r*an1**2*c11*a0*c22-
     & c22r*an1**2*c11*c1*a0-c1r*an1*c11*a0*c12*an2-c12r*an1**2*c11*
     & an2*c0+c12r*an1*c11*an2*c1*a0-c2*an1**2*c11*an2*c0+c2*an1*c11*
     & an2*c1*a0+c22r*an1**3*c11*c0-c22**2*c11*an1ss*a0*an1+c22*c11*
     & c1*an1*a0**2-c22*c11*c12*an1s*a0**2-2*c22*c11*an2s*c0*an1**2+2*
     & c22**2*c11*an1s**2*a0-c12*c1s*an1**2*a0*c22-c12*c22s*an1**3*c0-
     & c12*c2*an1**3*c0-c12*c1**2*an1*an2*a0+c12*c2*an1**2*c1*a0+2*
     & c12**2*an2s*c0*an1**2-an1ss*a0*c12**3*an2-2*c12**2*an1s*an2*c0*
     & an1+c12**3*an1s*a0**2+2*c22*c11*an2s*c1*an1*a0-2*c22*c11*an2s*
     & c12*an1s*a0+c12*c12s*an1*an1s*a0*c22-c12*c12s*an1*an2*c1*a0+
     & c12*c0s*an1**3*c22+c12*c1*an1*an1s*a0*c22+c12**2*a0*c0*an1**2-
     & 2*c12**2*an1s**2*a0*c22-c12**2*c1*an1*a0**2+2*c12**2*an1s*an2*
     & c1*a0+c22r*an1*c11*c12*an1s*a0-c12r*an1*c11*an1s*a0*c22-c0*an1*
     & c11*a0*c12*an2-c2*an1*c11*an1s*a0*c22+c22*c11*an1ss*a0*c12*an2-
     & 2*c22*c11*an1s*an2*c1*a0+2*c22*c11*an1s*an2*c0*an1+c12*c12s*
     & an1**2*an2*c0+c12*c22s*an1**2*c1*a0-c2*an1*c12**2*an1s*a0)/an1*
     & *2/(c12*an2-c22*an1)/c11**2
                      b1=1/an1**2*(2*c12**2*an2s*c1*an1*an2+c12*c12s*
     & an1**2*an2s*c22+c12*c12s*an1**2*a0*c22+c22r*an1**2*c11*c12*a0-
     & c22r*an1*c11*c12*an1s*an2+c22r*an1**2*c11*c1*an2+c1r*an1*c11*
     & an2**2*c12-c1r*an1**2*c11*an2*c22-c12*c12s*an1**2*an2*c2-c12*
     & c12s*an1*an1s*an2*c22-c2r*an1**2*c11*c12*an2+c12**2*a0*c1*an1*
     & an2+3*c12**2*an1s*an2*c2*an1-2*c12**2*an1s*an2s*an1*c22+2*c12**
     & 3*an2s**2*an1-c12r*an1*c11*c1*an2**2-c2*an1*c11*c1*an2**2+c0*
     & an1*c11*an2**2*c12-c0*an1**2*c11*an2*c22+c12r*an1**2*c11*an2*
     & c2-3*c22*c11*an2s*c12*a0*an1+2*c22*c11*an2s*c12*an1s*an2+c2**2*
     & an1**2*c11*an2-c22*c11*c12*a0**2*an1+2*c22*c11*an1s*c1*an2**2-
     & c22*c11*an1ss*an2**2*c12-2*c22*c11*an2s*c1*an1*an2+c22*c11*
     & an2ss*an1*c12*an2+c22*c11*a0*c12*an1s*an2-c22*c11*an1s*an2*c2*
     & an1+2*c22**2*c11*an1s*an2s*an1+2*c22**2*c11*an1s*a0*an1+c22**2*
     & c11*an1ss*an2*an1+3*an2s*c12**3*a0*an1-2*an2s*c12**3*an1s*an2-
     & an2ss*an1*c12**3*an2+2*c12**2*an1s**2*an2*c22-2*c12**2*an1s*c1*
     & an2**2+c12*c1**2*an1*an2**2-c12*c0*an1**3*c22+c12*c22s*an1**3*
     & c2-2*c12**2*an1s*a0*an1*c22-c12**2*an1ss*an2*c22*an1-a0*c12**3*
     & an1s*an2+c12**2*an2ss*an1**2*c22-2*c12**2*a0*c2*an1**2-3*c12**
     & 2*an2s*c2*an1**2-2*c12*c1*an1**2*an2*c2+c12*c1*an1**2*an2s*c22+
     & c12*c1*an1**2*a0*c22-2*c22*c11*c12*an2s**2*an1+c22*c11*an2s*c2*
     & an1**2-c12*c22s*an1**2*c1*an2+c12*c1s*an1**2*an2*c22-c22*c11*
     & a0*c1*an1*an2-c12r*an1**2*c11*an2s*c22-c12r*an1**2*c11*a0*c22+
     & c12r*an1*c11*an1s*an2*c22+c22r*an1**2*c11*c12*an2s+c12**3*a0**
     & 2*an1-c12*c2s*an1**3*c22-c22**2*c11*an2ss*an1**2-2*c22**2*c11*
     & an1s**2*an2-c22r*an1**3*c11*c2+c2r*an1**3*c11*c22-c12*c1*an1*
     & an1s*an2*c22+c12*c12s*an1*c1*an2**2+c22s*an1*c12**2*an1s*an2-
     & c1s*an1*an2**2*c12**2+c2s*an1**2*c12**2*an2-c22s*an1**2*c12**2*
     & a0+c0*an1**2*c12**2*an2-c22s*an1**2*c12**2*an2s+c12*c2**2*an1**
     & 3+an1ss*an2**2*c12**3)/(c12*an2-c22*an1)/c11**2
                      br2=1/an1*(-c11s*an1*c12**2*an2+2*c12**2*an2s*
     & c11*an1+c12**2*a0*c11*an1+2*c12*c1*an1*an2*c11+c12*c12s*an1*
     & an2*c11-c12*c2*an1**2*c11-c12*c22s*an1**2*c11+c12*c11s*an1**2*
     & c22-2*c22*c11**2*an2s*an1-c22*c11**2*a0*an1+2*c22*c11**2*an1s*
     & an2-c1*an1**2*c11*c22-c2*an1*c11**2*an2+c22r*an1**2*c11**2-
     & c12r*an1*c11**2*an2+c11r*an1*c11*c12*an2-c11r*an1**2*c11*c22-2*
     & c12**2*an1s*an2*c11)/(c12*an2-c22*an1)/c11**2
                      b3=-(an2*c12**2-an2*c22*c11-c22*an1*c12)/an1/c11*
     & *2
                      bf=1/an1**2*(2*c12**2*an1s*an1*c22-c12*c1*an1**2*
     & c22-c12*c12s*an1**2*c22+2*c22*c11*an2s*c12*an1+c22*c11*a0*c12*
     & an1-2*c22**2*c11*an1s*an1+c2*an1**2*c11*c22+c12r*an1**2*c11*
     & c22-c22r*an1**2*c11*c12-2*an2s*c12**3*an1-a0*c12**3*an1+c2*an1*
     & *2*c12**2+c22s*an1**2*c12**2)/(c12*an2-c22*an1)/c11**2*gs+
     & 1/an1**2*(-c22*c11*an1*c12*an2+an1*c12**3*an2-c12**2*an1**2*
     & c22+c22**2*c11*an1**2)/(c12*an2-c22*an1)/c11**2*gss+1/an1**2*(-
     & 2*c12**2*an1s*an2*an1+c12*c1*an1**2*an2+c12*c12s*an1**2*an2+2*
     & c22*c11*an1s*an2*an1-c22*c11*a0*an1**2-2*c22*c11*an2s*an1**2-
     & c2*an1**2*c11*an2+c22r*an1**3*c11-c12r*an1**2*c11*an2+c12**2*
     & a0*an1**2+2*c12**2*an2s*an1**2-c12*c2*an1**3-c12*c22s*an1**3)/(
     & c12*an2-c22*an1)/c11**2*ff+1/an1**2*(-an1**2*c12**2*an2+c12*
     & an1**3*c22)/(c12*an2-c22*an1)/c11**2*ffs+1/an1**2*(-an1**3*c11*
     & c22+an1**2*c11*c12*an2)/(c12*an2-c22*an1)/c11**2*ffr+1/an1**2*(
     & -2*c12**2*an2s*c1*an1-c22s*an1*c12**2*an1s-c2*an1*c12**2*an1s+
     & c1s*an1*c12**2*an2-an1ss*c12**3*an2-2*c12**2*an1s**2*c22+c22r*
     & an1*c11*c12*an1s-c12r*an1*c11*an1s*c22+c12r*an1*c11*an2*c1-
     & c22r*an1**2*c11*c1-c0*an1*c11*c12*an2+2*an2s*c12**3*an1s-c2*
     & an1*c11*an1s*c22-c12*c1s*an1**2*c22+c12*c22s*an1**2*c1+c2*an1*
     & c11*an2*c1+c12**2*an1ss*c22*an1-c12**2*a0*c1*an1+c22*c11*an1ss*
     & c12*an2-2*c22*c11*an1s*an2*c1+c22*c11*a0*c1*an1-c22**2*c11*
     & an1ss*an1+c0*an1**2*c11*c22+c12*c12s*an1*an1s*c22-c12*c1**2*
     & an1*an2-c12*c12s*an1*an2*c1+c12*c2*an1**2*c1-2*c22*c11*an2s*
     & c12*an1s+a0*c12**3*an1s+c12*c1*an1*an1s*c22+2*c12**2*an1s*an2*
     & c1+2*c22**2*c11*an1s**2+2*c22*c11*an2s*c1*an1-c22*c11*a0*c12*
     & an1s-c1r*an1*c11*c12*an2+c1r*an1**2*c11*c22)/(c12*an2-c22*an1)
     & /c11**2*g
                     us=us4(i1,i2,i3)
                     ! uss=uss2(i1,i2,i3) 
                     usss=usss2(i1,i2,i3)
               ! *****************
               !$$$    ! gdExact(ntd,nxd,nyd,nzd,x,y,z,n,t,value)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue0)
               !$$$    
               !$$$    call gdExact(0,0,0,0,xy(i1-2,i2,i3,0),xy(i1-2,i2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1-1,i2,i3,0),xy(i1-1,i2,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1+1,i2,i3,0),xy(i1+1,i2,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1+2,i2,i3,0),xy(i1+2,i2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$
               !$$$    ure   = (ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(0))
               !$$$    urre=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(0)**2)
               !$$$    urrre = (-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(0)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-2,i3,0),xy(i1,i2-2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+2,i3,0),xy(i1,i2+2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$    use=(ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(1))
               !$$$    usse=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(1)**2)
               !$$$    ussse=(-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(1)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue4)
               !$$$    urse=(ue4-ue3-ue2+ue1)/(4.*dr(0)*dr(1))
               ! *****************
                     ur= (g - an2*us -a0*u(i1,i2,i3))/an1
                     gb=b0*u(i1,i2,i3)+b1*us+b3*usss+bf ! this is really: urrr+br2*urr
                 ! write(*,'("bcopt:side,is1=",i2,i3," i1,i2,i3=",3i3," b0,b1,b3,bf,br2 =",6f10.4)') side,is1,i1,i2,i3,b0,b1,b3,bf,br2
                 ! write(*,'("      g,gr,grr,ff,ffr,ffs    =",6f11.6)') g,gr,grr,ff,ffr,ffs
                 ! write(*,'("      an1,an2,an1r,an2r,an2rr  =",5f10.6)') an1,an2,an1r,an2r,an2rr
               !   urrree=b0*u(i1,i2,i3)+b1*use+b2*usse+b3*ussse+bf
               !
               !    write(*,'("  (x,y)=(",f6.3,",",f6.3,")  ur=",e11.3," exact=",e11.3," gb =",e11.3," exact=",e11.3," urrree=",e11.3)')!               xy(i1,i2,i3,0),xy(i1,i2,i3,1),ur,ure,gb,urrre,urrree
               !    write(*,'("  us=",e11.3," use=",e11.3," uss =",e11.3," usse=",e11.3," usss=",e11.3," ussse=",e11.3)') !     us,use,uss,usse,usss,ussse
               !
               !    urrf=( ff - (c12*urse +c22*usse + c1*ure + c2*use) )/c11
               !
               !    write(*,'(" c11,c12,c22,c1,c2=",5f10.3,"  urre=",e11.3," urrf=[ff- (c12*urs+...)]/c11=",e11.3') c11,c12,c22,c1,c2,urre,urrf
               !    write(*,'(" rxx,ryy,sxx,syy,rxr,rxs,ryr,rys=",8f10.3') rxx,ryy,sxx,syy,rxr,rxs,ryr,rys
                     ! write(*,'("bcopt:side=",i2," i1,i2,i3=",3i3," b0,b1,b3,bf,br2 =",6f10.4)') side,i1,i2,i3,b0,b1,b3,bf,br2
                     ! On side==1 we change the sign of br2 and the forcing
                     br2=-nsign*br2
                     u(i1-is1,i2,i3) = (3.+br2*drn)/(3.-br2*drn)*u(i1+
     & is1,i2,i3)-2*br2*drn/(3.-br2*drn)*u(i1,i2,i3)+nsign*(gb*drn**3+
     & 6*ur*drn)/(3.-br2*drn)
                     u(i1-2*is1,i2,i3) = u(i1+2*is1,i2,i3) +16*br2*
     & drn/(3.-br2*drn)*u(i1+is1,i2,i3)-16*br2*drn/(3.-br2*drn)*u(i1,
     & i2,i3)+nsign*(12*ur*drn**2*br2+12*ur*drn+8*gb*drn**3)/(3.-br2*
     & drn)
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                    ! write(*,'("NeumEqn: extrap interp-ghost i1,i2=",2i3," u(-1),u(-2)=",2e12.4)') i1,i2,u(i1-  is1,i2-  is2,i3-  is3),u(i1-2*is1,i2-2*is2,i3-2*is3)
                   end if
                 end do
                 end do
                 end do
                end if
              else
               ! assign 2-ghost and boundary pt
                if( gridType.eq.rectangular )then
                  if( a1.eq.0. )then
                    write(*,*) 'bcOpt:ERROR: a1=0!'
                    stop 2
                  end if
               !   write(*,'(''bcOpt:4th-order neumannPDE (rect) n2a,n2b='',2i3)') n2a,n2b
                  drn=dx(axis)
                  nsign = 2*side-1
                  br2=-nsign*a0/(a1*nsign)
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                   j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                   j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! the rhs for the mixed BC is stored in the ghost point value of 
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Cartesian grids use dx: 
                      g=0.
                      ff=0.
                       ffr=0.
                        gs=0.
                        gss=0.
                     ur=( g - a0*u(i1,i2,i3) )/(a1*nsign)
                     gb= ffr - (gss - a0*ff )/(a1*nsign) ! This is u_xxx + a0/(a1*nsign)*( u_xx )
                     u(i1-is1,i2,i3) = (3.+br2*drn)/(3.-br2*drn)*u(i1+
     & is1,i2,i3)-2*br2*drn/(3.-br2*drn)*u(i1,i2,i3)+nsign*(gb*drn**3+
     & 6*ur*drn)/(3.-br2*drn)
                     u(i1-2*is1,i2,i3) = u(i1+2*is1,i2,i3) +16*br2*
     & drn/(3.-br2*drn)*u(i1+is1,i2,i3)-16*br2*drn/(3.-br2*drn)*u(i1,
     & i2,i3)+nsign*(12*ur*drn**2*br2+12*ur*drn+8*gb*drn**3)/(3.-br2*
     & drn)
               !   write(*,'(''bcopt: i1,i2,i3,g,ffr,gss,u,uss ='',3i3,5f11.6)') i1,i2,i3,g,ffr,gss,u(i1,i2,i3),uss
               !  write(*,'('' i1,i2,i3,ur,urrr,ffr,gss ='',3i3,4e11.2)') i1,i2,i3,ur,urrr,ffr,gss
               !  write(*,'('' i1,i2,i3,f,f,f='',3i3,4e11.2)') i1,i2,i3,f(i1,i2,i3),f(i1+2*is1,i2+2*is2,i3),f(i1+is1,i2+is2,i3)
               !      u(j1,j2,j3)=u(i1+is1,i2+is2,i3+is3)
               !      u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*is3)
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                   end if
                 end do
                 end do
                 end do
                else
                  ! **** curvilinear case ****
                  if( axis.gt.1 )then
                    write(*,*) 'bcOpt:ERROR: this option not 
     & implemented yet'
                    write(*,*) 'axis=',axis
                    stop 12
                  end if
                  ! write(*,*) 'bcOpt:4th-order neumann (curvilinear- R)'
                  nsign = 2*side-1
                  drn=dr(axis)
                  cf1=3.*nsign
                  alpha1=a1*nsign
                  ma = m33-2*is1 - 2*5*is2  ! 2nd ghost
                  mb = m33-  is1 - 5*is2    ! 1st ghost
                  mc = m33                  ! diagonal
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                    j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                    j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! the rhs for the mixed BC is stored in the ghost point value of f
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Curvilinear grids use dr:
                      ff=0.
                      ffr=0.
                      ffs=0.
                      fft=0.
                      g=0.
                        gs=0.
                        gss=0.
                        gt=0.
                        gtt=0.
                        gst=0.
                      rxi=rx(i1,i2,i3)
                      ryi=ry(i1,i2,i3)
                      sxi=sx(i1,i2,i3)
                      syi=sy(i1,i2,i3)
                      rxr=rxr2(i1,i2,i3)
                      rxs=rxs2(i1,i2,i3)
                      ryr=ryr2(i1,i2,i3)
                      rys=rys2(i1,i2,i3)
                      sxr=sxr2(i1,i2,i3)
                      sxs=sxs2(i1,i2,i3)
                      syr=syr2(i1,i2,i3)
                      sys=sys2(i1,i2,i3)
                      rxx=rxx22(i1,i2,i3)
                      ryy=ryy22(i1,i2,i3)
                      rxrr=rxrr2(i1,i2,i3)
                      rxrs=rxrs2(i1,i2,i3)
                      rxss=rxss2(i1,i2,i3)
                      ryrr=ryrr2(i1,i2,i3)
                      ryrs=ryrs2(i1,i2,i3)
                      ryss=ryss2(i1,i2,i3)
                      sxx=sxx22(i1,i2,i3)
                      syy=syy22(i1,i2,i3)
                      sxrr=sxrr2(i1,i2,i3)
                      sxrs=sxrs2(i1,i2,i3)
                      sxss=sxss2(i1,i2,i3)
                      syrr=syrr2(i1,i2,i3)
                      syrs=syrs2(i1,i2,i3)
                      syss=syss2(i1,i2,i3)
                      rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                      ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                      rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                      ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                      sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                      syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                      sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                      syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                      alpha1=a1*nsign  ! nsign=2*side-1
                      alpha2=a1*nsign
                       rxNormI=1./sqrt(rxi**2+ryi**2)
                       rxNormIs=-(rxi*rxs+ryi*rys)*rxNormI**3
                       rxNormIss=-(rxi*rxss+ryi*ryss+rxs*rxs+rys*rys)*
     & rxNormI**3 -3.*(rxi*rxs+ryi*rys)*rxNormI**2*rxNormIs
                       n1=rxi*rxNormI
                       n1s=rxs*rxNormI + rxi*rxNormIs
                       n1ss=rxss*rxNormI + 2.*rxs*rxNormIs + rxi*
     & rxNormIss
                       n2=ryi*rxNormI
                       n2s=rys*rxNormI + ryi*rxNormIs
                       n2ss=ryss*rxNormI + 2.*rys*rxNormIs + ryi*
     & rxNormIss
                       an1=alpha1*(n1*rxi+n2*ryi)
                       an2=alpha2*(n1*sxi+n2*syi)
                       an1s=alpha1*(n1*rxs+n2*rys+n1s*rxi+n2s*ryi)
                       an1ss=alpha1*(n1*rxss+n2*ryss+2.*(n1s*rxs+n2s*
     & rys)+n1ss*rxi+n2ss*ryi)
                       an2s=alpha2*(n1*sxs+n2*sys + n1s*sxi+n2s*syi)
                       an2ss=alpha2*(n1*sxss+n2*syss + 2.*(n1s*sxs+n2s*
     & sys) + n1ss*sxi+n2ss*syi)
                      c11=rxi**2+ryi**2
                      c11r=2.*(rxi*rxr+ryi*ryr)
                      c11s=2.*(rxi*rxs+ryi*rys)
                      c12=2.*(rxi*sxi+ryi*syi)
                      c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                      c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                      c22=sxi**2+syi**2
                      c22r=2.*(sxi*sxr+syi*syr)
                      c22s=2.*(sxi*sxs+syi*sys)
                      c1=rxx+ryy
                      c1r=rxxr+ryyr
                      c1s=rxxs+ryys
                      c2=sxx+syy
                      c2r=sxxr+syyr
                      c2s=sxxs+syys
                      c0=0.
                      c0r=0.
                      c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                      b0=-(c12*c1*an1**2*an2*c0+c1s*an1*a0*c12**2*an2-
     & c22s*an1*c12**2*an1s*a0-c0s*an1**2*c12**2*an2+2*an2s*c12**3*
     & an1s*a0+c12**2*an1ss*a0*c22*an1-2*c12**2*an2s*c1*an1*a0-c0r*
     & an1**3*c11*c22+c0r*an1**2*c11*c12*an2+c1r*an1**2*c11*a0*c22-
     & c22r*an1**2*c11*c1*a0-c1r*an1*c11*a0*c12*an2-c12r*an1**2*c11*
     & an2*c0+c12r*an1*c11*an2*c1*a0-c2*an1**2*c11*an2*c0+c2*an1*c11*
     & an2*c1*a0+c22r*an1**3*c11*c0-c22**2*c11*an1ss*a0*an1+c22*c11*
     & c1*an1*a0**2-c22*c11*c12*an1s*a0**2-2*c22*c11*an2s*c0*an1**2+2*
     & c22**2*c11*an1s**2*a0-c12*c1s*an1**2*a0*c22-c12*c22s*an1**3*c0-
     & c12*c2*an1**3*c0-c12*c1**2*an1*an2*a0+c12*c2*an1**2*c1*a0+2*
     & c12**2*an2s*c0*an1**2-an1ss*a0*c12**3*an2-2*c12**2*an1s*an2*c0*
     & an1+c12**3*an1s*a0**2+2*c22*c11*an2s*c1*an1*a0-2*c22*c11*an2s*
     & c12*an1s*a0+c12*c12s*an1*an1s*a0*c22-c12*c12s*an1*an2*c1*a0+
     & c12*c0s*an1**3*c22+c12*c1*an1*an1s*a0*c22+c12**2*a0*c0*an1**2-
     & 2*c12**2*an1s**2*a0*c22-c12**2*c1*an1*a0**2+2*c12**2*an1s*an2*
     & c1*a0+c22r*an1*c11*c12*an1s*a0-c12r*an1*c11*an1s*a0*c22-c0*an1*
     & c11*a0*c12*an2-c2*an1*c11*an1s*a0*c22+c22*c11*an1ss*a0*c12*an2-
     & 2*c22*c11*an1s*an2*c1*a0+2*c22*c11*an1s*an2*c0*an1+c12*c12s*
     & an1**2*an2*c0+c12*c22s*an1**2*c1*a0-c2*an1*c12**2*an1s*a0)/an1*
     & *2/(c12*an2-c22*an1)/c11**2
                      b1=1/an1**2*(2*c12**2*an2s*c1*an1*an2+c12*c12s*
     & an1**2*an2s*c22+c12*c12s*an1**2*a0*c22+c22r*an1**2*c11*c12*a0-
     & c22r*an1*c11*c12*an1s*an2+c22r*an1**2*c11*c1*an2+c1r*an1*c11*
     & an2**2*c12-c1r*an1**2*c11*an2*c22-c12*c12s*an1**2*an2*c2-c12*
     & c12s*an1*an1s*an2*c22-c2r*an1**2*c11*c12*an2+c12**2*a0*c1*an1*
     & an2+3*c12**2*an1s*an2*c2*an1-2*c12**2*an1s*an2s*an1*c22+2*c12**
     & 3*an2s**2*an1-c12r*an1*c11*c1*an2**2-c2*an1*c11*c1*an2**2+c0*
     & an1*c11*an2**2*c12-c0*an1**2*c11*an2*c22+c12r*an1**2*c11*an2*
     & c2-3*c22*c11*an2s*c12*a0*an1+2*c22*c11*an2s*c12*an1s*an2+c2**2*
     & an1**2*c11*an2-c22*c11*c12*a0**2*an1+2*c22*c11*an1s*c1*an2**2-
     & c22*c11*an1ss*an2**2*c12-2*c22*c11*an2s*c1*an1*an2+c22*c11*
     & an2ss*an1*c12*an2+c22*c11*a0*c12*an1s*an2-c22*c11*an1s*an2*c2*
     & an1+2*c22**2*c11*an1s*an2s*an1+2*c22**2*c11*an1s*a0*an1+c22**2*
     & c11*an1ss*an2*an1+3*an2s*c12**3*a0*an1-2*an2s*c12**3*an1s*an2-
     & an2ss*an1*c12**3*an2+2*c12**2*an1s**2*an2*c22-2*c12**2*an1s*c1*
     & an2**2+c12*c1**2*an1*an2**2-c12*c0*an1**3*c22+c12*c22s*an1**3*
     & c2-2*c12**2*an1s*a0*an1*c22-c12**2*an1ss*an2*c22*an1-a0*c12**3*
     & an1s*an2+c12**2*an2ss*an1**2*c22-2*c12**2*a0*c2*an1**2-3*c12**
     & 2*an2s*c2*an1**2-2*c12*c1*an1**2*an2*c2+c12*c1*an1**2*an2s*c22+
     & c12*c1*an1**2*a0*c22-2*c22*c11*c12*an2s**2*an1+c22*c11*an2s*c2*
     & an1**2-c12*c22s*an1**2*c1*an2+c12*c1s*an1**2*an2*c22-c22*c11*
     & a0*c1*an1*an2-c12r*an1**2*c11*an2s*c22-c12r*an1**2*c11*a0*c22+
     & c12r*an1*c11*an1s*an2*c22+c22r*an1**2*c11*c12*an2s+c12**3*a0**
     & 2*an1-c12*c2s*an1**3*c22-c22**2*c11*an2ss*an1**2-2*c22**2*c11*
     & an1s**2*an2-c22r*an1**3*c11*c2+c2r*an1**3*c11*c22-c12*c1*an1*
     & an1s*an2*c22+c12*c12s*an1*c1*an2**2+c22s*an1*c12**2*an1s*an2-
     & c1s*an1*an2**2*c12**2+c2s*an1**2*c12**2*an2-c22s*an1**2*c12**2*
     & a0+c0*an1**2*c12**2*an2-c22s*an1**2*c12**2*an2s+c12*c2**2*an1**
     & 3+an1ss*an2**2*c12**3)/(c12*an2-c22*an1)/c11**2
                      br2=1/an1*(-c11s*an1*c12**2*an2+2*c12**2*an2s*
     & c11*an1+c12**2*a0*c11*an1+2*c12*c1*an1*an2*c11+c12*c12s*an1*
     & an2*c11-c12*c2*an1**2*c11-c12*c22s*an1**2*c11+c12*c11s*an1**2*
     & c22-2*c22*c11**2*an2s*an1-c22*c11**2*a0*an1+2*c22*c11**2*an1s*
     & an2-c1*an1**2*c11*c22-c2*an1*c11**2*an2+c22r*an1**2*c11**2-
     & c12r*an1*c11**2*an2+c11r*an1*c11*c12*an2-c11r*an1**2*c11*c22-2*
     & c12**2*an1s*an2*c11)/(c12*an2-c22*an1)/c11**2
                      b3=-(an2*c12**2-an2*c22*c11-c22*an1*c12)/an1/c11*
     & *2
                      bf=1/an1**2*(2*c12**2*an1s*an1*c22-c12*c1*an1**2*
     & c22-c12*c12s*an1**2*c22+2*c22*c11*an2s*c12*an1+c22*c11*a0*c12*
     & an1-2*c22**2*c11*an1s*an1+c2*an1**2*c11*c22+c12r*an1**2*c11*
     & c22-c22r*an1**2*c11*c12-2*an2s*c12**3*an1-a0*c12**3*an1+c2*an1*
     & *2*c12**2+c22s*an1**2*c12**2)/(c12*an2-c22*an1)/c11**2*gs+
     & 1/an1**2*(-c22*c11*an1*c12*an2+an1*c12**3*an2-c12**2*an1**2*
     & c22+c22**2*c11*an1**2)/(c12*an2-c22*an1)/c11**2*gss+1/an1**2*(-
     & 2*c12**2*an1s*an2*an1+c12*c1*an1**2*an2+c12*c12s*an1**2*an2+2*
     & c22*c11*an1s*an2*an1-c22*c11*a0*an1**2-2*c22*c11*an2s*an1**2-
     & c2*an1**2*c11*an2+c22r*an1**3*c11-c12r*an1**2*c11*an2+c12**2*
     & a0*an1**2+2*c12**2*an2s*an1**2-c12*c2*an1**3-c12*c22s*an1**3)/(
     & c12*an2-c22*an1)/c11**2*ff+1/an1**2*(-an1**2*c12**2*an2+c12*
     & an1**3*c22)/(c12*an2-c22*an1)/c11**2*ffs+1/an1**2*(-an1**3*c11*
     & c22+an1**2*c11*c12*an2)/(c12*an2-c22*an1)/c11**2*ffr+1/an1**2*(
     & -2*c12**2*an2s*c1*an1-c22s*an1*c12**2*an1s-c2*an1*c12**2*an1s+
     & c1s*an1*c12**2*an2-an1ss*c12**3*an2-2*c12**2*an1s**2*c22+c22r*
     & an1*c11*c12*an1s-c12r*an1*c11*an1s*c22+c12r*an1*c11*an2*c1-
     & c22r*an1**2*c11*c1-c0*an1*c11*c12*an2+2*an2s*c12**3*an1s-c2*
     & an1*c11*an1s*c22-c12*c1s*an1**2*c22+c12*c22s*an1**2*c1+c2*an1*
     & c11*an2*c1+c12**2*an1ss*c22*an1-c12**2*a0*c1*an1+c22*c11*an1ss*
     & c12*an2-2*c22*c11*an1s*an2*c1+c22*c11*a0*c1*an1-c22**2*c11*
     & an1ss*an1+c0*an1**2*c11*c22+c12*c12s*an1*an1s*c22-c12*c1**2*
     & an1*an2-c12*c12s*an1*an2*c1+c12*c2*an1**2*c1-2*c22*c11*an2s*
     & c12*an1s+a0*c12**3*an1s+c12*c1*an1*an1s*c22+2*c12**2*an1s*an2*
     & c1+2*c22**2*c11*an1s**2+2*c22*c11*an2s*c1*an1-c22*c11*a0*c12*
     & an1s-c1r*an1*c11*c12*an2+c1r*an1**2*c11*c22)/(c12*an2-c22*an1)
     & /c11**2*g
                     us=us4(i1,i2,i3)
                     ! uss=uss2(i1,i2,i3) 
                     usss=usss2(i1,i2,i3)
               ! *****************
               !$$$    ! gdExact(ntd,nxd,nyd,nzd,x,y,z,n,t,value)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue0)
               !$$$    
               !$$$    call gdExact(0,0,0,0,xy(i1-2,i2,i3,0),xy(i1-2,i2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1-1,i2,i3,0),xy(i1-1,i2,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1+1,i2,i3,0),xy(i1+1,i2,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1+2,i2,i3,0),xy(i1+2,i2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$
               !$$$    ure   = (ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(0))
               !$$$    urre=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(0)**2)
               !$$$    urrre = (-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(0)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-2,i3,0),xy(i1,i2-2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+2,i3,0),xy(i1,i2+2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$    use=(ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(1))
               !$$$    usse=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(1)**2)
               !$$$    ussse=(-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(1)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue4)
               !$$$    urse=(ue4-ue3-ue2+ue1)/(4.*dr(0)*dr(1))
               ! *****************
                   ! evaulate the defect when the 2-ghost pts and bndry pt are zero:
                   u(i1,i2,i3)=0.
                   u(i1-is1,i2-is2,i3)=0.
                   u(i1-2*is1,i2-2*is2,i3)=0.
                   gc=ff-op2d4(i1,i2,i3)
                   ca=c(ma,i1,i2,i3)
                   cb=c(mb,i1,i2,i3)
                   cc=c(mc,i1,i2,i3)
                     ga= (g - an2*us -a0*u(i1,i2,i3))/an1  ! ur
                     gb=b0*u(i1,i2,i3)+b1*us+b3*usss+bf ! this is really: urrr+br2*urr
                     ! write(*,'("bcopt:side=",i2," i1,i2,i3=",3i3," b0,b1,b3,bf,br2 =",6f10.4)') side,i1,i2,i3,b0,b1,b3,bf,br2
                     ! On side==1 we change the sign of br2 and the forcing
                     br2=-nsign*br2
                     ga=-nsign*ga
                     gb=-nsign*gb
                     u(i1-is1,i2,i3) = -(3*cc-16*br2*drn*ca+cc*br2*drn)
     & /(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1+is1,i2,i3)-
     & 2*br2*drn*ca/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(
     & i1+2*is1,i2,i3)-(24*br2*drn**2*ca*ga-cc*gb*drn**3-6*cc*ga*drn-
     & 2*br2*drn*gc)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)
                     u(i1-2*is1,i2,i3) = (-16*cc*br2*drn-16*br2*drn*cb)
     & /(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1+is1,i2,i3)+
     & (-3*cc+cc*br2*drn+2*br2*drn*cb)/(-3*cc+cc*br2*drn+16*br2*drn*
     & ca+2*br2*drn*cb)*u(i1+2*is1,i2,i3)+(16*br2*drn*gc+24*ga*drn**2*
     & br2*cb+8*cc*gb*drn**3+12*cc*ga*drn+12*ga*drn**2*cc*br2)/(-3*cc+
     & cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)
                     u(i1,i2,i3) = -cb/cc*u(i1-is1,i2,i3)-ca/cc*u(i1-2*
     & is1,i2,i3)+gc/cc
               !     write(*,'("neumannPDE:side=",i2," i1,i2,i3=",3i3," b0,b1,b3,bf,br2 =",6f10.4)') side,i1,i2,i3,b0,b1,b3,bf,br2
               !     write(*,'(" ca,cb,cc=",3e11.2,"   after: res(PDE) = ",6e10.2)') ca,cb,cc,op2d4(i1,i2,i3)-ff
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                   end if
                 end do
                 end do
                 end do
                end if
              end if
            else if( axis.eq.1 .and. nd.eq.2 )then
              if( solveEquationWithBC.eq.0 )then
                ! *wdh* 110213 -- FINISH ME for the heat operator 
                ! if( equationToSolve.ne.laplaceEquation .and. equationToSolve.ne.heatEquationOperator)then
                !   write(*,'("Ogmg:bcOpt:neumannAndEqn(order4):ERROR: only implemented for equation=laplace or heatEquationOperator")')
                if( equationToSolve.ne.laplaceEquation )then
                  write(*,'("Ogmg:bcOpt:neumannAndEqn(order4):ERROR: 
     & only implemented for equation=laplace")')
                  write(*,'("equationToSolve=",i2)') equationToSolve
                  write(*,'("gridType=",i2)') gridType
                  stop 6064
                end if
                if( gridType.eq.rectangular )then
                  if( a1.eq.0. )then
                    write(*,*) 'bcOpt:ERROR: a1=0!'
                    stop 2
                  end if
                  ! write(*,'("bcOpt:order4 neumannAndEqnEvenNewer (rect) grid=",i3," n1a,n1b,n2a,n2b=",4i3)') grid,n1a,n1b,n2a,n2b
                  drn=dx(axis)
                  nsign = 2*side-1
                  br2=-nsign*a0/(a1*nsign)
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                   j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                   j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! Note: the rhs for the mixed BC is stored in the ghost point value of f
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Cartesian grids use dx: 
                      g=0.
                      ff=0.
                        ffs=0.
                        gr=0.
                        grr=0.
                     us=( g - a0*u(i1,i2,i3) )/(a1*nsign)
                     gb= ffs - (grr - a0*ff )/(a1*nsign) ! This is u_yyy + a0/(a1*nsign)*( u_yy )
                     u(i1,i2-is2,i3) = (3.+br2*drn)/(3.-br2*drn)*u(i1,
     & i2+is2,i3)-2*br2*drn/(3.-br2*drn)*u(i1,i2,i3)+nsign*(gb*drn**3+
     & 6*us*drn)/(3.-br2*drn)
                     u(i1,i2-2*is2,i3) = u(i1,i2+2*is2,i3) +16*br2*
     & drn/(3.-br2*drn)*u(i1,i2+is2,i3)-16*br2*drn/(3.-br2*drn)*u(i1,
     & i2,i3)+nsign*(12*us*drn**2*br2+12*us*drn+8*gb*drn**3)/(3.-br2*
     & drn)
                   ! for testing: 
                   !  u(j1,j2,j3)=u(i1+is1,i2+is2,i3+is3)
                   !  u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*is3)
                    ! write(*,'(''bcopt: i1,i2,i3,g,ffs,grr,u,us ='',3i3,6e12.3)') i1,i2,i3,g,ffs,grr,u(i1,i2,i3),us,gb
                    ! write(*,'('' i1,i2,i3,f,f,f='',3i3,4e11.2)') i1,i2,i3,f(i1,i2,i3),f(i1+2*is1,i2+2*is2,i3),f(i1+is1,i2+is2,i3)
                    ! write(*,'('' u(-1),u(-2)='',4e11.2)') u(j1,j2,j3),u(i1-2*is1,i2-2*is2,i3-2*is3)
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                    ! write(*,'("NeumEqn: extrap interp-ghost i1,i2=",2i3," u(-1),u(-2)=",2e12.4)') i1,i2,u(i1-  is1,i2-  is2,i3-  is3),u(i1-2*is1,i2-2*is2,i3-2*is3)
                   end if
                 end do
                 end do
                 end do
                else
                  ! **** curvilinear case ****
                  if( axis.gt.1 )then
                    write(*,*) 'bcOpt:ERROR: this option not 
     & implemented yet'
                    write(*,*) 'axis=',axis
                    stop 12
                  end if
                  ! write(*,'("bcOpt:order4 neumannAndEqnEvenNewer (curv) grid=",i3," n1a,n1b,n2a,n2b=",4i3)') grid,n1a,n1b,n2a,n2b
                  nsign = 2*side-1
                  drn=dr(axis)
                  cf1=3.*nsign
                  alpha1=a1*nsign
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                    j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                    j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! the rhs for the mixed BC is stored in the ghost point value of f
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Curvilinear grids use dr:
                      ff=0.
                      ffr=0.
                      ffs=0.
                      fft=0.
                      g=0.
                        gr=0.
                        grr=0.
                        gt=0.
                        gtt=0.
                        grt=0.
                      rxi=rx(i1,i2,i3)
                      ryi=ry(i1,i2,i3)
                      sxi=sx(i1,i2,i3)
                      syi=sy(i1,i2,i3)
                      rxr=rxr2(i1,i2,i3)
                      rxs=rxs2(i1,i2,i3)
                      ryr=ryr2(i1,i2,i3)
                      rys=rys2(i1,i2,i3)
                      sxr=sxr2(i1,i2,i3)
                      sxs=sxs2(i1,i2,i3)
                      syr=syr2(i1,i2,i3)
                      sys=sys2(i1,i2,i3)
                      rxx=rxx22(i1,i2,i3)
                      ryy=ryy22(i1,i2,i3)
                      rxrr=rxrr2(i1,i2,i3)
                      rxrs=rxrs2(i1,i2,i3)
                      rxss=rxss2(i1,i2,i3)
                      ryrr=ryrr2(i1,i2,i3)
                      ryrs=ryrs2(i1,i2,i3)
                      ryss=ryss2(i1,i2,i3)
                      sxx=sxx22(i1,i2,i3)
                      syy=syy22(i1,i2,i3)
                      sxrr=sxrr2(i1,i2,i3)
                      sxrs=sxrs2(i1,i2,i3)
                      sxss=sxss2(i1,i2,i3)
                      syrr=syrr2(i1,i2,i3)
                      syrs=syrs2(i1,i2,i3)
                      syss=syss2(i1,i2,i3)
                      rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                      ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                      rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                      ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                      sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                      syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                      sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                      syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                      alpha1=a1*nsign  ! nsign=2*side-1
                      alpha2=a1*nsign
                       sxNormI=1./sqrt(sxi**2+syi**2)
                       sxNormIr=-(sxi*sxr+syi*syr)*sxNormI**3
                       sxNormIrr=-(sxi*sxrr+syi*syrr+sxr*sxr+syr*syr)*
     & sxNormI**3 -3.*(sxi*sxr+syi*syr)*sxNormI**2*sxNormIr
                       n1=sxi*sxNormI
                       n1r=sxr*sxNormI + sxi*sxNormIr
                       n1rr=sxrr*sxNormI + 2.*sxr*sxNormIr + sxi*
     & sxNormIrr
                       n2=syi*sxNormI
                       n2r=syr*sxNormI + syi*sxNormIr
                       n2rr=syrr*sxNormI + 2.*syr*sxNormIr + syi*
     & sxNormIrr
                       an1=alpha1*(n1*rxi+n2*ryi)
                       an2=alpha2*(n1*sxi+n2*syi)
                       an1r=alpha1*(n1*rxr+n1r*rxi + n2*ryr+n2r*ryi)
                       an1rr=alpha1*(n1*rxrr+n2*ryrr+ 2.*(n1r*rxr+n2r*
     & ryr) + n1rr*rxi+n2rr*ryi)
                       an2r=alpha2*(n1*sxr+n1r*sxi + n2*syr+n2r*syi)
                       an2rr=alpha2*(n1*sxrr+n2*syrr+ 2.*(n1r*sxr+n2r*
     & syr) + n1rr*sxi+n2rr*syi)
                      c11=rxi**2+ryi**2
                      c11r=2.*(rxi*rxr+ryi*ryr)
                      c11s=2.*(rxi*rxs+ryi*rys)
                      c12=2.*(rxi*sxi+ryi*syi)
                      c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                      c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                      c22=sxi**2+syi**2
                      c22r=2.*(sxi*sxr+syi*syr)
                      c22s=2.*(sxi*sxs+syi*sys)
                      c1=rxx+ryy
                      c1r=rxxr+ryyr
                      c1s=rxxs+ryys
                      c2=sxx+syy
                      c2r=sxxr+syyr
                      c2s=sxxs+syys
                      c0=0.
                      c0r=0.
                      c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                      b0=-(c12*c2*an2**2*an1*c0+c2r*an2*a0*c12**2*an1-
     & c11r*an2*c12**2*an2r*a0-c0r*an2**2*c12**2*an1+2*an1r*c12**3*
     & an2r*a0+c12**2*an2rr*a0*c11*an2-2*c12**2*an1r*c2*an2*a0-c0s*
     & an2**3*c22*c11+c0s*an2**2*c22*c12*an1+c2s*an2**2*c22*a0*c11-
     & c11s*an2**2*c22*c2*a0-c2s*an2*c22*a0*c12*an1-c12s*an2**2*c22*
     & an1*c0+c12s*an2*c22*an1*c2*a0-c1*an2**2*c22*an1*c0+c1*an2*c22*
     & an1*c2*a0+c11s*an2**3*c22*c0-c11**2*c22*an2rr*a0*an2+c11*c22*
     & c2*an2*a0**2-c11*c22*c12*an2r*a0**2-2*c11*c22*an1r*c0*an2**2+2*
     & c11**2*c22*an2r**2*a0-c12*c2r*an2**2*a0*c11-c12*c11r*an2**3*c0-
     & c12*c1*an2**3*c0-c12*c2**2*an2*an1*a0+c12*c1*an2**2*c2*a0+2*
     & c12**2*an1r*c0*an2**2-an2rr*a0*c12**3*an1-2*c12**2*an2r*an1*c0*
     & an2+c12**3*an2r*a0**2+2*c11*c22*an1r*c2*an2*a0-2*c11*c22*an1r*
     & c12*an2r*a0+c12*c12r*an2*an2r*a0*c11-c12*c12r*an2*an1*c2*a0+
     & c12*c0r*an2**3*c11+c12*c2*an2*an2r*a0*c11+c12**2*a0*c0*an2**2-
     & 2*c12**2*an2r**2*a0*c11-c12**2*c2*an2*a0**2+2*c12**2*an2r*an1*
     & c2*a0+c11s*an2*c22*c12*an2r*a0-c12s*an2*c22*an2r*a0*c11-c0*an2*
     & c22*a0*c12*an1-c1*an2*c22*an2r*a0*c11+c11*c22*an2rr*a0*c12*an1-
     & 2*c11*c22*an2r*an1*c2*a0+2*c11*c22*an2r*an1*c0*an2+c12*c12r*
     & an2**2*an1*c0+c12*c11r*an2**2*c2*a0-c1*an2*c12**2*an2r*a0)/an2*
     & *2/(c12*an1-c11*an2)/c22**2
                      b1=1/an2**2*(2*c12**2*an1r*c2*an2*an1+c12*c12r*
     & an2**2*an1r*c11+c12*c12r*an2**2*a0*c11+c11s*an2**2*c22*c12*a0-
     & c11s*an2*c22*c12*an2r*an1+c11s*an2**2*c22*c2*an1+c2s*an2*c22*
     & an1**2*c12-c2s*an2**2*c22*an1*c11-c12*c12r*an2**2*an1*c1-c12*
     & c12r*an2*an2r*an1*c11-c1s*an2**2*c22*c12*an1+c12**2*a0*c2*an2*
     & an1+3*c12**2*an2r*an1*c1*an2-2*c12**2*an2r*an1r*an2*c11+2*c12**
     & 3*an1r**2*an2-c12s*an2*c22*c2*an1**2-c1*an2*c22*c2*an1**2+c0*
     & an2*c22*an1**2*c12-c0*an2**2*c22*an1*c11+c12s*an2**2*c22*an1*
     & c1-3*c11*c22*an1r*c12*a0*an2+2*c11*c22*an1r*c12*an2r*an1+c1**2*
     & an2**2*c22*an1-c11*c22*c12*a0**2*an2+2*c11*c22*an2r*c2*an1**2-
     & c11*c22*an2rr*an1**2*c12-2*c11*c22*an1r*c2*an2*an1+c11*c22*
     & an1rr*an2*c12*an1+c11*c22*a0*c12*an2r*an1-c11*c22*an2r*an1*c1*
     & an2+2*c11**2*c22*an2r*an1r*an2+2*c11**2*c22*an2r*a0*an2+c11**2*
     & c22*an2rr*an1*an2+3*an1r*c12**3*a0*an2-2*an1r*c12**3*an2r*an1-
     & an1rr*an2*c12**3*an1+2*c12**2*an2r**2*an1*c11-2*c12**2*an2r*c2*
     & an1**2+c12*c2**2*an2*an1**2-c12*c0*an2**3*c11+c12*c11r*an2**3*
     & c1-2*c12**2*an2r*a0*an2*c11-c12**2*an2rr*an1*c11*an2-a0*c12**3*
     & an2r*an1+c12**2*an1rr*an2**2*c11-2*c12**2*a0*c1*an2**2-3*c12**
     & 2*an1r*c1*an2**2-2*c12*c2*an2**2*an1*c1+c12*c2*an2**2*an1r*c11+
     & c12*c2*an2**2*a0*c11-2*c11*c22*c12*an1r**2*an2+c11*c22*an1r*c1*
     & an2**2-c12*c11r*an2**2*c2*an1+c12*c2r*an2**2*an1*c11-c11*c22*
     & a0*c2*an2*an1-c12s*an2**2*c22*an1r*c11-c12s*an2**2*c22*a0*c11+
     & c12s*an2*c22*an2r*an1*c11+c11s*an2**2*c22*c12*an1r+c12**3*a0**
     & 2*an2-c12*c1r*an2**3*c11-c11**2*c22*an1rr*an2**2-2*c11**2*c22*
     & an2r**2*an1-c11s*an2**3*c22*c1+c1s*an2**3*c22*c11-c12*c2*an2*
     & an2r*an1*c11+c12*c12r*an2*c2*an1**2+c11r*an2*c12**2*an2r*an1-
     & c2r*an2*an1**2*c12**2+c1r*an2**2*c12**2*an1-c11r*an2**2*c12**2*
     & a0+c0*an2**2*c12**2*an1-c11r*an2**2*c12**2*an1r+c12*c1**2*an2**
     & 3+an2rr*an1**2*c12**3)/(c12*an1-c11*an2)/c22**2
                      br2=1/an2*(-c22r*an2*c12**2*an1+2*c12**2*an1r*
     & c22*an2+c12**2*a0*c22*an2+2*c12*c2*an2*an1*c22+c12*c12r*an2*
     & an1*c22-c12*c1*an2**2*c22-c12*c11r*an2**2*c22+c12*c22r*an2**2*
     & c11-2*c11*c22**2*an1r*an2-c11*c22**2*a0*an2+2*c11*c22**2*an2r*
     & an1-c2*an2**2*c22*c11-c1*an2*c22**2*an1+c11s*an2**2*c22**2-
     & c12s*an2*c22**2*an1+c22s*an2*c22*c12*an1-c22s*an2**2*c22*c11-2*
     & c12**2*an2r*an1*c22)/(c12*an1-c11*an2)/c22**2
                      b3=-(an1*c12**2-an1*c11*c22-c11*an2*c12)/an2/c22*
     & *2
                      bf=1/an2**2*(2*c12**2*an2r*an2*c11-c12*c2*an2**2*
     & c11-c12*c12r*an2**2*c11+2*c11*c22*an1r*c12*an2+c11*c22*a0*c12*
     & an2-2*c11**2*c22*an2r*an2+c1*an2**2*c22*c11+c12s*an2**2*c22*
     & c11-c11s*an2**2*c22*c12-2*an1r*c12**3*an2-a0*c12**3*an2+c1*an2*
     & *2*c12**2+c11r*an2**2*c12**2)/(c12*an1-c11*an2)/c22**2*gr+
     & 1/an2**2*(-c11*c22*an2*c12*an1+an2*c12**3*an1-c12**2*an2**2*
     & c11+c11**2*c22*an2**2)/(c12*an1-c11*an2)/c22**2*grr+1/an2**2*(-
     & 2*c12**2*an2r*an1*an2+c12*c2*an2**2*an1+c12*c12r*an2**2*an1+2*
     & c11*c22*an2r*an1*an2-c11*c22*a0*an2**2-2*c11*c22*an1r*an2**2-
     & c1*an2**2*c22*an1+c11s*an2**3*c22-c12s*an2**2*c22*an1+c12**2*
     & a0*an2**2+2*c12**2*an1r*an2**2-c12*c1*an2**3-c12*c11r*an2**3)/(
     & c12*an1-c11*an2)/c22**2*ff+1/an2**2*(-an2**2*c12**2*an1+c12*
     & an2**3*c11)/(c12*an1-c11*an2)/c22**2*ffr+1/an2**2*(-an2**3*c22*
     & c11+an2**2*c22*c12*an1)/(c12*an1-c11*an2)/c22**2*ffs+1/an2**2*(
     & -2*c12**2*an1r*c2*an2-c11r*an2*c12**2*an2r-c1*an2*c12**2*an2r+
     & c2r*an2*c12**2*an1-an2rr*c12**3*an1-2*c12**2*an2r**2*c11+c11s*
     & an2*c22*c12*an2r-c12s*an2*c22*an2r*c11+c12s*an2*c22*an1*c2-
     & c11s*an2**2*c22*c2-c0*an2*c22*c12*an1+2*an1r*c12**3*an2r-c1*
     & an2*c22*an2r*c11-c12*c2r*an2**2*c11+c12*c11r*an2**2*c2+c1*an2*
     & c22*an1*c2+c12**2*an2rr*c11*an2-c12**2*a0*c2*an2+c11*c22*an2rr*
     & c12*an1-2*c11*c22*an2r*an1*c2+c11*c22*a0*c2*an2-c11**2*c22*
     & an2rr*an2+c0*an2**2*c22*c11+c12*c12r*an2*an2r*c11-c12*c2**2*
     & an2*an1-c12*c12r*an2*an1*c2+c12*c1*an2**2*c2-2*c11*c22*an1r*
     & c12*an2r+a0*c12**3*an2r+c12*c2*an2*an2r*c11+2*c12**2*an2r*an1*
     & c2+2*c11**2*c22*an2r**2+2*c11*c22*an1r*c2*an2-c11*c22*a0*c12*
     & an2r-c2s*an2*c22*c12*an1+c2s*an2**2*c22*c11)/(c12*an1-c11*an2)
     & /c22**2*g
                     ur=ur4(i1,i2,i3)
                     ! urr=urr2(i1,i2,i3)  ! need to 2nd-order
                     urrr=urrr2(i1,i2,i3)
               ! *****************
               !$$$    ! gdExact(ntd,nxd,nyd,nzd,x,y,z,n,t,value)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue0)
               !$$$    
               !$$$    call gdExact(0,0,0,0,xy(i1-2,i2,i3,0),xy(i1-2,i2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1-1,i2,i3,0),xy(i1-1,i2,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1+1,i2,i3,0),xy(i1+1,i2,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1+2,i2,i3,0),xy(i1+2,i2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$
               !$$$    ure   = (ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(0))
               !$$$    urre=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(0)**2)
               !$$$    urrre = (-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(0)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-2,i3,0),xy(i1,i2-2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+2,i3,0),xy(i1,i2+2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$    use=(ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(1))
               !$$$    usse=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(1)**2)
               !$$$    ussse=(-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(1)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue4)
               !$$$    urse=(ue4-ue3-ue2+ue1)/(4.*dr(0)*dr(1))
               ! *****************
                     us= (g - an1*ur -a0*u(i1,i2,i3))/an2
                     gb=b0*u(i1,i2,i3)+b1*ur+b3*urrr+bf ! this is: usss+br2*uss
                     ! On side==1 we change the sign of br2 and the forcing
                     br2=-nsign*br2
                     u(i1,i2-is2,i3) = (3.+br2*drn)/(3.-br2*drn)*u(i1,
     & i2+is2,i3)-2*br2*drn/(3.-br2*drn)*u(i1,i2,i3)+nsign*(gb*drn**3+
     & 6*us*drn)/(3.-br2*drn)
                     u(i1,i2-2*is2,i3) = u(i1,i2+2*is2,i3) +16*br2*
     & drn/(3.-br2*drn)*u(i1,i2+is2,i3)-16*br2*drn/(3.-br2*drn)*u(i1,
     & i2,i3)+nsign*(12*us*drn**2*br2+12*us*drn+8*gb*drn**3)/(3.-br2*
     & drn)
               !   usssee=b0*u(i1,i2,i3)+b1*ure+b2*urre+b3*urrre+bf
                 ! write(*,'(''bcopt: i1,i2,i3,g,ffs,grr,u,us ='',3i3,6e12.3)') i1,i2,i3,g,ffs,grr,u(i1,i2,i3),us,gb
                 ! write(*,'('' u(-1),u(-2)='',4e11.2)') u(i1,i2-is2,i3),u(i1,i2-2*is2,i3)
               !  write(*,'(''bcopt:side='',i2,'' i1,i2,i3,g,ff ='',3i3,2f10.4)') side,i1,i2,i3,g,ff
               !  write(*,'("  (x,y)=(",f6.3,",",f6.3,")  us=",e11.3," use=",e11.3," usss =",e11.3," ussse=",e11.3," usssee=",e11.3)')!            xy(i1,i2,i3,0),xy(i1,i2,i3,1),us,use,usss,ussse,usssee
               !  write(*,'("  ur=",e11.3," ure=",e11.3," urr =",e11.3," urre=",e11.3," urrr=",e11.3," urrre=",e11.3)') !     ur,ure,urr,urre,urrr,urrre
               !  ussf=( ff - (c12*urse +c11*urre + c1*ure + c2*use) )/c22
               !  write(*,'(" c11,c12,c22,c1,c2=",5f9.3,"  usse=",e11.3," ussf=[ff- (c12*urs+...)]/c22=",e11.3') c11,c12,c22,c1,c2,usse,ussf
               !    write(*,'(" rxx,ryy,sxx,syy,rxr,rxs,ryr,rys=",8f10.3') rxx,ryy,sxx,syy,rxr,rxs,ryr,rys
               !  usss=ussse
               !**      u(i1-is1,i2-is2,i3-is3)=u(i1+is1,i2+is2,i3+is3)+cf1*usss+cg1*us
               !**      u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*is3)+cf2*usss+cg2*us
               !   call gdExact(0,0,0,0,xy(i1,i2-  is2,i3,0),xy(i1,i2-  is2,i3,1),0.,0,0.,ue1)
               !   call gdExact(0,0,0,0,xy(i1,i2-2*is2,i3,0),xy(i1,i2-2*is2,i3,1),0.,0,0.,ue2)
               !    u(i1,i2-is2,i3) = ue1
               !    u(i1,i2-2*is2,i3) = ue2
               !    write(*,'("bcopt:side,is2=",i2,i3," i1,i2,i3=",3i3," b0,b1,b3,bf,br2 =",6f10.4)') side,is2,i1,i2,i3,b0,b1,b3,bf,br2
               !    write(*,'("      ue1,ue2,u(i1,i2-is2,i3),u(i1,i2-2*is2,i3)=",6f10.4)') ue1,ue2,u(i1,i2-is2,i3),u(i1,i2-2*is2,i3)
               !    ue3=nsign*(gb*drn**3+6*us*drn)/(3.-br2*drn)
               !    ue4=nsign*(12*us*drn**2*br2+12*us*drn+8*gb*drn**3)/(3.-br2*drn)
               !    write(*,'("      fa1,fa2,us,gb,drn=",5f10.4)') ue3,ue4,us,gb,drn
               !    write(*,'("      g,gr,grr,ff,ffr,ffs    =",6f11.6)') g,gr,grr,ff,ffr,ffs
               !    write(*,'("      an1,an2,an1r,an2r,an2rr  =",5f10.6)') an1,an2,an1r,an2r,an2rr
               !   call gdExact(0,0,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue0)
               !   call gdExact(0,0,0,0,xy(i1,i2-2,i3,0),xy(i1,i2-2,i3,1),0.,0,0.,ue1)
               !   call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !   call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !   call gdExact(0,0,0,0,xy(i1,i2+2,i3,0),xy(i1,i2+2,i3,1),0.,0,0.,ue4)
               !   use=(ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(1))
               !   usse=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(1)**2)
               !   ussse=(-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(1)**3)
               !  write(*,'("   use,usse=",2f10.5," ussse,gb-br2*usse  =",5f10.5)') use,usse,ussse,gb-br2*usse
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                    ! write(*,'("NeumEqn: extrap interp-ghost i1,i2=",2i3," u(-1),u(-2)=",2e12.4)') i1,i2,u(i1-  is1,i2-  is2,i3-  is3),u(i1-2*is1,i2-2*is2,i3-2*is3)
                   end if
                 end do
                 end do
                 end do
                end if
              else
               ! assign 2-ghost and boundary pt
                if( gridType.eq.rectangular )then
                  if( a1.eq.0. )then
                    write(*,*) 'bcOpt:ERROR: a1=0!'
                    stop 2
                  end if
               !   write(*,'(''bcOpt:4th-order neumannPDE (rect) n2a,n2b='',2i3)') n2a,n2b
                  drn=dx(axis)
                  nsign = 2*side-1
                  br2=-nsign*a0/(a1*nsign)
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                   j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                   j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! the rhs for the mixed BC is stored in the ghost point value of 
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Cartesian grids use dx: 
                      g=0.
                      ff=0.
                        ffs=0.
                        gr=0.
                        grr=0.
                     us=( g - a0*u(i1,i2,i3) )/(a1*nsign)
                     gb= ffs - (grr - a0*ff )/(a1*nsign) ! This is u_yyy + a0/(a1*nsign)*( u_yy )
                     u(i1,i2-is2,i3) = (3.+br2*drn)/(3.-br2*drn)*u(i1,
     & i2+is2,i3)-2*br2*drn/(3.-br2*drn)*u(i1,i2,i3)+nsign*(gb*drn**3+
     & 6*us*drn)/(3.-br2*drn)
                     u(i1,i2-2*is2,i3) = u(i1,i2+2*is2,i3) +16*br2*
     & drn/(3.-br2*drn)*u(i1,i2+is2,i3)-16*br2*drn/(3.-br2*drn)*u(i1,
     & i2,i3)+nsign*(12*us*drn**2*br2+12*us*drn+8*gb*drn**3)/(3.-br2*
     & drn)
               !   write(*,'(''bcopt: i1,i2,i3,g,ffr,gss,u,uss ='',3i3,5f11.6)') i1,i2,i3,g,ffr,gss,u(i1,i2,i3),uss
               !  write(*,'('' i1,i2,i3,ur,urrr,ffr,gss ='',3i3,4e11.2)') i1,i2,i3,ur,urrr,ffr,gss
               !  write(*,'('' i1,i2,i3,f,f,f='',3i3,4e11.2)') i1,i2,i3,f(i1,i2,i3),f(i1+2*is1,i2+2*is2,i3),f(i1+is1,i2+is2,i3)
               !      u(j1,j2,j3)=u(i1+is1,i2+is2,i3+is3)
               !      u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*is3)
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                   end if
                 end do
                 end do
                 end do
                else
                  ! **** curvilinear case ****
                  if( axis.gt.1 )then
                    write(*,*) 'bcOpt:ERROR: this option not 
     & implemented yet'
                    write(*,*) 'axis=',axis
                    stop 12
                  end if
                  ! write(*,*) 'bcOpt:4th-order neumann (curvilinear- S)'
                  nsign = 2*side-1
                  drn=dr(axis)
                  cf1=3.*nsign
                  alpha1=a1*nsign
                  ma = m33-2*is1 - 2*5*is2  ! 2nd ghost
                  mb = m33-  is1 - 5*is2    ! 1st ghost
                  mc = m33                  ! diagonal
                  ! (i1,i2,i3) = boundary point
                  ! (j1,j2,j3) = ghost point
                  do i3=n3a+is3,n3b+is3
                    j3=i3-is3
                  do i2=n2a+is2,n2b+is2
                    j2=i2-is2
                  do i1=n1a+is1,n1b+is1
                    if( mask(i1,i2,i3).gt.0 )then
                     j1=i1-is1
                   ! the rhs for the mixed BC is stored in the ghost point value of f
                    ! the rhs for the mixed BC is stored in the ghost point value of f
                   ! Curvilinear grids use dr:
                      ff=0.
                      ffr=0.
                      ffs=0.
                      fft=0.
                      g=0.
                        gr=0.
                        grr=0.
                        gt=0.
                        gtt=0.
                        grt=0.
                      rxi=rx(i1,i2,i3)
                      ryi=ry(i1,i2,i3)
                      sxi=sx(i1,i2,i3)
                      syi=sy(i1,i2,i3)
                      rxr=rxr2(i1,i2,i3)
                      rxs=rxs2(i1,i2,i3)
                      ryr=ryr2(i1,i2,i3)
                      rys=rys2(i1,i2,i3)
                      sxr=sxr2(i1,i2,i3)
                      sxs=sxs2(i1,i2,i3)
                      syr=syr2(i1,i2,i3)
                      sys=sys2(i1,i2,i3)
                      rxx=rxx22(i1,i2,i3)
                      ryy=ryy22(i1,i2,i3)
                      rxrr=rxrr2(i1,i2,i3)
                      rxrs=rxrs2(i1,i2,i3)
                      rxss=rxss2(i1,i2,i3)
                      ryrr=ryrr2(i1,i2,i3)
                      ryrs=ryrs2(i1,i2,i3)
                      ryss=ryss2(i1,i2,i3)
                      sxx=sxx22(i1,i2,i3)
                      syy=syy22(i1,i2,i3)
                      sxrr=sxrr2(i1,i2,i3)
                      sxrs=sxrs2(i1,i2,i3)
                      sxss=sxss2(i1,i2,i3)
                      syrr=syrr2(i1,i2,i3)
                      syrs=syrs2(i1,i2,i3)
                      syss=syss2(i1,i2,i3)
                      rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                      ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                      rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                      ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                      sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                      syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                      sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                      syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                      alpha1=a1*nsign  ! nsign=2*side-1
                      alpha2=a1*nsign
                       sxNormI=1./sqrt(sxi**2+syi**2)
                       sxNormIr=-(sxi*sxr+syi*syr)*sxNormI**3
                       sxNormIrr=-(sxi*sxrr+syi*syrr+sxr*sxr+syr*syr)*
     & sxNormI**3 -3.*(sxi*sxr+syi*syr)*sxNormI**2*sxNormIr
                       n1=sxi*sxNormI
                       n1r=sxr*sxNormI + sxi*sxNormIr
                       n1rr=sxrr*sxNormI + 2.*sxr*sxNormIr + sxi*
     & sxNormIrr
                       n2=syi*sxNormI
                       n2r=syr*sxNormI + syi*sxNormIr
                       n2rr=syrr*sxNormI + 2.*syr*sxNormIr + syi*
     & sxNormIrr
                       an1=alpha1*(n1*rxi+n2*ryi)
                       an2=alpha2*(n1*sxi+n2*syi)
                       an1r=alpha1*(n1*rxr+n1r*rxi + n2*ryr+n2r*ryi)
                       an1rr=alpha1*(n1*rxrr+n2*ryrr+ 2.*(n1r*rxr+n2r*
     & ryr) + n1rr*rxi+n2rr*ryi)
                       an2r=alpha2*(n1*sxr+n1r*sxi + n2*syr+n2r*syi)
                       an2rr=alpha2*(n1*sxrr+n2*syrr+ 2.*(n1r*sxr+n2r*
     & syr) + n1rr*sxi+n2rr*syi)
                      c11=rxi**2+ryi**2
                      c11r=2.*(rxi*rxr+ryi*ryr)
                      c11s=2.*(rxi*rxs+ryi*rys)
                      c12=2.*(rxi*sxi+ryi*syi)
                      c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                      c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                      c22=sxi**2+syi**2
                      c22r=2.*(sxi*sxr+syi*syr)
                      c22s=2.*(sxi*sxs+syi*sys)
                      c1=rxx+ryy
                      c1r=rxxr+ryyr
                      c1s=rxxs+ryys
                      c2=sxx+syy
                      c2r=sxxr+syyr
                      c2s=sxxs+syys
                      c0=0.
                      c0r=0.
                      c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                      b0=-(c12*c2*an2**2*an1*c0+c2r*an2*a0*c12**2*an1-
     & c11r*an2*c12**2*an2r*a0-c0r*an2**2*c12**2*an1+2*an1r*c12**3*
     & an2r*a0+c12**2*an2rr*a0*c11*an2-2*c12**2*an1r*c2*an2*a0-c0s*
     & an2**3*c22*c11+c0s*an2**2*c22*c12*an1+c2s*an2**2*c22*a0*c11-
     & c11s*an2**2*c22*c2*a0-c2s*an2*c22*a0*c12*an1-c12s*an2**2*c22*
     & an1*c0+c12s*an2*c22*an1*c2*a0-c1*an2**2*c22*an1*c0+c1*an2*c22*
     & an1*c2*a0+c11s*an2**3*c22*c0-c11**2*c22*an2rr*a0*an2+c11*c22*
     & c2*an2*a0**2-c11*c22*c12*an2r*a0**2-2*c11*c22*an1r*c0*an2**2+2*
     & c11**2*c22*an2r**2*a0-c12*c2r*an2**2*a0*c11-c12*c11r*an2**3*c0-
     & c12*c1*an2**3*c0-c12*c2**2*an2*an1*a0+c12*c1*an2**2*c2*a0+2*
     & c12**2*an1r*c0*an2**2-an2rr*a0*c12**3*an1-2*c12**2*an2r*an1*c0*
     & an2+c12**3*an2r*a0**2+2*c11*c22*an1r*c2*an2*a0-2*c11*c22*an1r*
     & c12*an2r*a0+c12*c12r*an2*an2r*a0*c11-c12*c12r*an2*an1*c2*a0+
     & c12*c0r*an2**3*c11+c12*c2*an2*an2r*a0*c11+c12**2*a0*c0*an2**2-
     & 2*c12**2*an2r**2*a0*c11-c12**2*c2*an2*a0**2+2*c12**2*an2r*an1*
     & c2*a0+c11s*an2*c22*c12*an2r*a0-c12s*an2*c22*an2r*a0*c11-c0*an2*
     & c22*a0*c12*an1-c1*an2*c22*an2r*a0*c11+c11*c22*an2rr*a0*c12*an1-
     & 2*c11*c22*an2r*an1*c2*a0+2*c11*c22*an2r*an1*c0*an2+c12*c12r*
     & an2**2*an1*c0+c12*c11r*an2**2*c2*a0-c1*an2*c12**2*an2r*a0)/an2*
     & *2/(c12*an1-c11*an2)/c22**2
                      b1=1/an2**2*(2*c12**2*an1r*c2*an2*an1+c12*c12r*
     & an2**2*an1r*c11+c12*c12r*an2**2*a0*c11+c11s*an2**2*c22*c12*a0-
     & c11s*an2*c22*c12*an2r*an1+c11s*an2**2*c22*c2*an1+c2s*an2*c22*
     & an1**2*c12-c2s*an2**2*c22*an1*c11-c12*c12r*an2**2*an1*c1-c12*
     & c12r*an2*an2r*an1*c11-c1s*an2**2*c22*c12*an1+c12**2*a0*c2*an2*
     & an1+3*c12**2*an2r*an1*c1*an2-2*c12**2*an2r*an1r*an2*c11+2*c12**
     & 3*an1r**2*an2-c12s*an2*c22*c2*an1**2-c1*an2*c22*c2*an1**2+c0*
     & an2*c22*an1**2*c12-c0*an2**2*c22*an1*c11+c12s*an2**2*c22*an1*
     & c1-3*c11*c22*an1r*c12*a0*an2+2*c11*c22*an1r*c12*an2r*an1+c1**2*
     & an2**2*c22*an1-c11*c22*c12*a0**2*an2+2*c11*c22*an2r*c2*an1**2-
     & c11*c22*an2rr*an1**2*c12-2*c11*c22*an1r*c2*an2*an1+c11*c22*
     & an1rr*an2*c12*an1+c11*c22*a0*c12*an2r*an1-c11*c22*an2r*an1*c1*
     & an2+2*c11**2*c22*an2r*an1r*an2+2*c11**2*c22*an2r*a0*an2+c11**2*
     & c22*an2rr*an1*an2+3*an1r*c12**3*a0*an2-2*an1r*c12**3*an2r*an1-
     & an1rr*an2*c12**3*an1+2*c12**2*an2r**2*an1*c11-2*c12**2*an2r*c2*
     & an1**2+c12*c2**2*an2*an1**2-c12*c0*an2**3*c11+c12*c11r*an2**3*
     & c1-2*c12**2*an2r*a0*an2*c11-c12**2*an2rr*an1*c11*an2-a0*c12**3*
     & an2r*an1+c12**2*an1rr*an2**2*c11-2*c12**2*a0*c1*an2**2-3*c12**
     & 2*an1r*c1*an2**2-2*c12*c2*an2**2*an1*c1+c12*c2*an2**2*an1r*c11+
     & c12*c2*an2**2*a0*c11-2*c11*c22*c12*an1r**2*an2+c11*c22*an1r*c1*
     & an2**2-c12*c11r*an2**2*c2*an1+c12*c2r*an2**2*an1*c11-c11*c22*
     & a0*c2*an2*an1-c12s*an2**2*c22*an1r*c11-c12s*an2**2*c22*a0*c11+
     & c12s*an2*c22*an2r*an1*c11+c11s*an2**2*c22*c12*an1r+c12**3*a0**
     & 2*an2-c12*c1r*an2**3*c11-c11**2*c22*an1rr*an2**2-2*c11**2*c22*
     & an2r**2*an1-c11s*an2**3*c22*c1+c1s*an2**3*c22*c11-c12*c2*an2*
     & an2r*an1*c11+c12*c12r*an2*c2*an1**2+c11r*an2*c12**2*an2r*an1-
     & c2r*an2*an1**2*c12**2+c1r*an2**2*c12**2*an1-c11r*an2**2*c12**2*
     & a0+c0*an2**2*c12**2*an1-c11r*an2**2*c12**2*an1r+c12*c1**2*an2**
     & 3+an2rr*an1**2*c12**3)/(c12*an1-c11*an2)/c22**2
                      br2=1/an2*(-c22r*an2*c12**2*an1+2*c12**2*an1r*
     & c22*an2+c12**2*a0*c22*an2+2*c12*c2*an2*an1*c22+c12*c12r*an2*
     & an1*c22-c12*c1*an2**2*c22-c12*c11r*an2**2*c22+c12*c22r*an2**2*
     & c11-2*c11*c22**2*an1r*an2-c11*c22**2*a0*an2+2*c11*c22**2*an2r*
     & an1-c2*an2**2*c22*c11-c1*an2*c22**2*an1+c11s*an2**2*c22**2-
     & c12s*an2*c22**2*an1+c22s*an2*c22*c12*an1-c22s*an2**2*c22*c11-2*
     & c12**2*an2r*an1*c22)/(c12*an1-c11*an2)/c22**2
                      b3=-(an1*c12**2-an1*c11*c22-c11*an2*c12)/an2/c22*
     & *2
                      bf=1/an2**2*(2*c12**2*an2r*an2*c11-c12*c2*an2**2*
     & c11-c12*c12r*an2**2*c11+2*c11*c22*an1r*c12*an2+c11*c22*a0*c12*
     & an2-2*c11**2*c22*an2r*an2+c1*an2**2*c22*c11+c12s*an2**2*c22*
     & c11-c11s*an2**2*c22*c12-2*an1r*c12**3*an2-a0*c12**3*an2+c1*an2*
     & *2*c12**2+c11r*an2**2*c12**2)/(c12*an1-c11*an2)/c22**2*gr+
     & 1/an2**2*(-c11*c22*an2*c12*an1+an2*c12**3*an1-c12**2*an2**2*
     & c11+c11**2*c22*an2**2)/(c12*an1-c11*an2)/c22**2*grr+1/an2**2*(-
     & 2*c12**2*an2r*an1*an2+c12*c2*an2**2*an1+c12*c12r*an2**2*an1+2*
     & c11*c22*an2r*an1*an2-c11*c22*a0*an2**2-2*c11*c22*an1r*an2**2-
     & c1*an2**2*c22*an1+c11s*an2**3*c22-c12s*an2**2*c22*an1+c12**2*
     & a0*an2**2+2*c12**2*an1r*an2**2-c12*c1*an2**3-c12*c11r*an2**3)/(
     & c12*an1-c11*an2)/c22**2*ff+1/an2**2*(-an2**2*c12**2*an1+c12*
     & an2**3*c11)/(c12*an1-c11*an2)/c22**2*ffr+1/an2**2*(-an2**3*c22*
     & c11+an2**2*c22*c12*an1)/(c12*an1-c11*an2)/c22**2*ffs+1/an2**2*(
     & -2*c12**2*an1r*c2*an2-c11r*an2*c12**2*an2r-c1*an2*c12**2*an2r+
     & c2r*an2*c12**2*an1-an2rr*c12**3*an1-2*c12**2*an2r**2*c11+c11s*
     & an2*c22*c12*an2r-c12s*an2*c22*an2r*c11+c12s*an2*c22*an1*c2-
     & c11s*an2**2*c22*c2-c0*an2*c22*c12*an1+2*an1r*c12**3*an2r-c1*
     & an2*c22*an2r*c11-c12*c2r*an2**2*c11+c12*c11r*an2**2*c2+c1*an2*
     & c22*an1*c2+c12**2*an2rr*c11*an2-c12**2*a0*c2*an2+c11*c22*an2rr*
     & c12*an1-2*c11*c22*an2r*an1*c2+c11*c22*a0*c2*an2-c11**2*c22*
     & an2rr*an2+c0*an2**2*c22*c11+c12*c12r*an2*an2r*c11-c12*c2**2*
     & an2*an1-c12*c12r*an2*an1*c2+c12*c1*an2**2*c2-2*c11*c22*an1r*
     & c12*an2r+a0*c12**3*an2r+c12*c2*an2*an2r*c11+2*c12**2*an2r*an1*
     & c2+2*c11**2*c22*an2r**2+2*c11*c22*an1r*c2*an2-c11*c22*a0*c12*
     & an2r-c2s*an2*c22*c12*an1+c2s*an2**2*c22*c11)/(c12*an1-c11*an2)
     & /c22**2*g
                     ur=ur4(i1,i2,i3)
                     ! urr=urr2(i1,i2,i3)  ! need to 2nd-order
                     urrr=urrr2(i1,i2,i3)
               ! *****************
               !$$$    ! gdExact(ntd,nxd,nyd,nzd,x,y,z,n,t,value)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2,i3,0),xy(i1,i2,i3,1),0.,0,0.,ue0)
               !$$$    
               !$$$    call gdExact(0,0,0,0,xy(i1-2,i2,i3,0),xy(i1-2,i2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1-1,i2,i3,0),xy(i1-1,i2,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1+1,i2,i3,0),xy(i1+1,i2,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1+2,i2,i3,0),xy(i1+2,i2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$
               !$$$    ure   = (ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(0))
               !$$$    urre=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(0)**2)
               !$$$    urrre = (-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(0)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-2,i3,0),xy(i1,i2-2,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+2,i3,0),xy(i1,i2+2,i3,1),0.,0,0.,ue4)
               !$$$
               !$$$    use=(ue1   -8.*ue2  +8.*ue3 -ue4)/(12.*dr(1))
               !$$$    usse=(-ue1 +16.*ue2 -30.*ue0+16.*ue3 -ue4 )/(12.*dr(1)**2)
               !$$$    ussse=(-ue1+2.*ue2-2.*ue3+ue4)/(2.*dr(1)**3)
               !$$$
               !$$$
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue1)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2-1,i3,1),0.,0,0.,ue2)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2-1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue3)
               !$$$    call gdExact(0,0,0,0,xy(i1,i2+1,i3,0),xy(i1,i2+1,i3,1),0.,0,0.,ue4)
               !$$$    urse=(ue4-ue3-ue2+ue1)/(4.*dr(0)*dr(1))
               ! *****************
                   ! evaulate the defect when the 2-ghost pts and bndry pt are zero:
                   u(i1,i2,i3)=0.
                   u(i1-is1,i2-is2,i3)=0.
                   u(i1-2*is1,i2-2*is2,i3)=0.
                   gc=ff-op2d4(i1,i2,i3)
                   ca=c(ma,i1,i2,i3)
                   cb=c(mb,i1,i2,i3)
                   cc=c(mc,i1,i2,i3)
                     ga= (g - an1*ur -a0*u(i1,i2,i3))/an2  ! us
                     gb=b0*u(i1,i2,i3)+b1*ur+b3*urrr+bf ! this is: usss+br2*uss
                     ! On side==1 we change the sign of br2 and the forcing
                     br2=-nsign*br2
                     ga=-nsign*ga
                     gb=-nsign*gb
                     u(i1,i2-is2,i3) = -(3*cc-16*br2*drn*ca+cc*br2*drn)
     & /(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1,i2+is2,i3)-
     & 2*br2*drn*ca/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(
     & i1,i2+2*is2,i3)-(24*br2*drn**2*ca*ga-cc*gb*drn**3-6*cc*ga*drn-
     & 2*br2*drn*gc)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)
                     u(i1,i2-2*is2,i3) = (-16*cc*br2*drn-16*br2*drn*cb)
     & /(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1,i2+is2,i3)+
     & (-3*cc+cc*br2*drn+2*br2*drn*cb)/(-3*cc+cc*br2*drn+16*br2*drn*
     & ca+2*br2*drn*cb)*u(i1,i2+2*is2,i3)+(16*br2*drn*gc+24*ga*drn**2*
     & br2*cb+8*cc*gb*drn**3+12*cc*ga*drn+12*ga*drn**2*cc*br2)/(-3*cc+
     & cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)
                     u(i1,i2,i3) = -cb/cc*u(i1,i2-is2,i3)-ca/cc*u(i1,
     & i2-2*is2,i3)+gc/cc
                   else if( mask(i1,i2,i3).lt.0 )then
                     ! *wdh* 100609 -- extrap ghost outside interp 
                     if( orderOfExtrapolation.eq.3 )then
                       u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,
     & i3      )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,
     & i3+2*is3)
                     else if( orderOfExtrapolation.eq.4 )then
                       u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,
     & i3      )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                     else if( orderOfExtrapolation.eq.5 )then
                       u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,
     & i3      )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+
     & 4*is2,i3+4*is3)
                     else if( orderOfExtrapolation.eq.6 )then
                       u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,
     & i3      )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                     else if( orderOfExtrapolation.eq.7 )then
                       u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,
     & i3      )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+
     & 2*is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*
     & is1,i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*
     & is1,i2+6*is2,i3+6*is3)
                     else if( orderOfExtrapolation.eq.2 )then
                       u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,
     & i3      )-u(i1+  is1,i2+  is2,i3+  is3)
                     else
                       write(*,*) 'bcOpt:ERROR:'
                       write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                       stop 1
                     end if
                     u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  
     & is2,i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,
     & i2+  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,
     & i2+3*is2,i3+3*is3)
                   end if
                 end do
                 end do
                 end do
                end if
              end if
!           else if( axis.eq.0 .and. nd.eq.3 )then
!             neumannAndEquation(noForcing,R,3)
!           else if( axis.eq.1 .and. nd.eq.3 )then
!             neumannAndEquation(noForcing,S,3)
!           else if( axis.eq.2 .and. nd.eq.3 )then
!             neumannAndEquation(noForcing,T,3)
            else
              stop 10
            end if
          end if

        else
          write(*,*) 'bcOpt:order4:ERROR:neumannSecondGhostLineBC=',
     & neumannSecondGhostLineBC
          stop 7711

        end if

      else if( bc.eq.oddSymmetry )then

         do i3=n3a+is3,n3b+is3
         do i2=n2a+is2,n2b+is2
         do i1=n1a+is1,n1b+is1
           if( mask(i1,i2,i3).ne.0 )then
             u(i1-  is1,i2-  is2,i3-  is3)=2.*u(i1,i2,i3)-u(i1+  is1,
     & i2+  is2,i3+  is3)
             u(i1-2*is1,i2-2*is2,i3-2*is3)=2.*u(i1,i2,i3)-u(i1+2*is1,
     & i2+2*is2,i3+2*is3)
           end if
         end do
         end do
         end do

      else if( bc.eq.mixedToSecondOrder .or. bc.eq.evenSymmetry )then

        if( bc.eq.evenSymmetry )then
          if( debug.gt.15 )then
            write(*,'("  bcOpt:evenSymmetry side,axis=",2i2)') side,
     & axis
          end if

          a0=0.
          a1=1.
        else if( a1.eq.0 )then
          if( debug.gt.15 )then
            write(*,'("  bcOpt:mixedToSecondOrder")')
          end if
          write(*,*) 'ERROR bcOpt: a1.eq.0 for mixedToSecondOrder'
        end if

        if( useForcing.eq.1 )then
         ! forcing
         if( gridType.eq.rectangular )then
           ! The next function does not depend on DIM or DIR
           ! write(*,'(''AssignMixedToSecondOrder: side,axis='',2i2)') side,axis
           ! write(*,'('' n1a,n1b,...'',6i3)') n1a,n1b,n2a,n2b,n3a,n3b
           ! write(*,'('' a0,a1,dx(axis)='',3f6.2)') a0,a1,dx(axis)
             ! The forcing for the Neumann equation is on the first ghost line 
            is = 1-2*side
            ! (i1,i2,i3) = boundary point since [n1a,n1b][n2a,n2b]... defines the ghost line
            do i3=n3a+is3,n3b+is3
            do i2=n2a+is2,n2b+is2
            do i1=n1a+is1,n1b+is1
             if( mask(i1,i2,i3).ne.0 )then
                ! Cartesian: 
                t1=(-is)*(2.*dx(axis)/a1)*(f(i1-is1,i2-is2,i3-is3)-a0*
     & u(i1,i2,i3))
              u(i1-  is1,i2-  is2,i3-  is3)=u(i1+  is1,i2+  is2,i3+  
     & is3)-   t1*is
              if( orderOfAccuracy.eq.4 )then
                u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*
     & is3)-2.*t1*is
              end if
             end if
            end do
            end do
            end do
         else if( nd.eq.2 .and. axis.eq.0 )then
           ! write(*,'(''AssignMixedToSecondOrder: side,axis='',2i2)') side,axis
           ! write(*,'('' n1a,n1b,...'',6i3)') n1a,n1b,n2a,n2b,n3a,n3b
           ! write(*,'('' a0,a1,dx(axis)='',3f6.2)') a0,a1,dx(axis)
           ! write(*,'('' a0,a1,dr,dim=2,(dir=r)='',3f6.2)') a0,a1,dr(axis)
             ! The forcing for the Neumann equation is on the first ghost line 
            is = 1-2*side
            ! (i1,i2,i3) = boundary point since [n1a,n1b][n2a,n2b]... defines the ghost line
            do i3=n3a+is3,n3b+is3
            do i2=n2a+is2,n2b+is2
            do i1=n1a+is1,n1b+is1
             if( mask(i1,i2,i3).ne.0 )then
                ! Curvilinear:
                ! (an1,an2,an3) is the outward normal
               an1 = rx(i1,i2,i3)
               an2 = ry(i1,i2,i3)
                aNormi = (-is)/sqrt(an1**2+an2**2)
                an1=an1*aNormi
                an2=an2*aNormi
                ! -- 2D --
                  t1=(2.*dr(axis)/(an1*rx(i1,i2,i3)+an2*ry(i1,i2,i3)))*
     & ( (f(i1-is1,i2-is2,i3-is3)-a0*u(i1,i2,i3))/a1 - (an1*sx(i1,i2,
     & i3)+an2*sy(i1,i2,i3))*(u(i1,i2+1,i3)-u(i1,i2-1,i3))/(2.*dr(1)) 
     & )
              u(i1-  is1,i2-  is2,i3-  is3)=u(i1+  is1,i2+  is2,i3+  
     & is3)-   t1*is
              if( orderOfAccuracy.eq.4 )then
                u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*
     & is3)-2.*t1*is
              end if
             end if
            end do
            end do
            end do
         else if( nd.eq.2 .and. axis.eq.1 )then
           ! write(*,'(''AssignMixedToSecondOrder: side,axis='',2i2)') side,axis
           ! write(*,'('' n1a,n1b,...'',6i3)') n1a,n1b,n2a,n2b,n3a,n3b
           ! write(*,'('' a0,a1,dx(axis)='',3f6.2)') a0,a1,dx(axis)
           ! write(*,'('' a0,a1,dr,dim=2,(dir=s)='',3f6.2)') a0,a1,dr(axis)
             ! The forcing for the Neumann equation is on the first ghost line 
            is = 1-2*side
            ! (i1,i2,i3) = boundary point since [n1a,n1b][n2a,n2b]... defines the ghost line
            do i3=n3a+is3,n3b+is3
            do i2=n2a+is2,n2b+is2
            do i1=n1a+is1,n1b+is1
             if( mask(i1,i2,i3).ne.0 )then
                ! Curvilinear:
                ! (an1,an2,an3) is the outward normal
               an1 = sx(i1,i2,i3)
               an2 = sy(i1,i2,i3)
                aNormi = (-is)/sqrt(an1**2+an2**2)
                an1=an1*aNormi
                an2=an2*aNormi
                ! -- 2D --
                  t1=(2.*dr(axis)/(an1*sx(i1,i2,i3)+an2*sy(i1,i2,i3)))*
     & ( (f(i1-is1,i2-is2,i3-is3)-a0*u(i1,i2,i3))/a1 - (an1*rx(i1,i2,
     & i3)+an2*ry(i1,i2,i3))*(u(i1+1,i2,i3)-u(i1-1,i2,i3))/(2.*dr(0)) 
     & )
              u(i1-  is1,i2-  is2,i3-  is3)=u(i1+  is1,i2+  is2,i3+  
     & is3)-   t1*is
              if( orderOfAccuracy.eq.4 )then
                u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*
     & is3)-2.*t1*is
              end if
             end if
            end do
            end do
            end do
         else if( nd.eq.3 .and. axis.eq.0 )then
           ! write(*,'(''AssignMixedToSecondOrder: side,axis='',2i2)') side,axis
           ! write(*,'('' n1a,n1b,...'',6i3)') n1a,n1b,n2a,n2b,n3a,n3b
           ! write(*,'('' a0,a1,dx(axis)='',3f6.2)') a0,a1,dx(axis)
           ! write(*,'('' a0,a1,dr,dim=3,(dir=r)='',3f6.2)') a0,a1,dr(axis)
             ! The forcing for the Neumann equation is on the first ghost line 
            is = 1-2*side
            ! (i1,i2,i3) = boundary point since [n1a,n1b][n2a,n2b]... defines the ghost line
            do i3=n3a+is3,n3b+is3
            do i2=n2a+is2,n2b+is2
            do i1=n1a+is1,n1b+is1
             if( mask(i1,i2,i3).ne.0 )then
                ! Curvilinear:
                ! (an1,an2,an3) is the outward normal
               an1 = rx(i1,i2,i3)
               an2 = ry(i1,i2,i3)
                an3 = rz(i1,i2,i3)
                aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                an1=an1*aNormi
                an2=an2*aNormi
                an3=an3*aNormi
                ! -- 3D ---
                  t1=(2.*dr(axis)/(an1*rx(i1,i2,i3)+an2*ry(i1,i2,i3)+
     & an3*rz(i1,i2,i3)))*( (f(i1-is1,i2-is2,i3-is3)-a0*u(i1,i2,i3))
     & /a1 - (an1*sx(i1,i2,i3)+an2*sy(i1,i2,i3)+an3*sz(i1,i2,i3))*(u(
     & i1,i2+1,i3)-u(i1,i2-1,i3))/(2.*dr(1)) - (an1*tx(i1,i2,i3)+an2*
     & ty(i1,i2,i3)+an3*tz(i1,i2,i3))*(u(i1,i2,i3+1)-u(i1,i2,i3-1))/(
     & 2.*dr(2)) )
              u(i1-  is1,i2-  is2,i3-  is3)=u(i1+  is1,i2+  is2,i3+  
     & is3)-   t1*is
              if( orderOfAccuracy.eq.4 )then
                u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*
     & is3)-2.*t1*is
              end if
             end if
            end do
            end do
            end do
         else if( nd.eq.3 .and. axis.eq.1 )then
           ! write(*,'(''AssignMixedToSecondOrder: side,axis='',2i2)') side,axis
           ! write(*,'('' n1a,n1b,...'',6i3)') n1a,n1b,n2a,n2b,n3a,n3b
           ! write(*,'('' a0,a1,dx(axis)='',3f6.2)') a0,a1,dx(axis)
           ! write(*,'('' a0,a1,dr,dim=3,(dir=s)='',3f6.2)') a0,a1,dr(axis)
             ! The forcing for the Neumann equation is on the first ghost line 
            is = 1-2*side
            ! (i1,i2,i3) = boundary point since [n1a,n1b][n2a,n2b]... defines the ghost line
            do i3=n3a+is3,n3b+is3
            do i2=n2a+is2,n2b+is2
            do i1=n1a+is1,n1b+is1
             if( mask(i1,i2,i3).ne.0 )then
                ! Curvilinear:
                ! (an1,an2,an3) is the outward normal
               an1 = sx(i1,i2,i3)
               an2 = sy(i1,i2,i3)
                an3 = sz(i1,i2,i3)
                aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                an1=an1*aNormi
                an2=an2*aNormi
                an3=an3*aNormi
                ! -- 3D ---
                  t1=(2.*dr(axis)/(an1*sx(i1,i2,i3)+an2*sy(i1,i2,i3)+
     & an3*sz(i1,i2,i3)))*( (f(i1-is1,i2-is2,i3-is3)-a0*u(i1,i2,i3))
     & /a1 - (an1*rx(i1,i2,i3)+an2*ry(i1,i2,i3)+an3*rz(i1,i2,i3))*(u(
     & i1+1,i2,i3)-u(i1-1,i2,i3))/(2.*dr(0)) - (an1*tx(i1,i2,i3)+an2*
     & ty(i1,i2,i3)+an3*tz(i1,i2,i3))*(u(i1,i2,i3+1)-u(i1,i2,i3-1))/(
     & 2.*dr(2)) )
              u(i1-  is1,i2-  is2,i3-  is3)=u(i1+  is1,i2+  is2,i3+  
     & is3)-   t1*is
              if( orderOfAccuracy.eq.4 )then
                u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*
     & is3)-2.*t1*is
              end if
             end if
            end do
            end do
            end do
         else if( nd.eq.3 .and. axis.eq.2 )then
           ! write(*,'(''AssignMixedToSecondOrder: side,axis='',2i2)') side,axis
           ! write(*,'('' n1a,n1b,...'',6i3)') n1a,n1b,n2a,n2b,n3a,n3b
           ! write(*,'('' a0,a1,dx(axis)='',3f6.2)') a0,a1,dx(axis)
           ! write(*,'('' a0,a1,dr,dim=3,(dir=t)='',3f6.2)') a0,a1,dr(axis)
             ! The forcing for the Neumann equation is on the first ghost line 
            is = 1-2*side
            ! (i1,i2,i3) = boundary point since [n1a,n1b][n2a,n2b]... defines the ghost line
            do i3=n3a+is3,n3b+is3
            do i2=n2a+is2,n2b+is2
            do i1=n1a+is1,n1b+is1
             if( mask(i1,i2,i3).ne.0 )then
                ! Curvilinear:
                ! (an1,an2,an3) is the outward normal
               an1 = tx(i1,i2,i3)
               an2 = ty(i1,i2,i3)
                an3 = tz(i1,i2,i3)
                aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                an1=an1*aNormi
                an2=an2*aNormi
                an3=an3*aNormi
                ! -- 3D ---
                  t1=(2.*dr(axis)/(an1*tx(i1,i2,i3)+an2*ty(i1,i2,i3)+
     & an3*tz(i1,i2,i3)))*( (f(i1-is1,i2-is2,i3-is3)-a0*u(i1,i2,i3))
     & /a1 - (an1*rx(i1,i2,i3)+an2*ry(i1,i2,i3)+an3*rz(i1,i2,i3))*(u(
     & i1+1,i2,i3)-u(i1-1,i2,i3))/(2.*dr(0)) - (an1*sx(i1,i2,i3)+an2*
     & sy(i1,i2,i3)+an3*sz(i1,i2,i3))*(u(i1,i2+1,i3)-u(i1,i2-1,i3))/(
     & 2.*dr(1)) )
              u(i1-  is1,i2-  is2,i3-  is3)=u(i1+  is1,i2+  is2,i3+  
     & is3)-   t1*is
              if( orderOfAccuracy.eq.4 )then
                u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*
     & is3)-2.*t1*is
              end if
             end if
            end do
            end do
            end do
         else
           stop 4466
         end if
        else
         ! no forcing
         if( gridType.eq.rectangular )then
           ! The next function does not depend on DIM or DIR
           ! write(*,'(''AssignMixedToSecondOrder: side,axis='',2i2)') side,axis
           ! write(*,'('' n1a,n1b,...'',6i3)') n1a,n1b,n2a,n2b,n3a,n3b
           ! write(*,'('' a0,a1,dx(axis)='',3f6.2)') a0,a1,dx(axis)
            is = 1-2*side
            ! (i1,i2,i3) = boundary point since [n1a,n1b][n2a,n2b]... defines the ghost line
            do i3=n3a+is3,n3b+is3
            do i2=n2a+is2,n2b+is2
            do i1=n1a+is1,n1b+is1
             if( mask(i1,i2,i3).ne.0 )then
                ! Cartesian: 
                t1=(-is)*(2.*dx(axis)/a1)*(-a0*u(i1,i2,i3))
              u(i1-  is1,i2-  is2,i3-  is3)=u(i1+  is1,i2+  is2,i3+  
     & is3)-   t1*is
              if( orderOfAccuracy.eq.4 )then
                u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*
     & is3)-2.*t1*is
              end if
             end if
            end do
            end do
            end do
         else if( nd.eq.2 .and. axis.eq.0 )then
           ! write(*,'(''AssignMixedToSecondOrder: side,axis='',2i2)') side,axis
           ! write(*,'('' n1a,n1b,...'',6i3)') n1a,n1b,n2a,n2b,n3a,n3b
           ! write(*,'('' a0,a1,dx(axis)='',3f6.2)') a0,a1,dx(axis)
           ! write(*,'('' a0,a1,dr,dim=2,(dir=r)='',3f6.2)') a0,a1,dr(axis)
            is = 1-2*side
            ! (i1,i2,i3) = boundary point since [n1a,n1b][n2a,n2b]... defines the ghost line
            do i3=n3a+is3,n3b+is3
            do i2=n2a+is2,n2b+is2
            do i1=n1a+is1,n1b+is1
             if( mask(i1,i2,i3).ne.0 )then
                ! Curvilinear:
                ! (an1,an2,an3) is the outward normal
               an1 = rx(i1,i2,i3)
               an2 = ry(i1,i2,i3)
                aNormi = (-is)/sqrt(an1**2+an2**2)
                an1=an1*aNormi
                an2=an2*aNormi
                ! -- 2D --
                  t1=(2.*dr(axis)/(an1*rx(i1,i2,i3)+an2*ry(i1,i2,i3)))*
     & ( (-a0*u(i1,i2,i3))/a1 - (an1*sx(i1,i2,i3)+an2*sy(i1,i2,i3))*(
     & u(i1,i2+1,i3)-u(i1,i2-1,i3))/(2.*dr(1)) )
              u(i1-  is1,i2-  is2,i3-  is3)=u(i1+  is1,i2+  is2,i3+  
     & is3)-   t1*is
              if( orderOfAccuracy.eq.4 )then
                u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*
     & is3)-2.*t1*is
              end if
             end if
            end do
            end do
            end do
         else if( nd.eq.2 .and. axis.eq.1 )then
           ! write(*,'(''AssignMixedToSecondOrder: side,axis='',2i2)') side,axis
           ! write(*,'('' n1a,n1b,...'',6i3)') n1a,n1b,n2a,n2b,n3a,n3b
           ! write(*,'('' a0,a1,dx(axis)='',3f6.2)') a0,a1,dx(axis)
           ! write(*,'('' a0,a1,dr,dim=2,(dir=s)='',3f6.2)') a0,a1,dr(axis)
            is = 1-2*side
            ! (i1,i2,i3) = boundary point since [n1a,n1b][n2a,n2b]... defines the ghost line
            do i3=n3a+is3,n3b+is3
            do i2=n2a+is2,n2b+is2
            do i1=n1a+is1,n1b+is1
             if( mask(i1,i2,i3).ne.0 )then
                ! Curvilinear:
                ! (an1,an2,an3) is the outward normal
               an1 = sx(i1,i2,i3)
               an2 = sy(i1,i2,i3)
                aNormi = (-is)/sqrt(an1**2+an2**2)
                an1=an1*aNormi
                an2=an2*aNormi
                ! -- 2D --
                  t1=(2.*dr(axis)/(an1*sx(i1,i2,i3)+an2*sy(i1,i2,i3)))*
     & ( (-a0*u(i1,i2,i3))/a1 - (an1*rx(i1,i2,i3)+an2*ry(i1,i2,i3))*(
     & u(i1+1,i2,i3)-u(i1-1,i2,i3))/(2.*dr(0)) )
              u(i1-  is1,i2-  is2,i3-  is3)=u(i1+  is1,i2+  is2,i3+  
     & is3)-   t1*is
              if( orderOfAccuracy.eq.4 )then
                u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*
     & is3)-2.*t1*is
              end if
             end if
            end do
            end do
            end do
         else if( nd.eq.3 .and. axis.eq.0 )then
           ! write(*,'(''AssignMixedToSecondOrder: side,axis='',2i2)') side,axis
           ! write(*,'('' n1a,n1b,...'',6i3)') n1a,n1b,n2a,n2b,n3a,n3b
           ! write(*,'('' a0,a1,dx(axis)='',3f6.2)') a0,a1,dx(axis)
           ! write(*,'('' a0,a1,dr,dim=3,(dir=r)='',3f6.2)') a0,a1,dr(axis)
            is = 1-2*side
            ! (i1,i2,i3) = boundary point since [n1a,n1b][n2a,n2b]... defines the ghost line
            do i3=n3a+is3,n3b+is3
            do i2=n2a+is2,n2b+is2
            do i1=n1a+is1,n1b+is1
             if( mask(i1,i2,i3).ne.0 )then
                ! Curvilinear:
                ! (an1,an2,an3) is the outward normal
               an1 = rx(i1,i2,i3)
               an2 = ry(i1,i2,i3)
                an3 = rz(i1,i2,i3)
                aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                an1=an1*aNormi
                an2=an2*aNormi
                an3=an3*aNormi
                ! -- 3D ---
                  t1=(2.*dr(axis)/(an1*rx(i1,i2,i3)+an2*ry(i1,i2,i3)+
     & an3*rz(i1,i2,i3)))*( (-a0*u(i1,i2,i3))/a1 - (an1*sx(i1,i2,i3)+
     & an2*sy(i1,i2,i3)+an3*sz(i1,i2,i3))*(u(i1,i2+1,i3)-u(i1,i2-1,i3)
     & )/(2.*dr(1)) - (an1*tx(i1,i2,i3)+an2*ty(i1,i2,i3)+an3*tz(i1,i2,
     & i3))*(u(i1,i2,i3+1)-u(i1,i2,i3-1))/(2.*dr(2)) )
              u(i1-  is1,i2-  is2,i3-  is3)=u(i1+  is1,i2+  is2,i3+  
     & is3)-   t1*is
              if( orderOfAccuracy.eq.4 )then
                u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*
     & is3)-2.*t1*is
              end if
             end if
            end do
            end do
            end do
         else if( nd.eq.3 .and. axis.eq.1 )then
           ! write(*,'(''AssignMixedToSecondOrder: side,axis='',2i2)') side,axis
           ! write(*,'('' n1a,n1b,...'',6i3)') n1a,n1b,n2a,n2b,n3a,n3b
           ! write(*,'('' a0,a1,dx(axis)='',3f6.2)') a0,a1,dx(axis)
           ! write(*,'('' a0,a1,dr,dim=3,(dir=s)='',3f6.2)') a0,a1,dr(axis)
            is = 1-2*side
            ! (i1,i2,i3) = boundary point since [n1a,n1b][n2a,n2b]... defines the ghost line
            do i3=n3a+is3,n3b+is3
            do i2=n2a+is2,n2b+is2
            do i1=n1a+is1,n1b+is1
             if( mask(i1,i2,i3).ne.0 )then
                ! Curvilinear:
                ! (an1,an2,an3) is the outward normal
               an1 = sx(i1,i2,i3)
               an2 = sy(i1,i2,i3)
                an3 = sz(i1,i2,i3)
                aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                an1=an1*aNormi
                an2=an2*aNormi
                an3=an3*aNormi
                ! -- 3D ---
                  t1=(2.*dr(axis)/(an1*sx(i1,i2,i3)+an2*sy(i1,i2,i3)+
     & an3*sz(i1,i2,i3)))*( (-a0*u(i1,i2,i3))/a1 - (an1*rx(i1,i2,i3)+
     & an2*ry(i1,i2,i3)+an3*rz(i1,i2,i3))*(u(i1+1,i2,i3)-u(i1-1,i2,i3)
     & )/(2.*dr(0)) - (an1*tx(i1,i2,i3)+an2*ty(i1,i2,i3)+an3*tz(i1,i2,
     & i3))*(u(i1,i2,i3+1)-u(i1,i2,i3-1))/(2.*dr(2)) )
              u(i1-  is1,i2-  is2,i3-  is3)=u(i1+  is1,i2+  is2,i3+  
     & is3)-   t1*is
              if( orderOfAccuracy.eq.4 )then
                u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*
     & is3)-2.*t1*is
              end if
             end if
            end do
            end do
            end do
         else if( nd.eq.3 .and. axis.eq.2 )then
           ! write(*,'(''AssignMixedToSecondOrder: side,axis='',2i2)') side,axis
           ! write(*,'('' n1a,n1b,...'',6i3)') n1a,n1b,n2a,n2b,n3a,n3b
           ! write(*,'('' a0,a1,dx(axis)='',3f6.2)') a0,a1,dx(axis)
           ! write(*,'('' a0,a1,dr,dim=3,(dir=t)='',3f6.2)') a0,a1,dr(axis)
            is = 1-2*side
            ! (i1,i2,i3) = boundary point since [n1a,n1b][n2a,n2b]... defines the ghost line
            do i3=n3a+is3,n3b+is3
            do i2=n2a+is2,n2b+is2
            do i1=n1a+is1,n1b+is1
             if( mask(i1,i2,i3).ne.0 )then
                ! Curvilinear:
                ! (an1,an2,an3) is the outward normal
               an1 = tx(i1,i2,i3)
               an2 = ty(i1,i2,i3)
                an3 = tz(i1,i2,i3)
                aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                an1=an1*aNormi
                an2=an2*aNormi
                an3=an3*aNormi
                ! -- 3D ---
                  t1=(2.*dr(axis)/(an1*tx(i1,i2,i3)+an2*ty(i1,i2,i3)+
     & an3*tz(i1,i2,i3)))*( (-a0*u(i1,i2,i3))/a1 - (an1*rx(i1,i2,i3)+
     & an2*ry(i1,i2,i3)+an3*rz(i1,i2,i3))*(u(i1+1,i2,i3)-u(i1-1,i2,i3)
     & )/(2.*dr(0)) - (an1*sx(i1,i2,i3)+an2*sy(i1,i2,i3)+an3*sz(i1,i2,
     & i3))*(u(i1,i2+1,i3)-u(i1,i2-1,i3))/(2.*dr(1)) )
              u(i1-  is1,i2-  is2,i3-  is3)=u(i1+  is1,i2+  is2,i3+  
     & is3)-   t1*is
              if( orderOfAccuracy.eq.4 )then
                u(i1-2*is1,i2-2*is2,i3-2*is3)=u(i1+2*is1,i2+2*is2,i3+2*
     & is3)-2.*t1*is
              end if
             end if
            end do
            end do
            end do
         else
           stop 4466
         end if
        end if
      else if( bc.eq.equationToSecondOrder )then

        ! For the fourth order method we can apply the equation to 2nd order on the boundary
        ! in order to define the ghost point value


        ! write(*,'(" bcOpt:equationToSecondOrder: orderOfExtrapolation=",i4)') orderOfExtrapolation

        if( orderOfAccuracy.ne.4 )then
          write(*,*) 'bcOpt:ERROR: bc.eq.equationToSecondOrder but 
     & orderOfAccuracy.ne.4'
          stop 6
        end if

        if( equationToSolve.eq.laplaceEquation )then ! .or. equationToSolve.eq.heatEquationOperator )then

          ! ****** laplace equation or heat operator ****

          if( gridType.eq.rectangular .and. nd.eq.2 )then

           ! write(*,*) 'bcOpt: equationToSecondOrder side,axis=',side,axis
           ! write(*,*) 'bcOpt: is1,is2,dx=',is1,is2,dx(0),dx(1)
           if( axis.eq.0 )then
            ! put the equation twice, once with forcing and once without
            if( useForcing.eq.1 )then
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1-is1,i2,i3)=2.*u(i1,i2,i3)-u(i1+is1,i2,i3)+(dx(0)*
     & *2)*(f(i1-is1,i2,i3)-(u(i1,i2+1,i3)-2.*u(i1,i2,i3)+u(i1,i2-1,
     & i3))/dx(1)**2)
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               end if
              end do
              end do
              end do
            else
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1-is1,i2,i3)=2.*u(i1,i2,i3)-u(i1+is1,i2,i3)+(dx(0)*
     & *2)*(-(u(i1,i2+1,i3)-2.*u(i1,i2,i3)+u(i1,i2-1,i3))/dx(1)**2)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
               end if
              end do
              end do
              end do
            end if
           else
            if( useForcing.eq.1 )then
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1,i2-is2,i3)=2.*u(i1,i2,i3)-u(i1,i2+is2,i3)+(dx(1)*
     & *2)*(f(i1,i2-is2,i3)-(u(i1+1,i2,i3)-2.*u(i1,i2,i3)+u(i1-1,i2,
     & i3))/dx(0)**2)
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               end if
              end do
              end do
              end do
            else
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1,i2-is2,i3)=2.*u(i1,i2,i3)-u(i1,i2+is2,i3)+(dx(1)*
     & *2)*(-(u(i1+1,i2,i3)-2.*u(i1,i2,i3)+u(i1-1,i2,i3))/dx(0)**2)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
               end if
              end do
              end do
              end do
            end if
           end if

          else if( gridType.eq.rectangular .and. nd.eq.3 )then

           if( axis.eq.0 )then
            if( useForcing.eq.1 )then
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1-is1,i2,i3)=2.*u(i1,i2,i3)-u(i1+is1,i2,i3)+(dx(0)*
     & *2)*(f(i1-is1,i2,i3)-(u(i1,i2+1,i3)-2.*u(i1,i2,i3)+u(i1,i2-1,
     & i3))/dx(1)**2-(u(i1,i2,i3+1)-2.*u(i1,i2,i3)+u(i1,i2,i3-1))/dx(
     & 2)**2)
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               end if
              end do
              end do
              end do
            else
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1-is1,i2,i3)=2.*u(i1,i2,i3)-u(i1+is1,i2,i3)+(dx(0)*
     & *2)*(-(u(i1,i2+1,i3)-2.*u(i1,i2,i3)+u(i1,i2-1,i3))/dx(1)**2-(u(
     & i1,i2,i3+1)-2.*u(i1,i2,i3)+u(i1,i2,i3-1))/dx(2)**2)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
               end if
              end do
              end do
              end do
            end if
           else if( axis.eq.1 )then
            if( useForcing.eq.1 )then
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1,i2-is2,i3)=2.*u(i1,i2,i3)-u(i1,i2+is2,i3)+(dx(1)*
     & *2)*(f(i1,i2-is2,i3)-(u(i1+1,i2,i3)-2.*u(i1,i2,i3)+u(i1-1,i2,
     & i3))/dx(0)**2-(u(i1,i2,i3+1)-2.*u(i1,i2,i3)+u(i1,i2,i3-1))/dx(
     & 2)**2)
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               end if
              end do
              end do
              end do
            else
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1,i2-is2,i3)=2.*u(i1,i2,i3)-u(i1,i2+is2,i3)+(dx(1)*
     & *2)*(-(u(i1+1,i2,i3)-2.*u(i1,i2,i3)+u(i1-1,i2,i3))/dx(0)**2-(u(
     & i1,i2,i3+1)-2.*u(i1,i2,i3)+u(i1,i2,i3-1))/dx(2)**2)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
               end if
              end do
              end do
              end do
            end if
           else
            if( useForcing.eq.1 )then
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1,i2,i3-is3)=2.*u(i1,i2,i3)-u(i1,i2,i3+is3)+(dx(2)*
     & *2)*(f(i1,i2,i3-is3)-(u(i1+1,i2,i3)-2.*u(i1,i2,i3)+u(i1-1,i2,
     & i3))/dx(0)**2-(u(i1,i2+1,i3)-2.*u(i1,i2,i3)+u(i1,i2-1,i3))/dx(
     & 1)**2)
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               end if
              end do
              end do
              end do
            else
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1,i2,i3-is3)=2.*u(i1,i2,i3)-u(i1,i2,i3+is3)+(dx(2)*
     & *2)*(-(u(i1+1,i2,i3)-2.*u(i1,i2,i3)+u(i1-1,i2,i3))/dx(0)**2-(u(
     & i1,i2+1,i3)-2.*u(i1,i2,i3)+u(i1,i2-1,i3))/dx(1)**2)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
               end if
              end do
              end do
              end do
            end if
           end if

          else if( gridType.eq.curvilinear .and.nd.eq.2 )then

           ! If Lap(u) = SUM c(m) u(m)
           ! We use :
           !    u(-1) <- u(-1) - Lap(u)/c(-1)
           ! So that Lap(u)=0
           !   rx**2 u.rr + rxx*ur 

!      ulaplacian22(i1,i2,i3)=(rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)*urr2(i1,
!     & i2,i3)+2.*(rx(i1,i2,i3)*sx(i1,i2,i3)+ ry(i1,i2,i3)*sy(i1,i2,i3)
!     & )*urs2(i1,i2,i3)+(sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)*uss2(i1,i2,
!     & i3)+(rxx22(i1,i2,i3)+ryy22(i1,i2,i3))*ur2(i1,i2,i3)+(sxx22(i1,
!     & i2,i3)+syy22(i1,i2,i3))*us2(i1,i2,i3)

           ! NOTE: On non-orthogonal grids the cross-derivative term will be lagged
!$$$           if( axis.eq.0 )then
!$$$            loopsMaskForceAndExtrapolate(u(i1-is1,i2,i3)=u(i1-is1,i2,i3)!$$$                +(f(i1-is1,i2,i3)-ulaplacian22(i1,i2,i3))/( !$$$                 (rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)/dr(axis)**2-is1*(rxx22(i1,i2,i3)+ryy22(i1,i2,i3))/(2.*dr(axis)) ),!$$$                           u(i1-is1,i2,i3)=u(i1-is1,i2,i3)!$$$                +(               -ulaplacian22(i1,i2,i3))/( !$$$                 (rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)/dr(axis)**2-is1*(rxx22(i1,i2,i3)+ryy22(i1,i2,i3))/(2.*dr(axis)) ))
!$$$           else 
!$$$            loopsMaskForceAndExtrapolate(u(i1,i2-is2,i3)=u(i1,i2-is2,i3)!$$$                +(f(i1,i2-is2,i3)-ulaplacian22(i1,i2,i3) )/( !$$$                 (sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)/dr(axis)**2-is2*(sxx22(i1,i2,i3)+syy22(i1,i2,i3))/(2.*dr(axis)) ),!$$$                           u(i1,i2-is2,i3)=u(i1,i2-is2,i3)!$$$                +(               -ulaplacian22(i1,i2,i3) )/( !$$$                 (sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)/dr(axis)**2-is2*(sxx22(i1,i2,i3)+syy22(i1,i2,i3))/(2.*dr(axis)) ))
!$$$           end if 

           ! This next version seems to give the same results as above
           if( axis.eq.0 )then
            if( useForcing.eq.1 )then
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1-is1,i2,i3)=((rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)*(-
     & 2.*u(i1,i2,i3)+u(i1+is1,i2,i3))/dr(axis)**2+(rxx22(i1,i2,i3)+
     & ryy22(i1,i2,i3))*(is1*u(i1+is1,i2,i3))/(2.*dr(axis))+2.*(rx(i1,
     & i2,i3)*sx(i1,i2,i3)+ry(i1,i2,i3)*sy(i1,i2,i3))*urs2(i1,i2,i3)+(
     & sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)*uss2(i1,i2,i3)+(sxx22(i1,i2,
     & i3)+syy22(i1,i2,i3))*us2(i1,i2,i3)-f(i1-is1,i2,i3))/(-(rx(i1,
     & i2,i3)**2+ry(i1,i2,i3)**2)/dr(axis)**2+is1*(rxx22(i1,i2,i3)+
     & ryy22(i1,i2,i3))/(2.*dr(axis)))
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               end if
              end do
              end do
              end do
            else
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1-is1,i2,i3)=((rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)*(-
     & 2.*u(i1,i2,i3)+u(i1+is1,i2,i3))/dr(axis)**2+(rxx22(i1,i2,i3)+
     & ryy22(i1,i2,i3))*(is1*u(i1+is1,i2,i3))/(2.*dr(axis))+2.*(rx(i1,
     & i2,i3)*sx(i1,i2,i3)+ry(i1,i2,i3)*sy(i1,i2,i3))*urs2(i1,i2,i3)+(
     & sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)*uss2(i1,i2,i3)+(sxx22(i1,i2,
     & i3)+syy22(i1,i2,i3))*us2(i1,i2,i3)-0.*f(i1+is1,i2,i3))/(-(rx(
     & i1,i2,i3)**2+ry(i1,i2,i3)**2)/dr(axis)**2+is1*(rxx22(i1,i2,i3)+
     & ryy22(i1,i2,i3))/(2.*dr(axis)))
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
               end if
              end do
              end do
              end do
            end if
           else
            if( useForcing.eq.1 )then
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1,i2-is2,i3)=((sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)*(-
     & 2.*u(i1,i2,i3)+u(i1,i2+is2,i3))/dr(axis)**2+(sxx22(i1,i2,i3)+
     & syy22(i1,i2,i3))*(is2*u(i1,i2+is2,i3))/(2.*dr(axis))+2.*(rx(i1,
     & i2,i3)*sx(i1,i2,i3)+ry(i1,i2,i3)*sy(i1,i2,i3))*urs2(i1,i2,i3)+(
     & rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)*urr2(i1,i2,i3)+(rxx22(i1,i2,
     & i3)+ryy22(i1,i2,i3))*ur2(i1,i2,i3)-f(i1,i2-is2,i3))/(-(sx(i1,
     & i2,i3)**2+sy(i1,i2,i3)**2)/dr(axis)**2+is2*(sxx22(i1,i2,i3)+
     & syy22(i1,i2,i3))/(2.*dr(axis)))
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               end if
              end do
              end do
              end do
            else
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1,i2-is2,i3)=((sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)*(-
     & 2.*u(i1,i2,i3)+u(i1,i2+is2,i3))/dr(axis)**2+(sxx22(i1,i2,i3)+
     & syy22(i1,i2,i3))*(is2*u(i1,i2+is2,i3))/(2.*dr(axis))+2.*(rx(i1,
     & i2,i3)*sx(i1,i2,i3)+ry(i1,i2,i3)*sy(i1,i2,i3))*urs2(i1,i2,i3)+(
     & rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)*urr2(i1,i2,i3)+(rxx22(i1,i2,
     & i3)+ryy22(i1,i2,i3))*ur2(i1,i2,i3)-0.*f(i1,i2+is2,i3))/(-(sx(
     & i1,i2,i3)**2+sy(i1,i2,i3)**2)/dr(axis)**2+is2*(sxx22(i1,i2,i3)+
     & syy22(i1,i2,i3))/(2.*dr(axis)))
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
               end if
              end do
              end do
              end do
            end if
           end if


!$$$           if( axis.eq.0 )then
!$$$            loopsMaskForceAndExtrapolate(u(i1-is1,i2,i3)=u(i1-is1,i2,i3)!$$$                +(f(i1-is1,i2,i3)-ulaplacian22(i1,i2,i3))/( !$$$                 (rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)/dr(axis)**2-is1*(rxx22(i1,i2,i3)+ryy22(i1,i2,i3))/(2.*dr(axis)) ),!$$$                           u(i1-is1,i2,i3)=4.*u(i1,i2,i3)-6.*u(i1+is1,i2,i3)+4.*u(i1+2*is1,i2,i3)-u(i1+3*is1,i2,i3))
!$$$c                           u(i1-is1,i2,i3)=3.*u(i1,i2,i3)-3.*u(i1+is1,i2,i3)+u(i1+2*is1,i2,i3))
!$$$c                           u(i1-is1,i2,i3)=2.*u(i1,i2,i3)-u(i1+is1,i2,i3))
!$$$           else 
!$$$            loopsMaskForceAndExtrapolate(u(i1,i2-is2,i3)=u(i1,i2-is2,i3)!$$$                +(f(i1,i2-is2,i3)-ulaplacian22(i1,i2,i3) )/( !$$$                 (sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)/dr(axis)**2-is2*(sxx22(i1,i2,i3)+syy22(i1,i2,i3))/(2.*dr(axis)) ),!$$$                           u(i1,i2-is2,i3)=4.*u(i1,i2,i3)-6.*u(i1,i2+is2,i3)+4.*u(i1,i2+2*is2,i3)-u(i1,i2+3*is2,i3))
!$$$c                          u(i1,i2-is2,i3)=3.*u(i1,i2,i3)-3.*u(i1,i2+is2,i3)+u(i1,i2+2*is2,i3))
!$$$c                           u(i1,i2-is2,i3)=2.*u(i1,i2,i3)-u(i1,i2+is2,i3))
!$$$           end if 


          else if( gridType.eq.curvilinear .and.nd.eq.3 )then

           if( axis.eq.0 )then
            if( useForcing.eq.1 )then
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1-is1,i2,i3)=u(i1-is1,i2,i3)+(f(i1-is1,i2,i3)-
     & ulaplacian23(i1,i2,i3))/((rx(i1,i2,i3)**2+ry(i1,i2,i3)**2+rz(
     & i1,i2,i3)**2)/dr(axis)**2-is1*(rxx23(i1,i2,i3)+ryy23(i1,i2,i3)+
     & rzz23(i1,i2,i3))/(2.*dr(axis)))
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               end if
              end do
              end do
              end do
            else
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1-is1,i2,i3)=u(i1-is1,i2,i3)+(-ulaplacian23(i1,i2,
     & i3))/((rx(i1,i2,i3)**2+ry(i1,i2,i3)**2+rz(i1,i2,i3)**2)/dr(
     & axis)**2-is1*(rxx23(i1,i2,i3)+ryy23(i1,i2,i3)+rzz23(i1,i2,i3))
     & /(2.*dr(axis)))
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
               end if
              end do
              end do
              end do
            end if
           else if( axis.eq.1 )then
            if( useForcing.eq.1 )then
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1,i2-is2,i3)=u(i1,i2-is2,i3)+(f(i1,i2-is2,i3)-
     & ulaplacian23(i1,i2,i3))/((sx(i1,i2,i3)**2+sy(i1,i2,i3)**2+sz(
     & i1,i2,i3)**2)/dr(axis)**2-is2*(sxx23(i1,i2,i3)+syy23(i1,i2,i3)+
     & szz23(i1,i2,i3))/(2.*dr(axis)))
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               end if
              end do
              end do
              end do
            else
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1,i2-is2,i3)=u(i1,i2-is2,i3)+(-ulaplacian23(i1,i2,
     & i3))/((sx(i1,i2,i3)**2+sy(i1,i2,i3)**2+sz(i1,i2,i3)**2)/dr(
     & axis)**2-is2*(sxx23(i1,i2,i3)+syy23(i1,i2,i3)+szz23(i1,i2,i3))
     & /(2.*dr(axis)))
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
               end if
              end do
              end do
              end do
            end if
           else
            if( useForcing.eq.1 )then
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1,i2,i3-is3)=u(i1,i2,i3-is3)+(f(i1,i2,i3-is3)-
     & ulaplacian23(i1,i2,i3))/((tx(i1,i2,i3)**2+ty(i1,i2,i3)**2+tz(
     & i1,i2,i3)**2)/dr(axis)**2-is3*(txx23(i1,i2,i3)+tyy23(i1,i2,i3)+
     & tzz23(i1,i2,i3))/(2.*dr(axis)))
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
                  u(i1-2*is1,i2-2*is2,i3-2*is3)=5.*u(i1-  is1,i2-  is2,
     & i3-  is3)-10.*u(i1      ,i2      ,i3      )+10.*u(i1+  is1,i2+ 
     &  is2,i3+  is3)-5.*u(i1+2*is1,i2+2*is2,i3+2*is3)+u(i1+3*is1,i2+
     & 3*is2,i3+3*is3)
               end if
              end do
              end do
              end do
            else
              do i3=n3a,n3b
              do i2=n2a,n2b
              do i1=n1a,n1b
               if( mask(i1,i2,i3).gt.0 )then
                 u(i1,i2,i3-is3)=u(i1,i2,i3-is3)+(-ulaplacian23(i1,i2,
     & i3))/((tx(i1,i2,i3)**2+ty(i1,i2,i3)**2+tz(i1,i2,i3)**2)/dr(
     & axis)**2-is3*(txx23(i1,i2,i3)+tyy23(i1,i2,i3)+tzz23(i1,i2,i3))
     & /(2.*dr(axis)))
               else if( mask(i1,i2,i3).lt.0 )then
                  if( orderOfExtrapolation.eq.3 )then
                    u(i1-is1,i2-is2,i3-is3)=3.*u(i1      ,i2      ,i3  
     &     )-3.*u(i1+  is1,i2+  is2,i3+  is3)+u(i1+2*is1,i2+2*is2,i3+
     & 2*is3)
                  else if( orderOfExtrapolation.eq.4 )then
                    u(i1-is1,i2-is2,i3-is3)=4.*u(i1      ,i2      ,i3  
     &     )-6.*u(i1+  is1,i2+  is2,i3+  is3)+4.*u(i1+2*is1,i2+2*is2,
     & i3+2*is3)-u(i1+3*is1,i2+3*is2,i3+3*is3)
                  else if( orderOfExtrapolation.eq.5 )then
                    u(i1-is1,i2-is2,i3-is3)=5.*u(i1      ,i2      ,i3  
     &     )-10.*u(i1+  is1,i2+  is2,i3+  is3)+10.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-5.*u(i1+3*is1,i2+3*is2,i3+3*is3)+u(i1+4*is1,i2+4*
     & is2,i3+4*is3)
                  else if( orderOfExtrapolation.eq.6 )then
                    u(i1-is1,i2-is2,i3-is3)=6.*u(i1      ,i2      ,i3  
     &     )-15.*u(i1+  is1,i2+  is2,i3+  is3)+20.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-15.*u(i1+3*is1,i2+3*is2,i3+3*is3)+6.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-u(i1+5*is1,i2+5*is2,i3+5*is3)
                  else if( orderOfExtrapolation.eq.7 )then
                    u(i1-is1,i2-is2,i3-is3)=7.*u(i1      ,i2      ,i3  
     &     )-21.*u(i1+  is1,i2+  is2,i3+  is3)+35.*u(i1+2*is1,i2+2*
     & is2,i3+2*is3)-35.*u(i1+3*is1,i2+3*is2,i3+3*is3)+21.*u(i1+4*is1,
     & i2+4*is2,i3+4*is3)-7.*u(i1+5*is1,i2+5*is2,i3+5*is3)+u(i1+6*is1,
     & i2+6*is2,i3+6*is3)
                  else if( orderOfExtrapolation.eq.2 )then
                    u(i1-is1,i2-is2,i3-is3)=2.*u(i1      ,i2      ,i3  
     &     )-u(i1+  is1,i2+  is2,i3+  is3)
                  else
                    write(*,*) 'bcOpt:ERROR:'
                    write(*,*) ' orderOfExtrapolation=',
     & orderOfExtrapolation
                    stop 1
                  end if
               end if
              end do
              end do
              end do
            end if
           end if

          else
            write(*,*) 'bcOpt:ERROR:Unknown gridType =',gridType
            stop 6
          end if

        else
            write(*,*) 'bcOpt:ERROR:Unknown equationToSolve =',
     & equationToSolve
            stop 6
        end if

      else
        write(*,*) 'bcOpt:ERROR: bc,orderOfAccuracy=',bc,
     &     orderOfAccuracy
        stop 3
      end if


      return
      end


! *************************************************************************************************************



! ================================================================================================
!  /Description:
!     Apply an extrapolation or symmetry boundary condition.
!  /i1,i2,i3,n: Indexes of points to assign.
! ===============================================================================================


! ******************************** new *************************

      subroutine updateCorners( nd,
     & ndu1a,ndu1b,ndu2a,ndu2b,ndu3a,ndu3b,ndu4a,ndu4b,
     & ndm1a,ndm1b,ndm2a,ndm2b,ndm3a,ndm3b,
     & u,mask, dimension, indexRange,
     & isPeriodic, bc, cornerBC, ipar, rpar )
!======================================================================
!  Update corners (and edges in 3D) 
!         
! nd : number of space dimensions
! ca,cb : assign components c=uC(ca),..,uC(cb)
! useWhereMask : if not equal to zero, only apply the BC where mask(i1,i2,i3).ne.0
!======================================================================
      implicit none
      integer nd,
     & ndu1a,ndu1b,ndu2a,ndu2b,ndu3a,ndu3b,ndu4a,ndu4b,
     & ndm1a,ndm1b,ndm2a,ndm2b,ndm3a,ndm3b

      integer bc(0:1,0:2),isPeriodic(0:2)
      integer indexRange(0:1,0:2),dimension(0:1,0:2)
      integer cornerBC(0:2,0:2,0:2)

      real u(ndu1a:ndu1b,ndu2a:ndu2b,ndu3a:ndu3b,ndu4a:ndu4b)
      integer mask(ndm1a:ndm1b,ndm2a:ndm2b,ndm3a:ndm3b)
      integer ipar(0:*)
      real rpar(0:*)

!     **** corner boundary conditions *****
      integer extrapolateCorner,symmetryCorner,taylor2ndOrder
      parameter(extrapolateCorner=0,symmetryCorner=1,taylor2ndOrder=2)

!     --- local variables 
      integer c,ca,cb,orderOfExtrapolation,useWhereMask
      integer side1,side2,side3,is1,is2,is3,i1,i2,i3
      integer n1a,n1b,n1c, n2a,n2b,n2c, n3a,n3b,n3c


      ca                   = ipar(0)
      cb                   = ipar(1)
      useWhereMask         = ipar(2)
      orderOfExtrapolation = ipar(3)

!        ---extrapolate or otherwise assign values outside edges---

      if( isPeriodic(0).eq.0 .and. isPeriodic(1).eq.0 )then
!     ...Do the four edges parallel to i3
        n3a=indexRange(0,2)
        n3b=indexRange(1,2)
        n3c=1
        side3=2 ! this means we are on an edge
        is3=0
        do side1=0,1
          is1=1-2*side1
          do side2=0,1
             is2=1-2*side2
          if( bc(side1,0).gt.0 .or. bc(side2,1).gt.0 )then
              if( side2.eq.0 )then
                n2a=dimension(side2,1)+1-is2
                n2b=indexRange(side2,1)-is2
                n2c=1
              else
                n2a=indexRange(side2,1)-is2
                n2b=dimension(side2,1)-1-is2
                n2c=1
              end if
!	      I2m= side2==Start ? Range(c.dimension(side2,1)+1-is2,indexRange(side2,1)-is2) :
!	        Range(indexRange(side2,1)-is2,c.dimension(side2,1)-1-is2)
!             We have to loop over i1 from inside to outside since later points depend on previous ones.
!   	      for( i1=indexRange[side1][axis1]; i1!=c.dimension(side1,axis1); i1-=is1 )
!               I1m=i1-is1;
            n1a=indexRange(side1,0)-is1
              n1b=dimension(side1,0)
              n1c=-is1
            if( cornerBC(side1,side2,side3).eq.extrapolateCorner )then
              if( orderOfExtrapolation.eq.1 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=u(i1+(is1),i2+(is2),i3+(is3),
     & c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=u(i1+(is1),i2+(is2),i3+(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.2 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=2.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=2.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.3 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=3.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-3.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=3.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-3.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+u(i1+3*(is1),i2+3*
     & (is2),i3+3*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.4 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=4.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-6.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+4.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-u(i1+4*(is1),i2+4*(is2),i3+4*(
     & is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=4.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-6.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+4.*u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)-u(i1+4*(is1),i2+4*(is2),i3+4*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.5 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=5.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-10.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+10.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-5.*u(i1+4*(is1),i2+4*(is2),i3+4*(
     & is3),c)+u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=5.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-10.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+10.*u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)-5.*u(i1+4*(is1),i2+4*(is2),i3+4*(is3),
     & c)+u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.6 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=6.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-15.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+20.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-15.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+6.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-u(i1+6*(is1),
     & i2+6*(is2),i3+6*(is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=6.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-15.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+20.*u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)-15.*u(i1+4*(is1),i2+4*(is2),i3+4*(is3)
     & ,c)+6.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-u(i1+6*(is1),i2+6*
     & (is2),i3+6*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.7 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=7.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-21.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+35.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-35.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+21.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-7.*u(i1+6*(
     & is1),i2+6*(is2),i3+6*(is3),c)+u(i1+7*(is1),i2+7*(is2),i3+7*(
     & is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=7.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-21.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+35.*u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)-35.*u(i1+4*(is1),i2+4*(is2),i3+4*(is3)
     & ,c)+21.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-7.*u(i1+6*(is1),
     & i2+6*(is2),i3+6*(is3),c)+u(i1+7*(is1),i2+7*(is2),i3+7*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.8 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=8.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-28.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+56.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-70.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+56.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-28.*u(i1+6*(
     & is1),i2+6*(is2),i3+6*(is3),c)+8.*u(i1+7*(is1),i2+7*(is2),i3+7*(
     & is3),c)-u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=8.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-28.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+56.*u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)-70.*u(i1+4*(is1),i2+4*(is2),i3+4*(is3)
     & ,c)+56.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-28.*u(i1+6*(is1),
     & i2+6*(is2),i3+6*(is3),c)+8.*u(i1+7*(is1),i2+7*(is2),i3+7*(is3),
     & c)-u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.9 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=9.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-36.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+84.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-126.*u(i1+4*(is1),i2+4*(is2),i3+
     & 4*(is3),c)+126.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-84.*u(i1+
     & 6*(is1),i2+6*(is2),i3+6*(is3),c)+36.*u(i1+7*(is1),i2+7*(is2),
     & i3+7*(is3),c)-9.*u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)+u(i1+9*(
     & is1),i2+9*(is2),i3+9*(is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=9.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-36.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+84.*u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)-126.*u(i1+4*(is1),i2+4*(is2),i3+4*(
     & is3),c)+126.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-84.*u(i1+6*(
     & is1),i2+6*(is2),i3+6*(is3),c)+36.*u(i1+7*(is1),i2+7*(is2),i3+7*
     & (is3),c)-9.*u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)+u(i1+9*(is1),
     & i2+9*(is2),i3+9*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else
                write(*,*) 'fixBoundaryCorners:Error: '
                write(*,*) 'unable to extrapolate '
                write(*,*) ' to orderOfExtrapolation',
     & orderOfExtrapolation
                write(*,*) ' can only do orders 1 to 9.'
                stop 1
              end if
            else if( cornerBC(side1,side2,side3).eq.symmetryCorner )
     & then
            !  symmetry boundary condition 
              if( useWhereMask.ne.0 )then
                do c=ca,cb
                  do i3=n3a,n3b,n3c
                    do i2=n2a,n2b,n2c
                      do i1=n1a,n1b,n1c
                        if( mask(i1,i2,i3).ne.0 )then
                          u(i1,i2,i3,c)=u(i1+2*(is1),i2+2*(is2),i3+2*(
     & is3),c)
                        end if
                      end do
                    end do
                  end do
                end do
              else
                do c=ca,cb
                  do i3=n3a,n3b,n3c
                    do i2=n2a,n2b,n2c
                      do i1=n1a,n1b,n1c
                        u(i1,i2,i3,c)=u(i1+2*(is1),i2+2*(is2),i3+2*(
     & is3),c)
                      end do
                    end do
                  end do
                end do
              end if
            else if( cornerBC(side1,side2,side3).eq.taylor2ndOrder )
     & then
            !   Using a taylor approximation:
            !    u(+1,+1) = u(0,0) +dr*ur + ds*us + dr^2/2 urr + dr*ds*urs + ds^2/2 uss + ...
            !    u(-1,-1) = u(0,0) -dr*ur - ds*us + dr^2/2 urr + ...
            !    u(-1,-1) = u(1,1) -2dr*ur -2*ds*us + O(dr^3+...)
            !    ur = (u(1,0)-u(-1,0))/(2dr)
            !   gives
            !     u(-1,-1) = u(1,1) -( u(1,0)-u(-1,0) ) - (u(0,1)-u(0,-1))
              if( nd.eq.2 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),i3,
     & c)-u(i1+2*(is1),i2+(is2),i3,c)+u(i1,i2+(is2),i3,c)-u(i1+(is1),
     & i2+2*(is2),i3,c)+  u(i1+(is1),i2,i3,c))
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),i3,c)-
     & u(i1+2*(is1),i2+(is2),i3,c)+u(i1,i2+(is2),i3,c)-u(i1+(is1),i2+
     & 2*(is2),i3,c)+  u(i1+(is1),i2,i3,c))
                        end do
                      end do
                    end do
                  end do
                end if
              else if( nd.eq.3 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),i3+
     & 2*(is3),c)-u(i1+2*(is1),i2+(is2),i3+(is3),c)+u(i1,i2+(is2),i3+(
     & is3),c)-u(i1+(is1),i2+2*(is2),i3+(is3),c)+  u(i1+(is1),i2,i3+(
     & is3),c)-u(i1+(is1),i2+(is2),i3+2*(is3),c)+u(i1+(is1),i2+(is2),
     & i3,c))
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),i3+2*(
     & is3),c)-u(i1+2*(is1),i2+(is2),i3+(is3),c)+u(i1,i2+(is2),i3+(
     & is3),c)-u(i1+(is1),i2+2*(is2),i3+(is3),c)+  u(i1+(is1),i2,i3+(
     & is3),c)-u(i1+(is1),i2+(is2),i3+2*(is3),c)+u(i1+(is1),i2+(is2),
     & i3,c))
                        end do
                      end do
                    end do
                  end do
                end if
              end if
            else
              write(*,*)'fixBoundaryCorners:Error:'
              write(*,*)' unknown cornerBC=',cornerBC(side1,side2,
     & side3)
            end if
            end if
          end do
        end do

      end if
      if( nd.le.2 )then
        return
      end if

      if( isPeriodic(0).eq.0 .and. isPeriodic(2).eq.0 )then
!     ...Do the four edges parallel to i2
        n2a=indexRange(0,1)
        n2b=indexRange(1,1)
        n2c=1
        side2=2 ! this means we are on an edge
        is2=0
        do side1=0,1
          is1=1-2*side1
          do side3=0,1
            is3=1-2*side3
            if( bc(side1,0).gt.0 .or. bc(side3,2).gt.0 )then
!	      I3m= side3==Start ? Range(c.dimension(side3,2)+1-is3,indexRange(side3,2)-is3) :
!	      Range(indexRange(side3,2)-is3,c.dimension(side3,2)-1-is3)
              if( side3.eq.0 )then
                n3a=dimension(side3,2)+1-is3
                n3b=indexRange(side3,2)-is3
                n3c=1
              else
                n3a=indexRange(side3,2)-is3
                n3b=dimension(side3,2)-1-is3
                n3c=1
              end if
            n1a=indexRange(side1,0)-is1
              n1b=dimension(side1,0)
              n1c=-is1
            if( cornerBC(side1,side2,side3).eq.extrapolateCorner )then
              if( orderOfExtrapolation.eq.1 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=u(i1+(is1),i2+(is2),i3+(is3),
     & c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=u(i1+(is1),i2+(is2),i3+(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.2 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=2.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=2.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.3 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=3.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-3.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=3.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-3.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+u(i1+3*(is1),i2+3*
     & (is2),i3+3*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.4 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=4.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-6.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+4.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-u(i1+4*(is1),i2+4*(is2),i3+4*(
     & is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=4.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-6.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+4.*u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)-u(i1+4*(is1),i2+4*(is2),i3+4*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.5 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=5.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-10.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+10.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-5.*u(i1+4*(is1),i2+4*(is2),i3+4*(
     & is3),c)+u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=5.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-10.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+10.*u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)-5.*u(i1+4*(is1),i2+4*(is2),i3+4*(is3),
     & c)+u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.6 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=6.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-15.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+20.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-15.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+6.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-u(i1+6*(is1),
     & i2+6*(is2),i3+6*(is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=6.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-15.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+20.*u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)-15.*u(i1+4*(is1),i2+4*(is2),i3+4*(is3)
     & ,c)+6.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-u(i1+6*(is1),i2+6*
     & (is2),i3+6*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.7 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=7.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-21.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+35.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-35.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+21.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-7.*u(i1+6*(
     & is1),i2+6*(is2),i3+6*(is3),c)+u(i1+7*(is1),i2+7*(is2),i3+7*(
     & is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=7.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-21.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+35.*u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)-35.*u(i1+4*(is1),i2+4*(is2),i3+4*(is3)
     & ,c)+21.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-7.*u(i1+6*(is1),
     & i2+6*(is2),i3+6*(is3),c)+u(i1+7*(is1),i2+7*(is2),i3+7*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.8 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=8.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-28.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+56.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-70.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+56.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-28.*u(i1+6*(
     & is1),i2+6*(is2),i3+6*(is3),c)+8.*u(i1+7*(is1),i2+7*(is2),i3+7*(
     & is3),c)-u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=8.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-28.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+56.*u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)-70.*u(i1+4*(is1),i2+4*(is2),i3+4*(is3)
     & ,c)+56.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-28.*u(i1+6*(is1),
     & i2+6*(is2),i3+6*(is3),c)+8.*u(i1+7*(is1),i2+7*(is2),i3+7*(is3),
     & c)-u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( orderOfExtrapolation.eq.9 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=9.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-36.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+84.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-126.*u(i1+4*(is1),i2+4*(is2),i3+
     & 4*(is3),c)+126.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-84.*u(i1+
     & 6*(is1),i2+6*(is2),i3+6*(is3),c)+36.*u(i1+7*(is1),i2+7*(is2),
     & i3+7*(is3),c)-9.*u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)+u(i1+9*(
     & is1),i2+9*(is2),i3+9*(is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=9.*u(i1+(is1),i2+(is2),i3+(is3)
     & ,c)-36.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+84.*u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)-126.*u(i1+4*(is1),i2+4*(is2),i3+4*(
     & is3),c)+126.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-84.*u(i1+6*(
     & is1),i2+6*(is2),i3+6*(is3),c)+36.*u(i1+7*(is1),i2+7*(is2),i3+7*
     & (is3),c)-9.*u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)+u(i1+9*(is1),
     & i2+9*(is2),i3+9*(is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else
                write(*,*) 'fixBoundaryCorners:Error: '
                write(*,*) 'unable to extrapolate '
                write(*,*) ' to orderOfExtrapolation',
     & orderOfExtrapolation
                write(*,*) ' can only do orders 1 to 9.'
                stop 1
              end if
            else if( cornerBC(side1,side2,side3).eq.symmetryCorner )
     & then
            !  symmetry boundary condition 
              if( useWhereMask.ne.0 )then
                do c=ca,cb
                  do i3=n3a,n3b,n3c
                    do i2=n2a,n2b,n2c
                      do i1=n1a,n1b,n1c
                        if( mask(i1,i2,i3).ne.0 )then
                          u(i1,i2,i3,c)=u(i1+2*(is1),i2+2*(is2),i3+2*(
     & is3),c)
                        end if
                      end do
                    end do
                  end do
                end do
              else
                do c=ca,cb
                  do i3=n3a,n3b,n3c
                    do i2=n2a,n2b,n2c
                      do i1=n1a,n1b,n1c
                        u(i1,i2,i3,c)=u(i1+2*(is1),i2+2*(is2),i3+2*(
     & is3),c)
                      end do
                    end do
                  end do
                end do
              end if
            else if( cornerBC(side1,side2,side3).eq.taylor2ndOrder )
     & then
            !   Using a taylor approximation:
            !    u(+1,+1) = u(0,0) +dr*ur + ds*us + dr^2/2 urr + dr*ds*urs + ds^2/2 uss + ...
            !    u(-1,-1) = u(0,0) -dr*ur - ds*us + dr^2/2 urr + ...
            !    u(-1,-1) = u(1,1) -2dr*ur -2*ds*us + O(dr^3+...)
            !    ur = (u(1,0)-u(-1,0))/(2dr)
            !   gives
            !     u(-1,-1) = u(1,1) -( u(1,0)-u(-1,0) ) - (u(0,1)-u(0,-1))
              if( nd.eq.2 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),i3,
     & c)-u(i1+2*(is1),i2+(is2),i3,c)+u(i1,i2+(is2),i3,c)-u(i1+(is1),
     & i2+2*(is2),i3,c)+  u(i1+(is1),i2,i3,c))
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),i3,c)-
     & u(i1+2*(is1),i2+(is2),i3,c)+u(i1,i2+(is2),i3,c)-u(i1+(is1),i2+
     & 2*(is2),i3,c)+  u(i1+(is1),i2,i3,c))
                        end do
                      end do
                    end do
                  end do
                end if
              else if( nd.eq.3 )then
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),i3+
     & 2*(is3),c)-u(i1+2*(is1),i2+(is2),i3+(is3),c)+u(i1,i2+(is2),i3+(
     & is3),c)-u(i1+(is1),i2+2*(is2),i3+(is3),c)+  u(i1+(is1),i2,i3+(
     & is3),c)-u(i1+(is1),i2+(is2),i3+2*(is3),c)+u(i1+(is1),i2+(is2),
     & i3,c))
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),i3+2*(
     & is3),c)-u(i1+2*(is1),i2+(is2),i3+(is3),c)+u(i1,i2+(is2),i3+(
     & is3),c)-u(i1+(is1),i2+2*(is2),i3+(is3),c)+  u(i1+(is1),i2,i3+(
     & is3),c)-u(i1+(is1),i2+(is2),i3+2*(is3),c)+u(i1+(is1),i2+(is2),
     & i3,c))
                        end do
                      end do
                    end do
                  end do
                end if
              end if
            else
              write(*,*)'fixBoundaryCorners:Error:'
              write(*,*)' unknown cornerBC=',cornerBC(side1,side2,
     & side3)
            end if
            end if
          end do
        end do
      end if

      if( isPeriodic(1).eq.0 .and. isPeriodic(2).eq.0 )then
!          ...Do the four edges parallel to i1
        n1a=indexRange(0,0)
        n1b=indexRange(1,0)
        n1c=1
        side1=2 ! this means we are on an edge
        is1=0
        do side2=0,1
          is2=1-2*side2
!          I2m= side2==Start ? Range(c.dimension(side2,1)+1-is2,indexRange(side2,1)-is2) :
!          Range(indexRange(side2,1)-is2,c.dimension(side2,1)-1-is2)
          if( side2.eq.0 )then
            n2a=dimension(side2,1)+1-is2
            n2b=indexRange(side2,1)-is2
            n2c=1
          else
            n2a=indexRange(side2,1)-is2
            n2b=dimension(side2,1)-1-is2
            n2c=1
          end if

          do side3=0,1
            is3=1-2*side3
            if( bc(side2,1).gt.0 .or. bc(side3,2).gt.0 )then
!             We have to loop over i3 from inside to outside since later points depend on previous ones.
            n3a=indexRange(side3,2)-is3
              n3b=dimension(side3,2)
              n3c=-is3
              if( cornerBC(side1,side2,side3).eq.extrapolateCorner )
     & then
                if( orderOfExtrapolation.eq.1 )then
                  if( useWhereMask.ne.0 )then
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            if( mask(i1,i2,i3).ne.0 )then
                              u(i1,i2,i3,c)=u(i1+(is1),i2+(is2),i3+(
     & is3),c)
                            end if
                          end do
                        end do
                      end do
                    end do
                  else
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            u(i1,i2,i3,c)=u(i1+(is1),i2+(is2),i3+(is3),
     & c)
                          end do
                        end do
                      end do
                    end do
                  end if
                else if( orderOfExtrapolation.eq.2 )then
                  if( useWhereMask.ne.0 )then
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            if( mask(i1,i2,i3).ne.0 )then
                              u(i1,i2,i3,c)=2.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)
                            end if
                          end do
                        end do
                      end do
                    end do
                  else
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            u(i1,i2,i3,c)=2.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)
                          end do
                        end do
                      end do
                    end do
                  end if
                else if( orderOfExtrapolation.eq.3 )then
                  if( useWhereMask.ne.0 )then
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            if( mask(i1,i2,i3).ne.0 )then
                              u(i1,i2,i3,c)=3.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-3.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)
                            end if
                          end do
                        end do
                      end do
                    end do
                  else
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            u(i1,i2,i3,c)=3.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-3.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)
                          end do
                        end do
                      end do
                    end do
                  end if
                else if( orderOfExtrapolation.eq.4 )then
                  if( useWhereMask.ne.0 )then
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            if( mask(i1,i2,i3).ne.0 )then
                              u(i1,i2,i3,c)=4.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-6.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+4.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-u(i1+4*(is1),i2+4*(is2),i3+4*(
     & is3),c)
                            end if
                          end do
                        end do
                      end do
                    end do
                  else
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            u(i1,i2,i3,c)=4.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-6.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+4.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-u(i1+4*(is1),i2+4*(is2),i3+4*(
     & is3),c)
                          end do
                        end do
                      end do
                    end do
                  end if
                else if( orderOfExtrapolation.eq.5 )then
                  if( useWhereMask.ne.0 )then
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            if( mask(i1,i2,i3).ne.0 )then
                              u(i1,i2,i3,c)=5.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-10.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+10.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-5.*u(i1+4*(is1),i2+4*(is2),i3+4*(
     & is3),c)+u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)
                            end if
                          end do
                        end do
                      end do
                    end do
                  else
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            u(i1,i2,i3,c)=5.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-10.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+10.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-5.*u(i1+4*(is1),i2+4*(is2),i3+4*(
     & is3),c)+u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)
                          end do
                        end do
                      end do
                    end do
                  end if
                else if( orderOfExtrapolation.eq.6 )then
                  if( useWhereMask.ne.0 )then
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            if( mask(i1,i2,i3).ne.0 )then
                              u(i1,i2,i3,c)=6.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-15.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+20.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-15.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+6.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-u(i1+6*(is1),
     & i2+6*(is2),i3+6*(is3),c)
                            end if
                          end do
                        end do
                      end do
                    end do
                  else
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            u(i1,i2,i3,c)=6.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-15.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+20.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-15.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+6.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-u(i1+6*(is1),
     & i2+6*(is2),i3+6*(is3),c)
                          end do
                        end do
                      end do
                    end do
                  end if
                else if( orderOfExtrapolation.eq.7 )then
                  if( useWhereMask.ne.0 )then
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            if( mask(i1,i2,i3).ne.0 )then
                              u(i1,i2,i3,c)=7.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-21.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+35.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-35.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+21.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-7.*u(i1+6*(
     & is1),i2+6*(is2),i3+6*(is3),c)+u(i1+7*(is1),i2+7*(is2),i3+7*(
     & is3),c)
                            end if
                          end do
                        end do
                      end do
                    end do
                  else
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            u(i1,i2,i3,c)=7.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-21.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+35.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-35.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+21.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-7.*u(i1+6*(
     & is1),i2+6*(is2),i3+6*(is3),c)+u(i1+7*(is1),i2+7*(is2),i3+7*(
     & is3),c)
                          end do
                        end do
                      end do
                    end do
                  end if
                else if( orderOfExtrapolation.eq.8 )then
                  if( useWhereMask.ne.0 )then
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            if( mask(i1,i2,i3).ne.0 )then
                              u(i1,i2,i3,c)=8.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-28.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+56.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-70.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+56.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-28.*u(i1+6*(
     & is1),i2+6*(is2),i3+6*(is3),c)+8.*u(i1+7*(is1),i2+7*(is2),i3+7*(
     & is3),c)-u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)
                            end if
                          end do
                        end do
                      end do
                    end do
                  else
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            u(i1,i2,i3,c)=8.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-28.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+56.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-70.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+56.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-28.*u(i1+6*(
     & is1),i2+6*(is2),i3+6*(is3),c)+8.*u(i1+7*(is1),i2+7*(is2),i3+7*(
     & is3),c)-u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)
                          end do
                        end do
                      end do
                    end do
                  end if
                else if( orderOfExtrapolation.eq.9 )then
                  if( useWhereMask.ne.0 )then
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            if( mask(i1,i2,i3).ne.0 )then
                              u(i1,i2,i3,c)=9.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-36.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+84.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-126.*u(i1+4*(is1),i2+4*(is2),i3+
     & 4*(is3),c)+126.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-84.*u(i1+
     & 6*(is1),i2+6*(is2),i3+6*(is3),c)+36.*u(i1+7*(is1),i2+7*(is2),
     & i3+7*(is3),c)-9.*u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)+u(i1+9*(
     & is1),i2+9*(is2),i3+9*(is3),c)
                            end if
                          end do
                        end do
                      end do
                    end do
                  else
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            u(i1,i2,i3,c)=9.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-36.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+84.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-126.*u(i1+4*(is1),i2+4*(is2),i3+
     & 4*(is3),c)+126.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-84.*u(i1+
     & 6*(is1),i2+6*(is2),i3+6*(is3),c)+36.*u(i1+7*(is1),i2+7*(is2),
     & i3+7*(is3),c)-9.*u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)+u(i1+9*(
     & is1),i2+9*(is2),i3+9*(is3),c)
                          end do
                        end do
                      end do
                    end do
                  end if
                else
                  write(*,*) 'fixBoundaryCorners:Error: '
                  write(*,*) 'unable to extrapolate '
                  write(*,*) ' to orderOfExtrapolation',
     & orderOfExtrapolation
                  write(*,*) ' can only do orders 1 to 9.'
                  stop 1
                end if
              else if( cornerBC(side1,side2,side3).eq.symmetryCorner )
     & then
              !  symmetry boundary condition 
                if( useWhereMask.ne.0 )then
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          if( mask(i1,i2,i3).ne.0 )then
                            u(i1,i2,i3,c)=u(i1+2*(is1),i2+2*(is2),i3+2*
     & (is3),c)
                          end if
                        end do
                      end do
                    end do
                  end do
                else
                  do c=ca,cb
                    do i3=n3a,n3b,n3c
                      do i2=n2a,n2b,n2c
                        do i1=n1a,n1b,n1c
                          u(i1,i2,i3,c)=u(i1+2*(is1),i2+2*(is2),i3+2*(
     & is3),c)
                        end do
                      end do
                    end do
                  end do
                end if
              else if( cornerBC(side1,side2,side3).eq.taylor2ndOrder )
     & then
              !   Using a taylor approximation:
              !    u(+1,+1) = u(0,0) +dr*ur + ds*us + dr^2/2 urr + dr*ds*urs + ds^2/2 uss + ...
              !    u(-1,-1) = u(0,0) -dr*ur - ds*us + dr^2/2 urr + ...
              !    u(-1,-1) = u(1,1) -2dr*ur -2*ds*us + O(dr^3+...)
              !    ur = (u(1,0)-u(-1,0))/(2dr)
              !   gives
              !     u(-1,-1) = u(1,1) -( u(1,0)-u(-1,0) ) - (u(0,1)-u(0,-1))
                if( nd.eq.2 )then
                  if( useWhereMask.ne.0 )then
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            if( mask(i1,i2,i3).ne.0 )then
                              u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),
     & i3,c)-u(i1+2*(is1),i2+(is2),i3,c)+u(i1,i2+(is2),i3,c)-u(i1+(
     & is1),i2+2*(is2),i3,c)+  u(i1+(is1),i2,i3,c))
                            end if
                          end do
                        end do
                      end do
                    end do
                  else
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),i3,
     & c)-u(i1+2*(is1),i2+(is2),i3,c)+u(i1,i2+(is2),i3,c)-u(i1+(is1),
     & i2+2*(is2),i3,c)+  u(i1+(is1),i2,i3,c))
                          end do
                        end do
                      end do
                    end do
                  end if
                else if( nd.eq.3 )then
                  if( useWhereMask.ne.0 )then
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            if( mask(i1,i2,i3).ne.0 )then
                              u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),
     & i3+2*(is3),c)-u(i1+2*(is1),i2+(is2),i3+(is3),c)+u(i1,i2+(is2),
     & i3+(is3),c)-u(i1+(is1),i2+2*(is2),i3+(is3),c)+  u(i1+(is1),i2,
     & i3+(is3),c)-u(i1+(is1),i2+(is2),i3+2*(is3),c)+u(i1+(is1),i2+(
     & is2),i3,c))
                            end if
                          end do
                        end do
                      end do
                    end do
                  else
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),i3+
     & 2*(is3),c)-u(i1+2*(is1),i2+(is2),i3+(is3),c)+u(i1,i2+(is2),i3+(
     & is3),c)-u(i1+(is1),i2+2*(is2),i3+(is3),c)+  u(i1+(is1),i2,i3+(
     & is3),c)-u(i1+(is1),i2+(is2),i3+2*(is3),c)+u(i1+(is1),i2+(is2),
     & i3,c))
                          end do
                        end do
                      end do
                    end do
                  end if
                end if
              else
                write(*,*)'fixBoundaryCorners:Error:'
                write(*,*)' unknown cornerBC=',cornerBC(side1,side2,
     & side3)
              end if
            end if
          end do
        end do
      end if

      if( isPeriodic(0).eq.0 .and. isPeriodic(1).eq.0 .and.
     &    isPeriodic(2).eq.0 )then
!           ...Do the points outside vertices in 3D
        do side1=0,1
          is1=1-2*side1
!          I1m= side1==Start ? Range(c.dimension(side1,0)+1-is1,indexRange(side1,0)-is1) :
!       	Range(indexRange(side1,0)-is1,c.dimension(side1,0)-1-is1)
!          Range(indexRange(side2,1)-is2,c.dimension(side2,1)-1-is2)
          if( side1.eq.0 )then
            n1a=dimension(side1,0)+1-is1
            n1b=indexRange(side1,0)-is1
            n1c=1
          else
            n1a=indexRange(side1,0)-is1
            n1b=dimension(side1,0)-1-is1
            n1c=1
          end if
          do side2=0,1
            is2=1-2*side2
!            I2m= side2==Start ? Range(c.dimension(side2,1)+1-is2,indexRange(side2,1)-is2) :
!            Range(indexRange(side2,1)-is2,c.dimension(side2,1)-1-is2)
            if( side2.eq.0 )then
              n2a=dimension(side2,1)+1-is2
              n2b=indexRange(side2,1)-is2
              n2c=1
            else
              n2a=indexRange(side2,1)-is2
              n2b=dimension(side2,1)-1-is2
              n2c=1
            end if
            do side3=0,1
              is3=1-2*side3
              if( bc(side1,0).gt.0 .or.
     &            bc(side2,1).gt.0 .or.
     &            bc(side3,2).gt.0 )then

                n3a=indexRange(side3,2)-is3
                n3b=dimension(side3,2)
                n3c=-is3
                if( cornerBC(side1,side2,side3).eq.extrapolateCorner )
     & then
                  if( orderOfExtrapolation.eq.1 )then
                    if( useWhereMask.ne.0 )then
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              if( mask(i1,i2,i3).ne.0 )then
                                u(i1,i2,i3,c)=u(i1+(is1),i2+(is2),i3+(
     & is3),c)
                              end if
                            end do
                          end do
                        end do
                      end do
                    else
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              u(i1,i2,i3,c)=u(i1+(is1),i2+(is2),i3+(
     & is3),c)
                            end do
                          end do
                        end do
                      end do
                    end if
                  else if( orderOfExtrapolation.eq.2 )then
                    if( useWhereMask.ne.0 )then
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              if( mask(i1,i2,i3).ne.0 )then
                                u(i1,i2,i3,c)=2.*u(i1+(is1),i2+(is2),
     & i3+(is3),c)-u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)
                              end if
                            end do
                          end do
                        end do
                      end do
                    else
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              u(i1,i2,i3,c)=2.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)
                            end do
                          end do
                        end do
                      end do
                    end if
                  else if( orderOfExtrapolation.eq.3 )then
                    if( useWhereMask.ne.0 )then
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              if( mask(i1,i2,i3).ne.0 )then
                                u(i1,i2,i3,c)=3.*u(i1+(is1),i2+(is2),
     & i3+(is3),c)-3.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)
                              end if
                            end do
                          end do
                        end do
                      end do
                    else
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              u(i1,i2,i3,c)=3.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-3.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+u(i1+3*(is1),
     & i2+3*(is2),i3+3*(is3),c)
                            end do
                          end do
                        end do
                      end do
                    end if
                  else if( orderOfExtrapolation.eq.4 )then
                    if( useWhereMask.ne.0 )then
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              if( mask(i1,i2,i3).ne.0 )then
                                u(i1,i2,i3,c)=4.*u(i1+(is1),i2+(is2),
     & i3+(is3),c)-6.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+4.*u(i1+3*
     & (is1),i2+3*(is2),i3+3*(is3),c)-u(i1+4*(is1),i2+4*(is2),i3+4*(
     & is3),c)
                              end if
                            end do
                          end do
                        end do
                      end do
                    else
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              u(i1,i2,i3,c)=4.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-6.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+4.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-u(i1+4*(is1),i2+4*(is2),i3+4*(
     & is3),c)
                            end do
                          end do
                        end do
                      end do
                    end if
                  else if( orderOfExtrapolation.eq.5 )then
                    if( useWhereMask.ne.0 )then
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              if( mask(i1,i2,i3).ne.0 )then
                                u(i1,i2,i3,c)=5.*u(i1+(is1),i2+(is2),
     & i3+(is3),c)-10.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+10.*u(i1+
     & 3*(is1),i2+3*(is2),i3+3*(is3),c)-5.*u(i1+4*(is1),i2+4*(is2),i3+
     & 4*(is3),c)+u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)
                              end if
                            end do
                          end do
                        end do
                      end do
                    else
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              u(i1,i2,i3,c)=5.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-10.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+10.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-5.*u(i1+4*(is1),i2+4*(is2),i3+4*(
     & is3),c)+u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)
                            end do
                          end do
                        end do
                      end do
                    end if
                  else if( orderOfExtrapolation.eq.6 )then
                    if( useWhereMask.ne.0 )then
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              if( mask(i1,i2,i3).ne.0 )then
                                u(i1,i2,i3,c)=6.*u(i1+(is1),i2+(is2),
     & i3+(is3),c)-15.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+20.*u(i1+
     & 3*(is1),i2+3*(is2),i3+3*(is3),c)-15.*u(i1+4*(is1),i2+4*(is2),
     & i3+4*(is3),c)+6.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-u(i1+6*(
     & is1),i2+6*(is2),i3+6*(is3),c)
                              end if
                            end do
                          end do
                        end do
                      end do
                    else
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              u(i1,i2,i3,c)=6.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-15.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+20.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-15.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+6.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-u(i1+6*(is1),
     & i2+6*(is2),i3+6*(is3),c)
                            end do
                          end do
                        end do
                      end do
                    end if
                  else if( orderOfExtrapolation.eq.7 )then
                    if( useWhereMask.ne.0 )then
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              if( mask(i1,i2,i3).ne.0 )then
                                u(i1,i2,i3,c)=7.*u(i1+(is1),i2+(is2),
     & i3+(is3),c)-21.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+35.*u(i1+
     & 3*(is1),i2+3*(is2),i3+3*(is3),c)-35.*u(i1+4*(is1),i2+4*(is2),
     & i3+4*(is3),c)+21.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-7.*u(
     & i1+6*(is1),i2+6*(is2),i3+6*(is3),c)+u(i1+7*(is1),i2+7*(is2),i3+
     & 7*(is3),c)
                              end if
                            end do
                          end do
                        end do
                      end do
                    else
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              u(i1,i2,i3,c)=7.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-21.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+35.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-35.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+21.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-7.*u(i1+6*(
     & is1),i2+6*(is2),i3+6*(is3),c)+u(i1+7*(is1),i2+7*(is2),i3+7*(
     & is3),c)
                            end do
                          end do
                        end do
                      end do
                    end if
                  else if( orderOfExtrapolation.eq.8 )then
                    if( useWhereMask.ne.0 )then
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              if( mask(i1,i2,i3).ne.0 )then
                                u(i1,i2,i3,c)=8.*u(i1+(is1),i2+(is2),
     & i3+(is3),c)-28.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+56.*u(i1+
     & 3*(is1),i2+3*(is2),i3+3*(is3),c)-70.*u(i1+4*(is1),i2+4*(is2),
     & i3+4*(is3),c)+56.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-28.*u(
     & i1+6*(is1),i2+6*(is2),i3+6*(is3),c)+8.*u(i1+7*(is1),i2+7*(is2),
     & i3+7*(is3),c)-u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)
                              end if
                            end do
                          end do
                        end do
                      end do
                    else
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              u(i1,i2,i3,c)=8.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-28.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+56.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-70.*u(i1+4*(is1),i2+4*(is2),i3+4*
     & (is3),c)+56.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-28.*u(i1+6*(
     & is1),i2+6*(is2),i3+6*(is3),c)+8.*u(i1+7*(is1),i2+7*(is2),i3+7*(
     & is3),c)-u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)
                            end do
                          end do
                        end do
                      end do
                    end if
                  else if( orderOfExtrapolation.eq.9 )then
                    if( useWhereMask.ne.0 )then
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              if( mask(i1,i2,i3).ne.0 )then
                                u(i1,i2,i3,c)=9.*u(i1+(is1),i2+(is2),
     & i3+(is3),c)-36.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+84.*u(i1+
     & 3*(is1),i2+3*(is2),i3+3*(is3),c)-126.*u(i1+4*(is1),i2+4*(is2),
     & i3+4*(is3),c)+126.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-84.*u(
     & i1+6*(is1),i2+6*(is2),i3+6*(is3),c)+36.*u(i1+7*(is1),i2+7*(is2)
     & ,i3+7*(is3),c)-9.*u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)+u(i1+9*
     & (is1),i2+9*(is2),i3+9*(is3),c)
                              end if
                            end do
                          end do
                        end do
                      end do
                    else
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              u(i1,i2,i3,c)=9.*u(i1+(is1),i2+(is2),i3+(
     & is3),c)-36.*u(i1+2*(is1),i2+2*(is2),i3+2*(is3),c)+84.*u(i1+3*(
     & is1),i2+3*(is2),i3+3*(is3),c)-126.*u(i1+4*(is1),i2+4*(is2),i3+
     & 4*(is3),c)+126.*u(i1+5*(is1),i2+5*(is2),i3+5*(is3),c)-84.*u(i1+
     & 6*(is1),i2+6*(is2),i3+6*(is3),c)+36.*u(i1+7*(is1),i2+7*(is2),
     & i3+7*(is3),c)-9.*u(i1+8*(is1),i2+8*(is2),i3+8*(is3),c)+u(i1+9*(
     & is1),i2+9*(is2),i3+9*(is3),c)
                            end do
                          end do
                        end do
                      end do
                    end if
                  else
                    write(*,*) 'fixBoundaryCorners:Error: '
                    write(*,*) 'unable to extrapolate '
                    write(*,*) ' to orderOfExtrapolation',
     & orderOfExtrapolation
                    write(*,*) ' can only do orders 1 to 9.'
                    stop 1
                  end if
                else if( cornerBC(side1,side2,side3).eq.symmetryCorner 
     & )then
                !  symmetry boundary condition 
                  if( useWhereMask.ne.0 )then
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            if( mask(i1,i2,i3).ne.0 )then
                              u(i1,i2,i3,c)=u(i1+2*(is1),i2+2*(is2),i3+
     & 2*(is3),c)
                            end if
                          end do
                        end do
                      end do
                    end do
                  else
                    do c=ca,cb
                      do i3=n3a,n3b,n3c
                        do i2=n2a,n2b,n2c
                          do i1=n1a,n1b,n1c
                            u(i1,i2,i3,c)=u(i1+2*(is1),i2+2*(is2),i3+2*
     & (is3),c)
                          end do
                        end do
                      end do
                    end do
                  end if
                else if( cornerBC(side1,side2,side3).eq.taylor2ndOrder 
     & )then
                !   Using a taylor approximation:
                !    u(+1,+1) = u(0,0) +dr*ur + ds*us + dr^2/2 urr + dr*ds*urs + ds^2/2 uss + ...
                !    u(-1,-1) = u(0,0) -dr*ur - ds*us + dr^2/2 urr + ...
                !    u(-1,-1) = u(1,1) -2dr*ur -2*ds*us + O(dr^3+...)
                !    ur = (u(1,0)-u(-1,0))/(2dr)
                !   gives
                !     u(-1,-1) = u(1,1) -( u(1,0)-u(-1,0) ) - (u(0,1)-u(0,-1))
                  if( nd.eq.2 )then
                    if( useWhereMask.ne.0 )then
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              if( mask(i1,i2,i3).ne.0 )then
                                u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),
     & i3,c)-u(i1+2*(is1),i2+(is2),i3,c)+u(i1,i2+(is2),i3,c)-u(i1+(
     & is1),i2+2*(is2),i3,c)+  u(i1+(is1),i2,i3,c))
                              end if
                            end do
                          end do
                        end do
                      end do
                    else
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),
     & i3,c)-u(i1+2*(is1),i2+(is2),i3,c)+u(i1,i2+(is2),i3,c)-u(i1+(
     & is1),i2+2*(is2),i3,c)+  u(i1+(is1),i2,i3,c))
                            end do
                          end do
                        end do
                      end do
                    end if
                  else if( nd.eq.3 )then
                    if( useWhereMask.ne.0 )then
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              if( mask(i1,i2,i3).ne.0 )then
                                u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),
     & i3+2*(is3),c)-u(i1+2*(is1),i2+(is2),i3+(is3),c)+u(i1,i2+(is2),
     & i3+(is3),c)-u(i1+(is1),i2+2*(is2),i3+(is3),c)+  u(i1+(is1),i2,
     & i3+(is3),c)-u(i1+(is1),i2+(is2),i3+2*(is3),c)+u(i1+(is1),i2+(
     & is2),i3,c))
                              end if
                            end do
                          end do
                        end do
                      end do
                    else
                      do c=ca,cb
                        do i3=n3a,n3b,n3c
                          do i2=n2a,n2b,n2c
                            do i1=n1a,n1b,n1c
                              u(i1,i2,i3,c)=(u(i1+2*(is1),i2+2*(is2),
     & i3+2*(is3),c)-u(i1+2*(is1),i2+(is2),i3+(is3),c)+u(i1,i2+(is2),
     & i3+(is3),c)-u(i1+(is1),i2+2*(is2),i3+(is3),c)+  u(i1+(is1),i2,
     & i3+(is3),c)-u(i1+(is1),i2+(is2),i3+2*(is3),c)+u(i1+(is1),i2+(
     & is2),i3,c))
                            end do
                          end do
                        end do
                      end do
                    end if
                  end if
                else
                  write(*,*)'fixBoundaryCorners:Error:'
                  write(*,*)' unknown cornerBC=',cornerBC(side1,side2,
     & side3)
                end if
              end if
            end do
          end do
        end do
      end if


      return
      end

